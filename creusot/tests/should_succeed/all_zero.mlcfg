module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use set.Set
  use set.Fset
  use map.Map
  use prelude.Prelude
  type allzero_list  =
    | AllZero_List_Cons uint32 (allzero_list)
    | AllZero_List_Nil
    
  let function allzero_list_Cons_0 (self : allzero_list) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | AllZero_List_Cons a _ -> a
      | AllZero_List_Nil -> any uint32
      end
  let function allzero_list_Cons_1 (self : allzero_list) : allzero_list = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | AllZero_List_Cons _ a -> a
      | AllZero_List_Nil -> any allzero_list
      end
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
end
module AllZero_Impl0_Len_Interface
  use Type
  use mach.int.Int
  function len (self : Type.allzero_list) : int
end
module AllZero_Impl0_Len
  use Type
  use mach.int.Int
  use mach.int.Int32
  function len [#"../all_zero.rs" 13 4 13 23] (self : Type.allzero_list) : int =
    [#"../all_zero.rs" 14 8 17 9] match (self) with
      | Type.AllZero_List_Cons _ ls -> 1 + len ls
      | Type.AllZero_List_Nil -> 0
      end
end
module AllZero_Impl0_Get_Interface
  use Type
  use mach.int.Int
  use mach.int.UInt32
  function get (self : Type.allzero_list) (ix : int) : Type.core_option_option uint32
end
module AllZero_Impl0_Get
  use Type
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.Int32
  function get [#"../all_zero.rs" 21 4 21 40] (self : Type.allzero_list) (ix : int) : Type.core_option_option uint32 =
    [#"../all_zero.rs" 22 8 28 9] match (self) with
      | Type.AllZero_List_Cons x ls -> if ix = 0 then Type.Core_Option_Option_Some x else get ls (ix - 1)
      | Type.AllZero_List_Nil -> Type.Core_Option_Option_None
      end
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module AllZero_AllZero_Interface
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use mach.int.UInt32
  clone AllZero_Impl0_Get_Interface as Get0
  clone AllZero_Impl0_Len_Interface as Len0
  val all_zero [@cfg:stackify] (l : borrowed (Type.allzero_list)) : ()
    ensures { [#"../all_zero.rs" 32 0 32 77] forall i : (int) . 0 <= i /\ i < Len0.len ( * l) -> Get0.get ( ^ l) i = Type.Core_Option_Option_Some (0 : uint32) }
    ensures { [#"../all_zero.rs" 33 10 33 34] Len0.len ( * l) = Len0.len ( ^ l) }
    
end
module AllZero_AllZero
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use mach.int.UInt32
  clone AllZero_Impl0_Get as Get0
  clone AllZero_Impl0_Len as Len0
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.allzero_list
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.allzero_list
  let rec cfg all_zero [@cfg:stackify] [#"../all_zero.rs" 34 0 34 29] (l : borrowed (Type.allzero_list)) : ()
    ensures { [#"../all_zero.rs" 32 0 32 77] forall i : (int) . 0 <= i /\ i < Len0.len ( * l) -> Get0.get ( ^ l) i = Type.Core_Option_Option_Some (0 : uint32) }
    ensures { [#"../all_zero.rs" 33 10 33 34] Len0.len ( * l) = Len0.len ( ^ l) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l_1 : borrowed (Type.allzero_list);
  ghost var old_l_4 : borrowed (Type.allzero_list);
  var _7 : ();
  var loop_l_8 : borrowed (Type.allzero_list);
  var _11 : ();
  var _12 : isize;
  var value_13 : borrowed uint32;
  var next_14 : borrowed (Type.allzero_list);
  var _15 : borrowed (Type.allzero_list);
  var _16 : ();
  var _17 : ();
  var _18 : ();
  {
    l_1 <- l;
    goto BB0
  }
  BB0 {
    _7 <- ();
    old_l_4 <- ghost ([#"../all_zero.rs" 36 16 36 28] l_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve loop_l_8 };
    loop_l_8 <- l_1;
    l_1 <- any borrowed (Type.allzero_list);
    goto BB2
  }
  BB2 {
    invariant zeroed { [#"../all_zero.rs" 39 4 41 88] (forall i : (int) . 0 <= i /\ i < Len0.len ( * loop_l_8) -> Get0.get ( ^ loop_l_8) i = Type.Core_Option_Option_Some (0 : uint32)) -> (forall i : (int) . 0 <= i /\ i < Len0.len ( * old_l_4) -> Get0.get ( ^ old_l_4) i = Type.Core_Option_Option_Some (0 : uint32)) };
    invariant in_len { [#"../all_zero.rs" 39 4 41 88] Len0.len ( ^ loop_l_8) = Len0.len ( * loop_l_8) -> Len0.len ( ^ old_l_4) = Len0.len ( * old_l_4) };
    switch ( * loop_l_8)
      | Type.AllZero_List_Cons _ _ -> goto BB3
      | _ -> goto BB4
      end
  }
  BB3 {
    value_13 <- borrow_mut (Type.allzero_list_Cons_0 ( * loop_l_8));
    loop_l_8 <- { loop_l_8 with current = (let Type.AllZero_List_Cons a b =  * loop_l_8 in Type.AllZero_List_Cons ( ^ value_13) b) };
    next_14 <- borrow_mut (Type.allzero_list_Cons_1 ( * loop_l_8));
    loop_l_8 <- { loop_l_8 with current = (let Type.AllZero_List_Cons a b =  * loop_l_8 in Type.AllZero_List_Cons a ( ^ next_14)) };
    assume { Resolve0.resolve loop_l_8 };
    value_13 <- { value_13 with current = (0 : uint32) };
    assume { Resolve1.resolve value_13 };
    _15 <- borrow_mut ( * next_14);
    next_14 <- { next_14 with current = ( ^ _15) };
    assume { Resolve2.resolve next_14 };
    assume { Resolve0.resolve loop_l_8 };
    loop_l_8 <- _15;
    _15 <- any borrowed (Type.allzero_list);
    _11 <- ();
    goto BB2
  }
  BB4 {
    assume { Resolve0.resolve loop_l_8 };
    _0 <- ();
    return _0
  }
  
end
