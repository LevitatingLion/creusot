module Prelude
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double

  type usize = uint64
  type isize = int64
  type opaque_ptr
  use seq.Seq
  type rust_array 'a = seq 'a

  type borrowed 'a = { current : 'a ; final : 'a; }
  let function ( *_ ) x = x.current
  let function ( ^_ ) x = x.final
  val borrow_mut (a : 'a) : borrowed 'a
  ensures { *result = a }

  let function id (x: 'a) : 'a = x

  let eqb (a : bool) (b : bool) : bool =
    ensures { result <-> a = b  }
    match a, b with
    | True, True -> True
    | False, False -> True
    | _ -> False
    end
end
module Int8
  use int.Int

  type int8 = < range -0x80 0x7f >

  let constant min_int8 : int = - 0x80
  let constant max_int8 : int =   0x7f
  function to_int (x : int8) : int = int8'int x

  clone export mach.int.Bounded_int with
    type t = int8,
    constant min = int8'minInt,
    constant max = int8'maxInt,
    function to_int = int8'int,
    lemma to_int_in_bounds,
    axiom extensionality
end
module Int16
  use int.Int

  type int16 = < range -0x8000 0x7fff >

  let constant min_int16 : int = - 0x8000
  let constant max_int16 : int =   0x7fff
  function to_int (x : int16) : int = int16'int x

  clone export mach.int.Bounded_int with
    type t = int16,
    constant min = int16'minInt,
    constant max = int16'maxInt,
    function to_int = int16'int,
    lemma to_int_in_bounds,
    axiom extensionality
end
module Int128
  use int.Int

  type int128 = < range -0x80000000000000000000000000000000 0x7fffffffffffffffffffffffffffffff >

  let constant min_int128 : int = - 0x80000000000000000000000000000000
  let constant max_int128 : int =   0x7fffffffffffffffffffffffffffffff
  function to_int (x : int128) : int = int128'int x

  clone export mach.int.Bounded_int with
    type t = int128,
    constant min = int128'minInt,
    constant max = int128'maxInt,
    function to_int = int128'int,
    lemma to_int_in_bounds,
    axiom extensionality
end
module UInt8
  use int.Int

  type uint8 = < range 0x0 0xff >

  let constant min_uint8 : int =  0x00
  let constant max_uint8 : int =  0xff
  function to_int (x : uint8) : int = uint8'int x

  clone export mach.int.Bounded_int with
    type t = uint8,
    constant min = uint8'minInt,
    constant max = uint8'maxInt,
    function to_int = uint8'int,
    lemma to_int_in_bounds,
    axiom extensionality
end
module UInt16
  use int.Int

  type uint16 = < range 0x0 0xffff >

  let constant min_uint16 : int =  0x00
  let constant max_uint16 : int =  0xffff
  function to_int (x : uint16) : int = uint16'int x

  clone export mach.int.Bounded_int with
    type t = uint16,
    constant min = uint16'minInt,
    constant max = uint16'maxInt,
    function to_int = uint16'int,
    lemma to_int_in_bounds,
    axiom extensionality
end

module UInt128
  use int.Int

  type uint128 = < range 0x0 0xffffffffffffffffffffffffffffffff >

  let constant min_uint128 : int =  0x00000000000000000000000000000000
  let constant max_uint128 : int =  0xffffffffffffffffffffffffffffffff
  function to_int (x : uint128) : int = uint128'int x

  clone export mach.int.Bounded_int with
    type t = uint128,
    constant min = uint128'minInt,
    constant max = uint128'maxInt,
    function to_int = uint128'int,
    lemma to_int_in_bounds,
    axiom extensionality
end
module Type
  use Ref
  use mach.int.Int
  use Int8
  use Int16
  use mach.int.Int32
  use mach.int.Int64
  use UInt8
  use UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use set.Set
  use set.Fset
  use map.Map
  use Prelude
  type binarysearch_list 't =
    | BinarySearch_List_Cons 't (binarysearch_list 't)
    | BinarySearch_List_Nil
    
  let function binarysearch_list_Cons_0 (self : binarysearch_list 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | BinarySearch_List_Cons a _ -> a
      | BinarySearch_List_Nil -> any 't
      end
  let function binarysearch_list_Cons_1 (self : binarysearch_list 't) : binarysearch_list 't
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | BinarySearch_List_Cons _ a -> a
      | BinarySearch_List_Nil -> any binarysearch_list 't
      end
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  type core_result_result 't 'e =
    | Core_Result_Result_Ok 't
    | Core_Result_Result_Err 'e
    
end
module BinarySearch_Impl0_LenLogic_Interface
  type t
  use mach.int.Int
  use mach.int.Int32
  use Type
  function len_logic (self : Type.binarysearch_list t) : int
end
module BinarySearch_Impl0_LenLogic
  type t
  use mach.int.Int
  use mach.int.Int32
  use Type
  function len_logic [#"../binary_search.rs" 22 4 22 29] (self : Type.binarysearch_list t) : int =
    [#"../binary_search.rs" 23 8 26 9] match (self) with
      | Type.BinarySearch_List_Cons _ ls -> 1 + len_logic ls
      | Type.BinarySearch_List_Nil -> 0
      end
  axiom len_logic_spec : forall self : Type.binarysearch_list t . [#"../binary_search.rs" 21 14 21 25] len_logic self >= 0
end
module BinarySearch_Impl0_LenLogic_Impl
  type t
  use mach.int.Int
  use mach.int.Int32
  use Type
  let rec ghost function len_logic (self : Type.binarysearch_list t) : int
    ensures { [#"../binary_search.rs" 21 14 21 25] result >= 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../binary_search.rs" 23 8 26 9] match (self) with
      | Type.BinarySearch_List_Cons _ ls -> 1 + len_logic ls
      | Type.BinarySearch_List_Nil -> 0
      end
end
module BinarySearch_Impl0_Get_Interface
  type t
  use Type
  use mach.int.Int
  function get (self : Type.binarysearch_list t) (ix : int) : Type.core_option_option t
end
module BinarySearch_Impl0_Get
  type t
  use Type
  use mach.int.Int
  use mach.int.Int32
  function get [#"../binary_search.rs" 30 4 30 38] (self : Type.binarysearch_list t) (ix : int) : Type.core_option_option t
    
   =
    [#"../binary_search.rs" 31 8 40 9] match (self) with
      | Type.BinarySearch_List_Cons t ls -> if ix = 0 then Type.Core_Option_Option_Some t else get ls (ix - 1)
      | Type.BinarySearch_List_Nil -> Type.Core_Option_Option_None
      end
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module BinarySearch_Impl0_Index_Interface
  type t
  use mach.int.UInt64
  use mach.int.Int
  use Type
  use Prelude
  clone BinarySearch_Impl0_Get_Interface as Get0 with type t = t
  clone BinarySearch_Impl0_LenLogic_Interface as LenLogic0 with type t = t, axiom .
  val index [@cfg:stackify] (self : Type.binarysearch_list t) (ix : usize) : t
    requires {[#"../binary_search.rs" 43 15 43 37] UInt64.to_int ix < LenLogic0.len_logic self}
    ensures { [#"../binary_search.rs" 44 14 44 44] Type.Core_Option_Option_Some result = Get0.get self (UInt64.to_int ix) }
    
end
module BinarySearch_Impl0_Index
  type t
  use mach.int.UInt64
  use mach.int.Int
  use Type
  use Prelude
  clone BinarySearch_Impl0_Get as Get0 with type t = t
  clone BinarySearch_Impl0_LenLogic as LenLogic0 with type t = t, axiom .
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.binarysearch_list t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.binarysearch_list t
  let rec cfg index [@cfg:stackify] [#"../binary_search.rs" 45 4 45 40] (self : Type.binarysearch_list t) (ix : usize) : t
    requires {[#"../binary_search.rs" 43 15 43 37] UInt64.to_int ix < LenLogic0.len_logic self}
    ensures { [#"../binary_search.rs" 44 14 44 44] Type.Core_Option_Option_Some result = Get0.get self (UInt64.to_int ix) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : t;
  var self_1 : Type.binarysearch_list t;
  var ix_2 : usize;
  var orig_ix_3 : usize;
  var l_4 : Type.binarysearch_list t;
  var _5 : ();
  var _6 : ();
  var _7 : isize;
  var t_8 : t;
  var ls_9 : Type.binarysearch_list t;
  var _10 : bool;
  var _11 : usize;
  var _12 : Type.binarysearch_list t;
  var _13 : Type.binarysearch_list t;
  var _14 : ();
  var _15 : ();
  var _16 : ();
  var _17 : ();
  var _18 : ();
  {
    self_1 <- self;
    ix_2 <- ix;
    goto BB0
  }
  BB0 {
    orig_ix_3 <- ix_2;
    assume { Resolve0.resolve l_4 };
    l_4 <- self_1;
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  BB1 {
    invariant ix_valid { [#"../binary_search.rs" 49 30 49 49] UInt64.to_int ix_2 < LenLogic0.len_logic l_4 };
    invariant res_get { [#"../binary_search.rs" 50 29 50 61] Get0.get self_1 (UInt64.to_int orig_ix_3) = Get0.get l_4 (UInt64.to_int ix_2) };
    switch (l_4)
      | Type.BinarySearch_List_Cons _ _ -> goto BB2
      | _ -> goto BB5
      end
  }
  BB2 {
    t_8 <- Type.binarysearch_list_Cons_0 l_4;
    ls_9 <- Type.binarysearch_list_Cons_1 l_4;
    assume { Resolve0.resolve l_4 };
    _11 <- ix_2;
    _10 <- ([#"../binary_search.rs" 52 15 52 21] _11 > (0 : usize));
    switch (_10)
      | False -> goto BB4
      | _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve1.resolve t_8 };
    _13 <- ls_9;
    assume { Resolve2.resolve ls_9 };
    _12 <- _13;
    assume { Resolve2.resolve _13 };
    assume { Resolve0.resolve l_4 };
    l_4 <- _12;
    _12 <- any Type.binarysearch_list t;
    ix_2 <- ([#"../binary_search.rs" 54 16 54 23] ix_2 - (1 : usize));
    _6 <- ();
    goto BB1
  }
  BB4 {
    assume { Resolve2.resolve ls_9 };
    _0 <- t_8;
    assume { Resolve1.resolve t_8 };
    return _0
  }
  BB5 {
    assume { Resolve0.resolve l_4 };
    _5 <- ();
    absurd
  }
  
end
module BinarySearch_Impl0_Len_Interface
  type t
  use mach.int.Int
  use mach.int.Int32
  use Prelude
  use mach.int.UInt64
  use Type
  clone BinarySearch_Impl0_LenLogic_Interface as LenLogic0 with type t = t, axiom .
  val len [@cfg:stackify] (self : Type.binarysearch_list t) : usize
    requires {[#"../binary_search.rs" 63 15 63 44] LenLogic0.len_logic self <= 1000000}
    ensures { [#"../binary_search.rs" 64 14 64 30] result >= (0 : usize) }
    ensures { [#"../binary_search.rs" 65 14 65 41] UInt64.to_int result = LenLogic0.len_logic self }
    
end
module BinarySearch_Impl0_Len
  type t
  use mach.int.Int
  use mach.int.Int32
  use Prelude
  use mach.int.UInt64
  use Type
  clone BinarySearch_Impl0_LenLogic as LenLogic0 with type t = t, axiom .
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.binarysearch_list t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.binarysearch_list t
  let rec cfg len [@cfg:stackify] [#"../binary_search.rs" 66 4 66 26] (self : Type.binarysearch_list t) : usize
    requires {[#"../binary_search.rs" 63 15 63 44] LenLogic0.len_logic self <= 1000000}
    ensures { [#"../binary_search.rs" 64 14 64 30] result >= (0 : usize) }
    ensures { [#"../binary_search.rs" 65 14 65 41] UInt64.to_int result = LenLogic0.len_logic self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : Type.binarysearch_list t;
  var len_2 : usize;
  var l_3 : Type.binarysearch_list t;
  var _4 : ();
  var _5 : ();
  var _6 : isize;
  var ls_7 : Type.binarysearch_list t;
  var _8 : Type.binarysearch_list t;
  var _9 : ();
  var _10 : ();
  var _11 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    len_2 <- (0 : usize);
    assume { Resolve0.resolve l_3 };
    l_3 <- self_1;
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  BB1 {
    invariant len_valid { [#"../binary_search.rs" 69 31 69 71] UInt64.to_int len_2 + LenLogic0.len_logic l_3 = LenLogic0.len_logic self_1 };
    switch (l_3)
      | Type.BinarySearch_List_Cons _ _ -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    ls_7 <- Type.binarysearch_list_Cons_1 l_3;
    assume { Resolve0.resolve l_3 };
    len_2 <- ([#"../binary_search.rs" 71 12 71 20] len_2 + (1 : usize));
    _8 <- ls_7;
    assume { Resolve1.resolve ls_7 };
    assume { Resolve0.resolve l_3 };
    l_3 <- _8;
    _8 <- any Type.binarysearch_list t;
    _5 <- ();
    goto BB1
  }
  BB3 {
    assume { Resolve0.resolve l_3 };
    _4 <- ();
    _0 <- len_2;
    return _0
  }
  
end
module BinarySearch_Impl0_GetDefault_Interface
  type t
  use Type
  use mach.int.Int
  function get_default (self : Type.binarysearch_list t) (ix : int) (def : t) : t
end
module BinarySearch_Impl0_GetDefault
  type t
  use Type
  use mach.int.Int
  clone BinarySearch_Impl0_Get_Interface as Get0 with type t = t
  function get_default [#"../binary_search.rs" 78 4 78 46] (self : Type.binarysearch_list t) (ix : int) (def : t) : t =
    [#"../binary_search.rs" 79 8 82 9] match (Get0.get self ix) with
      | Type.Core_Option_Option_Some v -> v
      | Type.Core_Option_Option_None -> def
      end
end
module BinarySearch_Impl1_IsSorted_Interface
  use Type
  use mach.int.Int
  use mach.int.UInt32
  predicate is_sorted (self : Type.binarysearch_list uint32)
end
module BinarySearch_Impl1_IsSorted
  use Type
  use mach.int.Int
  use mach.int.UInt32
  clone BinarySearch_Impl0_Get_Interface as Get0 with type t = uint32
  predicate is_sorted [#"../binary_search.rs" 88 4 88 30] (self : Type.binarysearch_list uint32) =
    [#"../binary_search.rs" 90 12 97 13] forall x2 : (int) . forall x1 : (int) . x1 <= x2 -> match ((Get0.get self x1, Get0.get self x2)) with
      | (Type.Core_Option_Option_Some v1, Type.Core_Option_Option_Some v2) -> v1 <= v2
      | (Type.Core_Option_Option_None, Type.Core_Option_Option_None) -> true
      | _ -> false
      end
end
module BinarySearch_BinarySearch_Interface
  use mach.int.Int
  use mach.int.Int32
  use Prelude
  use mach.int.UInt64
  use Type
  use mach.int.UInt32
  clone BinarySearch_Impl0_GetDefault_Interface as GetDefault0 with type t = uint32
  clone BinarySearch_Impl0_Get_Interface as Get0 with type t = uint32
  clone BinarySearch_Impl1_IsSorted_Interface as IsSorted0
  clone BinarySearch_Impl0_LenLogic_Interface as LenLogic0 with type t = uint32, axiom .
  val binary_search [@cfg:stackify] (arr : Type.binarysearch_list uint32) (elem : uint32) : Type.core_result_result usize usize
    requires {[#"../binary_search.rs" 102 11 102 39] LenLogic0.len_logic arr <= 1000000}
    requires {[#"../binary_search.rs" 103 11 103 26] IsSorted0.is_sorted arr}
    ensures { [#"../binary_search.rs" 104 0 104 73] forall x : (usize) . result = Type.Core_Result_Result_Ok x -> Get0.get arr (UInt64.to_int x) = Type.Core_Option_Option_Some elem }
    ensures { [#"../binary_search.rs" 105 0 106 78] forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . 0 <= UInt64.to_int i /\ UInt64.to_int i < UInt64.to_int x -> GetDefault0.get_default arr (UInt64.to_int i) (0 : uint32) <= elem) }
    ensures { [#"../binary_search.rs" 107 0 108 90] forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . UInt64.to_int x < UInt64.to_int i /\ UInt64.to_int i < LenLogic0.len_logic arr -> elem < GetDefault0.get_default arr (UInt64.to_int i) (0 : uint32)) }
    
end
module BinarySearch_BinarySearch
  use mach.int.Int
  use mach.int.Int32
  use Prelude
  use mach.int.UInt64
  use Type
  use mach.int.UInt32
  clone BinarySearch_Impl0_Get as Get0 with type t = uint32
  clone BinarySearch_Impl0_GetDefault as GetDefault0 with type t = uint32, function Get0.get = Get0.get
  clone BinarySearch_Impl1_IsSorted as IsSorted0 with function Get0.get = Get0.get
  clone BinarySearch_Impl0_LenLogic as LenLogic0 with type t = uint32, axiom .
  clone BinarySearch_Impl0_Index_Interface as Index0 with type t = uint32,
  function LenLogic0.len_logic = LenLogic0.len_logic, function Get0.get = Get0.get
  clone BinarySearch_Impl0_Len_Interface as Len0 with type t = uint32,
  function LenLogic0.len_logic = LenLogic0.len_logic
  let rec cfg binary_search [@cfg:stackify] [#"../binary_search.rs" 109 0 109 72] (arr : Type.binarysearch_list uint32) (elem : uint32) : Type.core_result_result usize usize
    requires {[#"../binary_search.rs" 102 11 102 39] LenLogic0.len_logic arr <= 1000000}
    requires {[#"../binary_search.rs" 103 11 103 26] IsSorted0.is_sorted arr}
    ensures { [#"../binary_search.rs" 104 0 104 73] forall x : (usize) . result = Type.Core_Result_Result_Ok x -> Get0.get arr (UInt64.to_int x) = Type.Core_Option_Option_Some elem }
    ensures { [#"../binary_search.rs" 105 0 106 78] forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . 0 <= UInt64.to_int i /\ UInt64.to_int i < UInt64.to_int x -> GetDefault0.get_default arr (UInt64.to_int i) (0 : uint32) <= elem) }
    ensures { [#"../binary_search.rs" 107 0 108 90] forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . UInt64.to_int x < UInt64.to_int i /\ UInt64.to_int i < LenLogic0.len_logic arr -> elem < GetDefault0.get_default arr (UInt64.to_int i) (0 : uint32)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.core_result_result usize usize;
  var arr_1 : Type.binarysearch_list uint32;
  var elem_2 : uint32;
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.binarysearch_list uint32;
  var _7 : ();
  var size_8 : usize;
  var _9 : Type.binarysearch_list uint32;
  var base_10 : usize;
  var _11 : ();
  var _12 : ();
  var _13 : bool;
  var _14 : usize;
  var half_15 : usize;
  var _16 : usize;
  var _17 : bool;
  var mid_18 : usize;
  var _19 : usize;
  var _20 : usize;
  var _21 : usize;
  var _22 : bool;
  var _23 : uint32;
  var _24 : uint32;
  var _25 : Type.binarysearch_list uint32;
  var _26 : usize;
  var _27 : uint32;
  var _28 : usize;
  var _29 : ();
  var _30 : ();
  var _31 : ();
  var cmp_32 : uint32;
  var _33 : uint32;
  var _34 : Type.binarysearch_list uint32;
  var _35 : usize;
  var _36 : bool;
  var _37 : uint32;
  var _38 : uint32;
  var _39 : usize;
  var _40 : bool;
  var _41 : uint32;
  var _42 : uint32;
  var _43 : usize;
  var _44 : usize;
  var _45 : usize;
  {
    arr_1 <- arr;
    elem_2 <- elem;
    goto BB0
  }
  BB0 {
    _6 <- arr_1;
    _5 <- ([#"../binary_search.rs" 110 7 110 16] Len0.len _6);
    goto BB1
  }
  BB1 {
    _4 <- ([#"../binary_search.rs" 110 7 110 21] _5 = (0 : usize));
    switch (_4)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    _0 <- Type.Core_Result_Result_Err (0 : usize);
    goto BB20
  }
  BB3 {
    _3 <- ();
    _9 <- arr_1;
    size_8 <- ([#"../binary_search.rs" 113 19 113 28] Len0.len _9);
    goto BB4
  }
  BB4 {
    base_10 <- (0 : usize);
    goto BB5
  }
  BB5 {
    invariant size_valid { [#"../binary_search.rs" 116 28 116 75] 0 < UInt64.to_int size_8 /\ UInt64.to_int size_8 + UInt64.to_int base_10 <= LenLogic0.len_logic arr_1 };
    invariant lower_b { [#"../binary_search.rs" 116 4 116 77] forall i : (usize) . i < base_10 -> GetDefault0.get_default arr_1 (UInt64.to_int i) (0 : uint32) <= elem_2 };
    invariant lower_b { [#"../binary_search.rs" 116 4 116 77] forall i : (usize) . UInt64.to_int base_10 + UInt64.to_int size_8 < UInt64.to_int i /\ UInt64.to_int i < LenLogic0.len_logic arr_1 -> elem_2 < GetDefault0.get_default arr_1 (UInt64.to_int i) (0 : uint32) };
    _14 <- size_8;
    _13 <- ([#"../binary_search.rs" 119 10 119 18] _14 > (1 : usize));
    switch (_13)
      | False -> goto BB12
      | _ -> goto BB6
      end
  }
  BB6 {
    _16 <- size_8;
    _17 <- ([#"../binary_search.rs" 120 19 120 27] (2 : usize) = (0 : usize));
    assert { not _17 };
    goto BB7
  }
  BB7 {
    half_15 <- ([#"../binary_search.rs" 120 19 120 27] _16 / (2 : usize));
    _19 <- base_10;
    _20 <- half_15;
    mid_18 <- ([#"../binary_search.rs" 121 18 121 29] _19 + _20);
    _25 <- arr_1;
    _26 <- mid_18;
    _24 <- ([#"../binary_search.rs" 123 19 123 33] Index0.index _25 _26);
    goto BB8
  }
  BB8 {
    _23 <- _24;
    _27 <- elem_2;
    _22 <- ([#"../binary_search.rs" 123 18 123 40] _23 > _27);
    switch (_22)
      | False -> goto BB10
      | _ -> goto BB9
      end
  }
  BB9 {
    _21 <- base_10;
    goto BB11
  }
  BB10 {
    _21 <- mid_18;
    goto BB11
  }
  BB11 {
    base_10 <- _21;
    _21 <- any usize;
    _28 <- half_15;
    size_8 <- ([#"../binary_search.rs" 124 8 124 20] size_8 - _28);
    _12 <- ();
    goto BB5
  }
  BB12 {
    _11 <- ();
    _34 <- arr_1;
    _35 <- base_10;
    _33 <- ([#"../binary_search.rs" 127 15 127 30] Index0.index _34 _35);
    goto BB13
  }
  BB13 {
    cmp_32 <- _33;
    _37 <- cmp_32;
    _38 <- elem_2;
    _36 <- ([#"../binary_search.rs" 128 7 128 18] _37 = _38);
    switch (_36)
      | False -> goto BB15
      | _ -> goto BB14
      end
  }
  BB14 {
    _39 <- base_10;
    _0 <- Type.Core_Result_Result_Ok _39;
    goto BB19
  }
  BB15 {
    _41 <- cmp_32;
    _42 <- elem_2;
    _40 <- ([#"../binary_search.rs" 130 14 130 24] _41 < _42);
    switch (_40)
      | False -> goto BB17
      | _ -> goto BB16
      end
  }
  BB16 {
    _44 <- base_10;
    _43 <- ([#"../binary_search.rs" 131 12 131 20] _44 + (1 : usize));
    _0 <- Type.Core_Result_Result_Err _43;
    goto BB18
  }
  BB17 {
    _45 <- base_10;
    _0 <- Type.Core_Result_Result_Err _45;
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    return _0
  }
  
end
