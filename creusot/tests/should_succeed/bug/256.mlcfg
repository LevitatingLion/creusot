module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use set.Set
  use prelude.Prelude
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
  type alloc_string_string  =
    | Alloc_String_String (alloc_vec_vec uint8 (alloc_alloc_global))
    
end
module C256_U8Safe_Interface
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  val u8_safe [@cfg:stackify] (u : uint8) : ()
end
module C256_U8Safe
  use mach.int.Int
  use prelude.Prelude
  use prelude.UInt8
  let rec cfg u8_safe [@cfg:stackify] [#"../256.rs" 3 0 3 21] (u : uint8) : () =
  var _0 : ();
  var u_1 : uint8;
  var _2 : uint8;
  var _3 : uint8;
  {
    u_1 <- u;
    goto BB0
  }
  BB0 {
    _3 <- u_1;
    _2 <- ([#"../256.rs" 4 12 4 17] _3 + (0 : uint8));
    _0 <- ();
    return _0
  }
  
end
module C256_Bug256_Interface
  use Type
  val bug_256 [@cfg:stackify] (_x : Type.alloc_string_string) : ()
end
module C256_Bug256
  use Type
  let rec cfg bug_256 [@cfg:stackify] [#"../256.rs" 8 0 8 26] (_x : Type.alloc_string_string) : () =
  var _0 : ();
  var _x_1 : Type.alloc_string_string;
  {
    _x_1 <- _x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
