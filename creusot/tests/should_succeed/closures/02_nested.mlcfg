module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use set.Set
  use prelude.Prelude
end
module C02Nested_NestedClosure_Closure0_Closure0_Interface
  use prelude.Prelude
  type c02nested_nestedclosure_closure0_closure0  =
    | C02Nested_NestedClosure_Closure0_Closure0 bool
    
  let function c02nested_nestedclosure_closure0_closure0_0 (self : c02nested_nestedclosure_closure0_closure0) : bool =
    match (self) with
      | C02Nested_NestedClosure_Closure0_Closure0 a -> a
      end
  predicate precondition [@cfg:stackify] (_1' : c02nested_nestedclosure_closure0_closure0) (_2' : ()) =
    true
  predicate postcondition [@cfg:stackify] (_1' : c02nested_nestedclosure_closure0_closure0) (_2' : ()) (result : bool) =
    true
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c02nested_nestedclosure_closure0_closure0) (_2' : ()) (result : bool)
    
   =
    true
  predicate postcondition_once [@cfg:stackify] (_1' : c02nested_nestedclosure_closure0_closure0) (_2' : ()) (result : bool)
    
   =
    true
  predicate resolve (_1' : c02nested_nestedclosure_closure0_closure0) =
    true
  val c02Nested_NestedClosure_Closure0_Closure0 [@cfg:stackify] (_1' : c02nested_nestedclosure_closure0_closure0) (_2' : ()) : bool
    
end
module C02Nested_NestedClosure_Closure0_Closure0
  use prelude.Prelude
  type c02nested_nestedclosure_closure0_closure0  =
    | C02Nested_NestedClosure_Closure0_Closure0 bool
    
  let function c02nested_nestedclosure_closure0_closure0_0 (self : c02nested_nestedclosure_closure0_closure0) : bool =
    match (self) with
      | C02Nested_NestedClosure_Closure0_Closure0 a -> a
      end
  let rec cfg c02Nested_NestedClosure_Closure0_Closure0 [@cfg:stackify] [#"../02_nested.rs" 6 18 6 22] (_1' : c02nested_nestedclosure_closure0_closure0) (_2' : ()) : bool
    
   =
  var _0 : bool;
  var _1 : c02nested_nestedclosure_closure0_closure0;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _0 <- c02nested_nestedclosure_closure0_closure0_0 _1;
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module C02Nested_NestedClosure_Closure0_Interface
  use prelude.Prelude
  type c02nested_nestedclosure_closure0  =
    | C02Nested_NestedClosure_Closure0 bool
    
  let function c02nested_nestedclosure_closure0_0 (self : c02nested_nestedclosure_closure0) : bool =
    match (self) with
      | C02Nested_NestedClosure_Closure0 a -> a
      end
  predicate precondition [@cfg:stackify] (_1' : c02nested_nestedclosure_closure0) (_2' : ()) =
    true
  predicate postcondition [@cfg:stackify] (_1' : c02nested_nestedclosure_closure0) (_2' : ()) (result : bool) =
    true
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c02nested_nestedclosure_closure0) (_2' : ()) (result : bool)
    
   =
    true
  predicate postcondition_once [@cfg:stackify] (_1' : c02nested_nestedclosure_closure0) (_2' : ()) (result : bool) =
    true
  predicate resolve (_1' : c02nested_nestedclosure_closure0) =
    true
  val c02Nested_NestedClosure_Closure0 [@cfg:stackify] (_1' : c02nested_nestedclosure_closure0) (_2' : ()) : bool
end
module C02Nested_NestedClosure_Closure0
  use prelude.Prelude
  type c02nested_nestedclosure_closure0  =
    | C02Nested_NestedClosure_Closure0 bool
    
  let function c02nested_nestedclosure_closure0_0 (self : c02nested_nestedclosure_closure0) : bool =
    match (self) with
      | C02Nested_NestedClosure_Closure0 a -> a
      end
  clone C02Nested_NestedClosure_Closure0_Closure0_Interface as Closure00 with axiom .
  let rec cfg c02Nested_NestedClosure_Closure0 [@cfg:stackify] [#"../02_nested.rs" 5 13 8 6] (_1' : c02nested_nestedclosure_closure0) (_2' : ()) : bool
    
   =
  var _0 : bool;
  var _1 : c02nested_nestedclosure_closure0;
  var omg_2 : Closure00.c02nested_nestedclosure_closure0_closure0;
  var _3 : bool;
  var _4 : Closure00.c02nested_nestedclosure_closure0_closure0;
  var _5 : ();
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _3 <- c02nested_nestedclosure_closure0_0 _1;
    omg_2 <- Closure00.C02Nested_NestedClosure_Closure0_Closure0 _3;
    _4 <- omg_2;
    assume { Closure00.resolve omg_2 };
    _5 <- ();
    _0 <- ([#"../02_nested.rs" 7 8 7 15] Closure00.c02Nested_NestedClosure_Closure0_Closure0 _4 _5);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module C02Nested_NestedClosure_Interface
  val nested_closure [@cfg:stackify] (_ : ()) : ()
end
module C02Nested_NestedClosure
  use prelude.Prelude
  clone C02Nested_NestedClosure_Closure0_Interface as Closure00 with axiom .
  let rec cfg nested_closure [@cfg:stackify] [#"../02_nested.rs" 3 0 3 23] (_ : ()) : () =
  var _0 : ();
  var a_1 : bool;
  var _a_2 : bool;
  var _3 : Closure00.c02nested_nestedclosure_closure0;
  var _4 : Closure00.c02nested_nestedclosure_closure0;
  var _5 : bool;
  var _6 : ();
  {
    goto BB0
  }
  BB0 {
    a_1 <- true;
    _5 <- a_1;
    _4 <- Closure00.C02Nested_NestedClosure_Closure0 _5;
    _3 <- _4;
    assume { Closure00.resolve _4 };
    _6 <- ();
    _a_2 <- ([#"../02_nested.rs" 5 13 8 8] Closure00.c02Nested_NestedClosure_Closure0 _3 _6);
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
