module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use set.Set
  use prelude.Prelude
  type c05map_map 'i 'f =
    | C05Map_Map 'i 'f
    
  let function c05map_map_Map_iter (self : c05map_map 'i 'f) : 'i =
    match (self) with
      | C05Map_Map a _ -> a
      end
  let function c05map_map_Map_func (self : c05map_map 'i 'f) : 'f =
    match (self) with
      | C05Map_Map _ a -> a
      end
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't =
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
end
module C05Map_FakeIterator_Item
  type self
  type item
end
module C05Map_FakeIterator_Next_Interface
  type self
  use prelude.Prelude
  use Type
  clone C05Map_FakeIterator_Item as Item0 with type self = self
  val next [@cfg:stackify] (self : borrowed self) : Type.core_option_option Item0.item
end
module C05Map_FakeIterator_Next
  type self
  use prelude.Prelude
  use Type
  clone C05Map_FakeIterator_Item as Item0 with type self = self
  val next [@cfg:stackify] (self : borrowed self) : Type.core_option_option Item0.item
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Fun_Impl0_Precondition_Interface
  type args
  type f
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Fun_Impl0_Precondition
  type args
  type f
  predicate precondition (self : f) (_2' : args)
end
module Core_Ops_Function_FnOnce_Output
  type self
  type args
  type output
end
module CreusotContracts_Std1_Fun_FnSpec_Postcondition_Interface
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnSpec_Postcondition
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  predicate postcondition (self : self) (_2' : args) (_3' : Output0.output)
end
module Core_Ops_Function_Fn_Call_Interface
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Interface as Postcondition0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Interface as Precondition0 with type args = args, type f = self
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { Postcondition0.postcondition self args result }
    
end
module Core_Ops_Function_Fn_Call
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnSpec_Postcondition_Interface as Postcondition0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Interface as Precondition0 with type args = args, type f = self
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { Postcondition0.postcondition self args result }
    
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Std1_Fun_Impl0
  type args
  type f
end
module CreusotContracts_Std1_Fun_Impl2_Postcondition_Interface
  type args
  type f
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = args
  predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl2_Postcondition
  type args
  type f
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = args
  predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl2
  type args
  type f
end
module CreusotContracts_Std1_Fun_Impl2_FnMut_Interface
  type args
  type f
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = args
  function fn_mut (self : borrowed f) (_2' : args) (_3' : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_Impl2_FnMut
  type args
  type f
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = args
  function fn_mut (self : borrowed f) (_2' : args) (_3' : Output0.output) : () =
    ()
end
module CreusotContracts_Std1_Fun_Impl2_FnOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = args
  function fn_once (self : f) (_2' : args) (_3' : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_Impl2_FnOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = args
  function fn_once (self : f) (_2' : args) (_3' : Output0.output) : () =
    ()
end
module C05Map_Impl0_Next_Interface
  type a
  type b
  type f
  type i
  use prelude.Prelude
  use Type
  val next [@cfg:stackify] (self : borrowed (Type.c05map_map i f)) : Type.core_option_option b
end
module C05Map_Impl0_Next
  type a
  type b
  type f
  type i
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Std1_Fun_Impl2_FnOnce as FnOnce0 with type args = (a), type f = f, type Output0.output = b
  clone CreusotContracts_Std1_Fun_Impl2_FnMut as FnMut0 with type args = (a), type f = f, type Output0.output = b
  clone CreusotContracts_Std1_Fun_Impl2_Postcondition as Postcondition0 with type args = (a), type f = f,
  type Output0.output = b
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = (a), type f = f
  clone Core_Ops_Function_Fn_Call_Interface as Call0 with type self = f, type args = (a),
  predicate Precondition0.precondition = Precondition0.precondition,
  predicate Postcondition0.postcondition = Postcondition0.postcondition, type Output0.output = b
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = a
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.core_option_option a
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.c05map_map i f
  clone C05Map_FakeIterator_Next_Interface as Next0 with type self = i, type Item0.item = a
  let rec cfg next [@cfg:stackify] [#"../05_map.rs" 17 4 17 44] (self : borrowed (Type.c05map_map i f)) : Type.core_option_option b
    
   =
  var _0 : Type.core_option_option b;
  var self_1 : borrowed (Type.c05map_map i f);
  var _2 : Type.core_option_option a;
  var _3 : borrowed i;
  var _4 : isize;
  var e_5 : a;
  var _6 : b;
  var _7 : f;
  var _8 : (a);
  var _9 : a;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- borrow_mut (Type.c05map_map_Map_iter ( * self_1));
    self_1 <- { self_1 with current = (let Type.C05Map_Map a b =  * self_1 in Type.C05Map_Map ( ^ _3) b) };
    _2 <- ([#"../05_map.rs" 18 14 18 30] Next0.next _3);
    goto BB1
  }
  BB1 {
    switch (_2)
      | Type.Core_Option_Option_None -> goto BB4
      | Type.Core_Option_Option_Some _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve2.resolve e_5 };
    e_5 <- Type.core_option_option_Some_0 _2;
    _7 <- Type.c05map_map_Map_func ( * self_1);
    assume { Resolve0.resolve self_1 };
    assume { Resolve2.resolve _9 };
    _9 <- e_5;
    _8 <- (_9);
    _6 <- ([#"../05_map.rs" 20 28 20 42] Call0.call _7 _8);
    goto BB5
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve _2 };
    absurd
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    _0 <- Type.Core_Option_Option_None;
    goto BB9
  }
  BB5 {
    goto BB6
  }
  BB6 {
    _0 <- Type.Core_Option_Option_Some _6;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    assume { Resolve1.resolve _2 };
    return _0
  }
  
end
module C05Map_Impl0_Item
  type a
  type b
  type f
  type i
  type item  =
    b
end
module C05Map_Impl0
  type a
  type b
  type f
  type i
  use Type
  clone C05Map_Impl0_Item as Item0 with type a = a, type b = b, type f = f, type i = i
  clone C05Map_Impl0_Next_Interface as Next0 with type a = a, type b = b, type f = f, type i = i
  clone C05Map_FakeIterator_Next_Interface as Next1 with type self = Type.c05map_map i f, val next = Next0.next,
  type Item0.item = Item0.item
  clone C05Map_FakeIterator_Item as Item1 with type self = Type.c05map_map i f, type item = Item0.item
end
