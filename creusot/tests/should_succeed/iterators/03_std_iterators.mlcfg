module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use set.Set
  use set.Fset
  use map.Map
  use prelude.Prelude
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_slice_iter_iter 't =
    | Core_Slice_Iter_Iter (core_ptr_nonnull_nonnull 't) opaque_ptr (core_marker_phantomdata 't)
    
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . model self = Prelude.id self && Seq.length (model self) <= 18446744073709551615
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Slice_Impl4_Model_Interface
  type t
  use Type
  use seq.Seq
  function model (self : Type.core_slice_iter_iter t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl4_Model
  type t
  use Type
  use seq.Seq
  function model (self : Type.core_slice_iter_iter t) : Seq.seq t
end
module Core_Slice_Iter_Impl0_IntoIter_Interface
  type t
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  val into_iter [@cfg:stackify] (self : seq t) : Type.core_slice_iter_iter t
    ensures { Model0.model result = Model1.model self }
    
end
module Core_Slice_Iter_Impl0_IntoIter
  type t
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  val into_iter [@cfg:stackify] (self : seq t) : Type.core_slice_iter_iter t
    ensures { Model0.model result = Model1.model self }
    
end
module CreusotContracts_Std1_Iter_IteratorSpec_Completed_Interface
  type self
  predicate completed (self : self)
end
module CreusotContracts_Std1_Iter_IteratorSpec_Completed
  type self
  predicate completed (self : self)
end
module Core_Iter_Traits_Iterator_Iterator_Item
  type self
  type item
end
module CreusotContracts_Std1_Iter_IteratorSpec_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item as Item0 with type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_IteratorSpec_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item as Item0 with type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module Core_Slice_Iter_Impl173_Item
  type t
  use prelude.Prelude
  type item  =
    t
end
module Core_Slice_Iter_Impl173_Next_Interface
  type t
  use Type
  use prelude.Prelude
  use seq.Seq
  clone Core_Slice_Iter_Impl173_Item as Item0 with type t = t
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Interface as Produces0 with type self = Type.core_slice_iter_iter t,
  type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_IteratorSpec_Completed_Interface as Completed0 with type self = Type.core_slice_iter_iter t
  val next [@cfg:stackify] (self : borrowed (Type.core_slice_iter_iter t)) : Type.core_option_option t
    ensures { match (result) with
      | Type.Core_Option_Option_None -> Completed0.completed ( * self)
      | Type.Core_Option_Option_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) /\ not Completed0.completed ( * self)
      end }
    
end
module Core_Slice_Iter_Impl173_Next
  type t
  use Type
  use prelude.Prelude
  use seq.Seq
  clone Core_Slice_Iter_Impl173_Item as Item0 with type t = t
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Interface as Produces0 with type self = Type.core_slice_iter_iter t,
  type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_IteratorSpec_Completed_Interface as Completed0 with type self = Type.core_slice_iter_iter t
  val next [@cfg:stackify] (self : borrowed (Type.core_slice_iter_iter t)) : Type.core_option_option t
    ensures { match (result) with
      | Type.Core_Option_Option_None -> Completed0.completed ( * self)
      | Type.Core_Option_Option_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) /\ not Completed0.completed ( * self)
      end }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module Core_Slice_Iter_Impl0
  type t
end
module Core_Slice_Iter_Impl173
  type t
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Std1_Slice_Impl4
  type t
end
module CreusotContracts_Std1_Slice_Impl5_Completed_Interface
  type t
  use Type
  predicate completed (self : Type.core_slice_iter_iter t)
end
module CreusotContracts_Std1_Slice_Impl5_Completed
  type t
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  predicate completed (self : Type.core_slice_iter_iter t) =
    Model0.model self = Seq.empty 
end
module CreusotContracts_Std1_Slice_Impl5
  type t
end
module CreusotContracts_Std1_Slice_Impl5_Produces_Interface
  type t
  use Type
  use seq.Seq
  use prelude.Prelude
  predicate produces (self : Type.core_slice_iter_iter t) (visited : Seq.seq t) (rhs : Type.core_slice_iter_iter t)
end
module CreusotContracts_Std1_Slice_Impl5_Produces
  type t
  use Type
  use seq.Seq
  use prelude.Prelude
  use mach.int.Int
  use seq_ext.SeqExt
  use mach.int.Int32
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  predicate produces (self : Type.core_slice_iter_iter t) (visited : Seq.seq t) (rhs : Type.core_slice_iter_iter t) =
    Seq.length (Model0.model self) = Seq.length visited + Seq.length (Model0.model rhs) /\ Seq.(==) (SeqExt.subsequence (Model0.model self) (Seq.length visited) (Seq.length (Model0.model self))) (Model0.model rhs) /\ (forall i : (int) . 0 <= i /\ i < Seq.length visited -> Seq.get (Model0.model self) i = Seq.get visited i)
end
module CreusotContracts_Std1_Slice_Impl5_ProducesRefl_Interface
  type t
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Slice_Impl5_Produces_Interface as Produces0 with type t = t
  function produces_refl (a : Type.core_slice_iter_iter t) : ()
end
module CreusotContracts_Std1_Slice_Impl5_ProducesRefl
  type t
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Slice_Impl5_Produces_Interface as Produces0 with type t = t
  function produces_refl (a : Type.core_slice_iter_iter t) : () =
    ()
  axiom produces_refl_spec : forall a : Type.core_slice_iter_iter t . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl5_ProducesRefl_Impl
  type t
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Slice_Impl4_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl5_Produces as Produces0 with type t = t, function Model0.model = Model0.model
  let rec ghost function produces_refl (a : Type.core_slice_iter_iter t) : ()
    ensures { Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    ()
end
module CreusotContracts_Std1_Slice_Impl5_ProducesTrans_Interface
  type t
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Slice_Impl5_Produces_Interface as Produces0 with type t = t
  function produces_trans (a : Type.core_slice_iter_iter t) (ab : Seq.seq t) (b : Type.core_slice_iter_iter t) (bc : Seq.seq t) (c : Type.core_slice_iter_iter t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl5_ProducesTrans
  type t
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Slice_Impl5_Produces_Interface as Produces0 with type t = t
  function produces_trans (a : Type.core_slice_iter_iter t) (ab : Seq.seq t) (b : Type.core_slice_iter_iter t) (bc : Seq.seq t) (c : Type.core_slice_iter_iter t) : ()
    
   =
    ()
  axiom produces_trans_spec : forall a : Type.core_slice_iter_iter t, ab : Seq.seq t, b : Type.core_slice_iter_iter t, bc : Seq.seq t, c : Type.core_slice_iter_iter t . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Slice_Impl5_ProducesTrans_Impl
  type t
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Slice_Impl4_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl5_Produces as Produces0 with type t = t, function Model0.model = Model0.model
  let rec ghost function produces_trans (a : Type.core_slice_iter_iter t) (ab : Seq.seq t) (b : Type.core_slice_iter_iter t) (bc : Seq.seq t) (c : Type.core_slice_iter_iter t) : ()
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    ()
end
module C03StdIterators_SliceIter_Interface
  type t
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use mach.int.Int
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val slice_iter [@cfg:stackify] (slice : seq t) : usize
    ensures { [#"../03_std_iterators.rs" 4 10 4 35] UInt64.to_int result = Seq.length (Model0.model slice) }
    
end
module C03StdIterators_SliceIter
  type t
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use mach.int.Int
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model1 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use Type
  use mach.int.Int64
  clone CreusotContracts_Std1_Slice_Impl4_Model as Model2 with type t = t
  clone CreusotContracts_Std1_Slice_Impl5_Produces as Produces0 with type t = t, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Slice_Impl5_ProducesTrans as ProducesTrans0 with type t = t,
  predicate Produces0.produces = Produces0.produces, axiom .
  clone CreusotContracts_Std1_Slice_Impl5_ProducesRefl as ProducesRefl0 with type t = t,
  predicate Produces0.produces = Produces0.produces, axiom .
  clone Core_Slice_Iter_Impl173_Item as Item0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl5_Completed as Completed0 with type t = t, function Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.core_option_option t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_slice_iter_iter t
  clone Core_Slice_Iter_Impl173_Next_Interface as Next0 with type t = t,
  predicate Completed0.completed = Completed0.completed, predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.core_slice_iter_iter t
  clone Core_Slice_Iter_Impl0_IntoIter_Interface as IntoIter0 with type t = t, function Model0.model = Model2.model,
  function Model1.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = seq t
  let rec cfg slice_iter [@cfg:stackify] [#"../03_std_iterators.rs" 5 0 5 42] (slice : seq t) : usize
    ensures { [#"../03_std_iterators.rs" 4 10 4 35] UInt64.to_int result = Seq.length (Model0.model slice) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var slice_1 : seq t;
  var i_3 : usize;
  var _4 : ();
  var _5 : Type.core_slice_iter_iter t;
  var _6 : seq t;
  var iter_7 : Type.core_slice_iter_iter t;
  var _8 : ();
  var _9 : ();
  var _10 : Type.core_option_option t;
  var _11 : borrowed (Type.core_slice_iter_iter t);
  var _12 : borrowed (Type.core_slice_iter_iter t);
  var _13 : isize;
  var _14 : ();
  {
    slice_1 <- slice;
    goto BB0
  }
  BB0 {
    i_3 <- (0 : usize);
    assume { Resolve0.resolve _6 };
    _6 <- slice_1;
    assume { Resolve0.resolve slice_1 };
    _5 <- ([#"../03_std_iterators.rs" 7 13 7 18] IntoIter0.into_iter _6);
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve iter_7 };
    iter_7 <- _5;
    _5 <- any Type.core_slice_iter_iter t;
    goto BB2
  }
  BB2 {
    _12 <- borrow_mut iter_7;
    iter_7 <-  ^ _12;
    _11 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _11) };
    _10 <- ([#"../03_std_iterators.rs" 7 13 7 18] Next0.next _11);
    goto BB3
  }
  BB3 {
    assume { Resolve2.resolve _12 };
    assume { Resolve3.resolve _10 };
    switch (_10)
      | Type.Core_Option_Option_None -> goto BB6
      | Type.Core_Option_Option_Some _ -> goto BB4
      end
  }
  BB4 {
    i_3 <- ([#"../03_std_iterators.rs" 8 8 8 14] i_3 + (1 : usize));
    _9 <- ();
    _8 <- ();
    goto BB2
  }
  BB5 {
    assume { Resolve1.resolve iter_7 };
    absurd
  }
  BB6 {
    assume { Resolve1.resolve iter_7 };
    _4 <- ();
    _0 <- i_3;
    return _0
  }
  
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 18446744073709551615
end
module Alloc_Vec_Impl20_IntoIter_Interface
  type t
  type a
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Type.alloc_vec_vec t a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  val into_iter [@cfg:stackify] (self : Type.alloc_vec_vec t a) : Type.core_slice_iter_iter t
    ensures { Model0.model result = Model1.model self }
    
end
module Alloc_Vec_Impl20_IntoIter
  type t
  type a
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Type.alloc_vec_vec t a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  val into_iter [@cfg:stackify] (self : Type.alloc_vec_vec t a) : Type.core_slice_iter_iter t
    ensures { Model0.model result = Model1.model self }
    
end
module Alloc_Vec_Impl20
  type t
  type a
end
module C03StdIterators_VecIter_Interface
  type t
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val vec_iter [@cfg:stackify] (vec : Type.alloc_vec_vec t (Type.alloc_alloc_global)) : usize
    ensures { [#"../03_std_iterators.rs" 13 10 13 33] UInt64.to_int result = Seq.length (Model0.model vec) }
    
end
module C03StdIterators_VecIter
  type t
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.Int64
  clone CreusotContracts_Std1_Slice_Impl4_Model as Model2 with type t = t
  clone CreusotContracts_Std1_Slice_Impl5_Produces as Produces0 with type t = t, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Slice_Impl5_ProducesTrans as ProducesTrans0 with type t = t,
  predicate Produces0.produces = Produces0.produces, axiom .
  clone CreusotContracts_Std1_Slice_Impl5_ProducesRefl as ProducesRefl0 with type t = t,
  predicate Produces0.produces = Produces0.produces, axiom .
  clone Core_Slice_Iter_Impl173_Item as Item0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl5_Completed as Completed0 with type t = t, function Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.core_option_option t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_slice_iter_iter t
  clone Core_Slice_Iter_Impl173_Next_Interface as Next0 with type t = t,
  predicate Completed0.completed = Completed0.completed, predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.core_slice_iter_iter t
  clone Alloc_Vec_Impl20_IntoIter_Interface as IntoIter0 with type t = t, type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model, function Model1.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.alloc_vec_vec t (Type.alloc_alloc_global)
  let rec cfg vec_iter [@cfg:stackify] [#"../03_std_iterators.rs" 14 0 14 41] (vec : Type.alloc_vec_vec t (Type.alloc_alloc_global)) : usize
    ensures { [#"../03_std_iterators.rs" 13 10 13 33] UInt64.to_int result = Seq.length (Model0.model vec) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var vec_1 : Type.alloc_vec_vec t (Type.alloc_alloc_global);
  var i_3 : usize;
  var _4 : ();
  var _5 : Type.core_slice_iter_iter t;
  var _6 : Type.alloc_vec_vec t (Type.alloc_alloc_global);
  var iter_7 : Type.core_slice_iter_iter t;
  var _8 : ();
  var _9 : ();
  var _10 : Type.core_option_option t;
  var _11 : borrowed (Type.core_slice_iter_iter t);
  var _12 : borrowed (Type.core_slice_iter_iter t);
  var _13 : isize;
  var _14 : ();
  {
    vec_1 <- vec;
    goto BB0
  }
  BB0 {
    i_3 <- (0 : usize);
    assume { Resolve0.resolve _6 };
    _6 <- vec_1;
    assume { Resolve0.resolve vec_1 };
    _5 <- ([#"../03_std_iterators.rs" 16 13 16 16] IntoIter0.into_iter _6);
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve iter_7 };
    iter_7 <- _5;
    _5 <- any Type.core_slice_iter_iter t;
    goto BB2
  }
  BB2 {
    _12 <- borrow_mut iter_7;
    iter_7 <-  ^ _12;
    _11 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _11) };
    _10 <- ([#"../03_std_iterators.rs" 16 13 16 16] Next0.next _11);
    goto BB3
  }
  BB3 {
    assume { Resolve2.resolve _12 };
    assume { Resolve3.resolve _10 };
    switch (_10)
      | Type.Core_Option_Option_None -> goto BB6
      | Type.Core_Option_Option_Some _ -> goto BB4
      end
  }
  BB4 {
    i_3 <- ([#"../03_std_iterators.rs" 17 8 17 14] i_3 + (1 : usize));
    _9 <- ();
    _8 <- ();
    goto BB2
  }
  BB5 {
    assume { Resolve1.resolve iter_7 };
    absurd
  }
  BB6 {
    assume { Resolve1.resolve iter_7 };
    _4 <- ();
    _0 <- i_3;
    return _0
  }
  
end
