module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use set.Set
  use prelude.Prelude
  type modulepaths_a_t  =
    | ModulePaths_A_T uint32
    
  type modulepaths_s  =
    | ModulePaths_S (modulepaths_a_t)
    
  type modulepaths_b_o  =
    | ModulePaths_B_O uint32
    
  type modulepaths_b_c_t  =
    | ModulePaths_B_C_T (modulepaths_a_t)
    
end
module ModulePaths_Test_Interface
  use Type
  val test [@cfg:stackify] (_a : Type.modulepaths_a_t) (_b : Type.modulepaths_s) (_c : Type.modulepaths_b_o) (_d : Type.modulepaths_b_c_t) : ()
    
end
module ModulePaths_Test
  use Type
  let rec cfg test [@cfg:stackify] [#"../module_paths.rs" 22 0 22 51] (_a : Type.modulepaths_a_t) (_b : Type.modulepaths_s) (_c : Type.modulepaths_b_o) (_d : Type.modulepaths_b_c_t) : ()
    
   =
  var _0 : ();
  var _a_1 : Type.modulepaths_a_t;
  var _b_2 : Type.modulepaths_s;
  var _c_3 : Type.modulepaths_b_o;
  var _d_4 : Type.modulepaths_b_c_t;
  {
    _a_1 <- _a;
    _b_2 <- _b;
    _c_3 <- _c;
    _d_4 <- _d;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
