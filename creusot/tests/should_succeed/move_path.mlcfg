module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use set.Set
  use prelude.Prelude
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module MovePath_F_Interface
  val f [@cfg:stackify] (_ : ()) : ()
end
module MovePath_F
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = int32
  let rec cfg f [@cfg:stackify] [#"../move_path.rs" 3 0 3 10] (_ : ()) : () =
  var _0 : ();
  var x_1 : int32;
  var y_2 : borrowed int32;
  var d_3 : borrowed int32;
  var z_4 : borrowed int32;
  var _5 : ();
  var _6 : bool;
  var _7 : int32;
  {
    goto BB0
  }
  BB0 {
    x_1 <- (1 : int32);
    y_2 <- borrow_mut x_1;
    x_1 <-  ^ y_2;
    assume { Resolve0.resolve d_3 };
    d_3 <- y_2;
    assume { Resolve0.resolve z_4 };
    z_4 <- d_3;
    z_4 <- { z_4 with current = (2 : int32) };
    assume { Resolve0.resolve z_4 };
    _5 <- ();
    _7 <- x_1;
    _6 <- ([#"../move_path.rs" 14 12 14 18] _7 = (2 : int32));
    _0 <- ();
    return _0
  }
  
end
