module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type redblacktree_color  = 
    | RedBlackTree_Color_Red
    | RedBlackTree_Color_Black
    
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't = 
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
  type redblacktree_node 'k 'v = 
    | RedBlackTree_Node (redblacktree_tree 'k 'v) (redblacktree_color) 'k 'v (redblacktree_tree 'k 'v)
    with redblacktree_tree 'k 'v = 
    | RedBlackTree_Tree (core_option_option (redblacktree_node 'k 'v))
    
  let function redblacktree_node_Node_left (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v = 
    match (self) with
      | RedBlackTree_Node a _ _ _ _ -> a
      end
  let function redblacktree_node_Node_key (self : redblacktree_node 'k 'v) : 'k = 
    match (self) with
      | RedBlackTree_Node _ _ a _ _ -> a
      end
  let function redblacktree_node_Node_right (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v = 
    match (self) with
      | RedBlackTree_Node _ _ _ _ a -> a
      end
  let function redblacktree_node_Node_val (self : redblacktree_node 'k 'v) : 'v = 
    match (self) with
      | RedBlackTree_Node _ _ _ a _ -> a
      end
  let function redblacktree_node_Node_color (self : redblacktree_node 'k 'v) : redblacktree_color = 
    match (self) with
      | RedBlackTree_Node _ a _ _ _ -> a
      end
  let function redblacktree_tree_Tree_node (self : redblacktree_tree 'k 'v) : core_option_option (redblacktree_node 'k 'v)
    
   = 
    match (self) with
      | RedBlackTree_Tree a -> a
      end
  type core_cmp_ordering  = 
    | Core_Cmp_Ordering_Less
    | Core_Cmp_Ordering_Equal
    | Core_Cmp_Ordering_Greater
    
  type creusotcontracts_logic_ghost_ghost 't = 
    | CreusotContracts_Logic_Ghost_Ghost opaque_ptr
    
end
module RedBlackTree_Impl14_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.redblacktree_color) : Type.redblacktree_color
end
module RedBlackTree_Impl14_Clone
  use prelude.Prelude
  use Type
  let rec cfg clone' [@cfg:stackify] (self : Type.redblacktree_color) : Type.redblacktree_color = 
  var _0 : Type.redblacktree_color;
  var self_1 : Type.redblacktree_color;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- self_1;
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module RedBlackTree_Impl0_HasMapping_Interface
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  predicate has_mapping (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v)
end
module RedBlackTree_Impl0_HasMapping
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate has_mapping (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v) = 
    match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> false
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color key val' right)) -> has_mapping left k v || has_mapping right k v || k = Model0.model key && v = val'
      end
end
module RedBlackTree_Impl0_SameMappings_Interface
  type k
  type v
  use Type
  predicate same_mappings (self : Type.redblacktree_tree k v) (o : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl0_SameMappings
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate same_mappings (self : Type.redblacktree_tree k v) (o : Type.redblacktree_tree k v) = 
    forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping self k v = HasMapping0.has_mapping o k v
end
module RedBlackTree_Impl0_ModelAcc_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
end
module RedBlackTree_Impl0_ModelAcc
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
   = 
    match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> accu
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color key val' right)) -> let accu1 = model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in model_acc right accu2
      end
end
module RedBlackTree_Impl0_ModelAccHasMapping_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc_has_mapping (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
end
module RedBlackTree_Impl0_ModelAccHasMapping
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc_has_mapping (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
   = 
    match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color key val' right)) -> let _ = model_acc_has_mapping left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in model_acc_has_mapping right accu2 k
      end
  axiom model_acc_has_mapping_spec : forall self : Type.redblacktree_tree k v, accu : Map.map ModelTy0.modelTy (Type.core_option_option v), k : ModelTy0.modelTy . Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k || (exists v : (v) . Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v && HasMapping0.has_mapping self k v)
end
module RedBlackTree_Impl0_ModelAccHasMapping_Impl
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  let rec ghost function model_acc_has_mapping (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    ensures { Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k || (exists v : (v) . Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v && HasMapping0.has_mapping self k v) }
    
   = 
    match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color key val' right)) -> let _ = model_acc_has_mapping left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = Model0.model key in Map.set accu1 b' (Type.Core_Option_Option_Some val') in model_acc_has_mapping right accu2 k
      end
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Type
  function cmp_log (self : self) (_2' : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Type
  function cmp_log (self : self) (_2' : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate lt_log (self : self) (o : self) = 
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Less
end
module RedBlackTree_Impl4_BstInvariantHere_Interface
  type k
  type v
  use Type
  predicate bst_invariant_here (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl4_BstInvariantHere
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate bst_invariant_here (self : Type.redblacktree_node k v) = 
    (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_left self) k v -> LtLog0.lt_log k (Model0.model (Type.redblacktree_node_Node_key self))) && (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_right self) k v -> LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key self)) k)
end
module RedBlackTree_Impl5_BstInvariant_Interface
  type k
  type v
  use Type
  predicate bst_invariant (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl5_BstInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl4_BstInvariantHere_Interface as BstInvariantHere0 with type k = k, type v = v
  predicate bst_invariant (self : Type.redblacktree_tree k v) = 
    match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> true
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node) -> let Type.RedBlackTree_Node left color key val' right = node in BstInvariantHere0.bst_invariant_here node && bst_invariant left && bst_invariant right
      end
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate le_log (self : self) (o : self) = 
    CmpLog0.cmp_log self o <> Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate ge_log (self : self) (o : self) = 
    CmpLog0.cmp_log self o <> Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate gt_log (self : self) (o : self) = 
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . CmpLog0.cmp_log x x = Type.Core_Cmp_Ordering_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Type.core_cmp_ordering . CmpLog0.cmp_log y z = o -> CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log x z = o
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . (x = y -> CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Equal) && (CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Equal -> x = y)
end
module RedBlackTree_Impl0_HasMappingModelAcc_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  function has_mapping_model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
end
module RedBlackTree_Impl0_HasMappingModelAcc
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAccHasMapping_Interface as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function has_mapping_model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
   = 
    match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color key val' right)) -> let _ = has_mapping_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in let _ = has_mapping_model_acc right accu2 k in ModelAccHasMapping0.model_acc_has_mapping right accu2 k
      end
  axiom has_mapping_model_acc_spec : forall self : Type.redblacktree_tree k v, accu : Map.map ModelTy0.modelTy (Type.core_option_option v), k : ModelTy0.modelTy . BstInvariant0.bst_invariant self -> (forall v : (v) . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v)
end
module RedBlackTree_Impl0_HasMappingModelAcc_Impl
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model, axiom .
  let rec ghost function has_mapping_model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    requires {BstInvariant0.bst_invariant self}
    ensures { forall v : (v) . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v }
    
   = 
    match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color key val' right)) -> let _ = has_mapping_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = Model0.model key in Map.set accu1 b' (Type.Core_Option_Option_Some val') in let _ = has_mapping_model_acc right accu2 k in ModelAccHasMapping0.model_acc_has_mapping right accu2 k
      end
end
module RedBlackTree_Impl3_Model_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model (self : Type.redblacktree_tree k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl3_Model
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  use map.Const
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : Type.redblacktree_tree k v) : Map.map ModelTy0.modelTy (Type.core_option_option v) = 
    ModelAcc0.model_acc self (Const.const (Type.Core_Option_Option_None))
end
module RedBlackTree_Impl3_ModelTy
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  type modelTy  = 
    Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl3
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl3_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.redblacktree_tree k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.redblacktree_tree k v,
  type modelTy = ModelTy0.modelTy
end
module RedBlackTree_Impl0_HasMappingModel_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  function has_mapping_model (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v) : ()
end
module RedBlackTree_Impl0_HasMappingModel
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  use map.Const
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAccHasMapping_Interface as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc_Interface as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function has_mapping_model (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v) : () = 
    let _ = ModelAccHasMapping0.model_acc_has_mapping self (Const.const (Type.Core_Option_Option_None)) k in HasMappingModelAcc0.has_mapping_model_acc self (Const.const (Type.Core_Option_Option_None)) k
  axiom has_mapping_model_spec : forall self : Type.redblacktree_tree k v, k : ModelTy0.modelTy, v : v . BstInvariant0.bst_invariant self -> HasMapping0.has_mapping self k v = (Map.get (Model0.model self) k = Type.Core_Option_Option_Some v)
end
module RedBlackTree_Impl0_HasMappingModel_Impl
  type k
  type v
  use map.Map
  use Type
  use map.Const
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  let rec ghost function has_mapping_model (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v) : ()
    requires {BstInvariant0.bst_invariant self}
    ensures { HasMapping0.has_mapping self k v = (Map.get (Model0.model self) k = Type.Core_Option_Option_Some v) }
    
   = 
    let _ = ModelAccHasMapping0.model_acc_has_mapping self (Const.const (Type.Core_Option_Option_None)) k in HasMappingModelAcc0.has_mapping_model_acc self (Const.const (Type.Core_Option_Option_None)) k
end
module RedBlackTree_Impl1_SameMappings_Interface
  type k
  type v
  use Type
  predicate same_mappings (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v)
end
module RedBlackTree_Impl1_SameMappings
  type k
  type v
  use Type
  clone RedBlackTree_Impl0_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  predicate same_mappings (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v) = 
    forall ot : (Type.redblacktree_tree k v) . forall st : (Type.redblacktree_tree k v) . match (st) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some x) -> self = x
      | _ -> false
      end && match (ot) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some x) -> o = x
      | _ -> false
      end -> SameMappings0.same_mappings st ot
end
module RedBlackTree_Impl2_Model_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model (self : Type.redblacktree_node k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl2_Model
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : Type.redblacktree_node k v) : Map.map ModelTy0.modelTy (Type.core_option_option v) = 
    ModelAcc0.model_acc (Type.redblacktree_node_Node_right self) (Map.set (Model0.model (Type.redblacktree_node_Node_left self)) (Model1.model (Type.redblacktree_node_Node_key self)) (Type.Core_Option_Option_Some (Type.redblacktree_node_Node_val self)))
end
module RedBlackTree_Impl4_BstInvariant_Interface
  type k
  type v
  use Type
  predicate bst_invariant (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl4_BstInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl4_BstInvariantHere_Interface as BstInvariantHere0 with type k = k, type v = v
  predicate bst_invariant (self : Type.redblacktree_node k v) = 
    BstInvariantHere0.bst_invariant_here self && BstInvariant0.bst_invariant (Type.redblacktree_node_Node_left self) && BstInvariant0.bst_invariant (Type.redblacktree_node_Node_right self)
end
module RedBlackTree_Impl6_Color_Interface
  type k
  type v
  use Type
  function color (self : Type.redblacktree_tree k v) : Type.redblacktree_color
end
module RedBlackTree_Impl6_Color
  type k
  type v
  use Type
  function color (self : Type.redblacktree_tree k v) : Type.redblacktree_color = 
    match (Type.redblacktree_tree_Tree_node self) with
      | Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color key val' right) -> color
      | _ -> Type.RedBlackTree_Color_Black
      end
end
module RedBlackTree_Impl7_ColorInvariantHere_Interface
  type k
  type v
  use Type
  predicate color_invariant_here (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl7_ColorInvariantHere
  type k
  type v
  use Type
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  predicate color_invariant_here (self : Type.redblacktree_node k v) = 
    Color0.color (Type.redblacktree_node_Node_right self) = Type.RedBlackTree_Color_Black && (Type.redblacktree_node_Node_color self = Type.RedBlackTree_Color_Red -> Color0.color (Type.redblacktree_node_Node_left self) = Type.RedBlackTree_Color_Black)
end
module RedBlackTree_Impl6_ColorInvariant_Interface
  type k
  type v
  use Type
  predicate color_invariant (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl6_ColorInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl7_ColorInvariantHere_Interface as ColorInvariantHere0 with type k = k, type v = v
  predicate color_invariant (self : Type.redblacktree_tree k v) = 
    match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> true
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node) -> let Type.RedBlackTree_Node left color key val' right = node in ColorInvariantHere0.color_invariant_here node && color_invariant left && color_invariant right
      end
end
module RedBlackTree_Impl7_ColorInvariant_Interface
  type k
  type v
  use Type
  predicate color_invariant (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl7_ColorInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere_Interface as ColorInvariantHere0 with type k = k, type v = v
  predicate color_invariant (self : Type.redblacktree_node k v) = 
    ColorInvariantHere0.color_invariant_here self && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left self) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right self)
end
module RedBlackTree_Impl9_HasHeightRec_Interface
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use Type
  predicate has_height_rec (self : Type.redblacktree_tree k v) (h : int)
end
module RedBlackTree_Impl9_HasHeightRec
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use Type
  predicate has_height_rec (self : Type.redblacktree_tree k v) (h : int) = 
    match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> h = 0
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left (Type.RedBlackTree_Color_Red) key val' right)) -> has_height_rec left h && has_height_rec right h
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left (Type.RedBlackTree_Color_Black) key val' right)) -> has_height_rec left (h - 1) && has_height_rec right (h - 1)
      end
  axiom has_height_rec_spec : forall self : Type.redblacktree_tree k v, h : int . has_height_rec self h -> h >= 0
end
module RedBlackTree_Impl9_HasHeightRec_Impl
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use Type
  let rec ghost function has_height_rec (self : Type.redblacktree_tree k v) (h : int) : bool
    ensures { result -> h >= 0 }
    
   = 
    match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> pure {h = 0}
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left (Type.RedBlackTree_Color_Red) key val' right)) -> has_height_rec left h && has_height_rec right h
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left (Type.RedBlackTree_Color_Black) key val' right)) -> has_height_rec left (h - 1) && has_height_rec right (h - 1)
      end
end
module RedBlackTree_Impl8_HasHeight_Interface
  type k
  type v
  use Type
  use mach.int.Int
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  predicate has_height (self : Type.redblacktree_node k v) (h : int)
end
module RedBlackTree_Impl8_HasHeight
  type k
  type v
  use Type
  use mach.int.Int
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  use mach.int.Int32
  predicate has_height (self : Type.redblacktree_node k v) (h : int) = 
    match (self) with
      | Type.RedBlackTree_Node left (Type.RedBlackTree_Color_Red) key val' right -> HasHeightRec0.has_height_rec left h && HasHeightRec0.has_height_rec right h
      | Type.RedBlackTree_Node left (Type.RedBlackTree_Color_Black) key val' right -> HasHeightRec0.has_height_rec left (h - 1) && HasHeightRec0.has_height_rec right (h - 1)
      end
  axiom has_height_spec : forall self : Type.redblacktree_node k v, h : int . forall node : (Type.redblacktree_node k v) . forall tree : (Type.redblacktree_tree k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node && self = node -> has_height self h = HasHeightRec0.has_height_rec tree h
end
module RedBlackTree_Impl8_HasHeight_Impl
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  let rec ghost function has_height (self : Type.redblacktree_node k v) (h : int) : bool
    ensures { forall node : (Type.redblacktree_node k v) . forall tree : (Type.redblacktree_tree k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node && self = node -> result = HasHeightRec0.has_height_rec tree h }
    
   = 
    match (self) with
      | Type.RedBlackTree_Node left (Type.RedBlackTree_Color_Red) key val' right -> HasHeightRec0.has_height_rec left h && HasHeightRec0.has_height_rec right h
      | Type.RedBlackTree_Node left (Type.RedBlackTree_Color_Black) key val' right -> HasHeightRec0.has_height_rec left (h - 1) && HasHeightRec0.has_height_rec right (h - 1)
      end
end
module RedBlackTree_Impl9_HasHeight_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  predicate has_height (self : Type.redblacktree_tree k v) (h : int)
end
module RedBlackTree_Impl9_HasHeight
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  predicate has_height (self : Type.redblacktree_tree k v) (h : int) = 
    HasHeightRec0.has_height_rec self h
  axiom has_height_spec : forall self : Type.redblacktree_tree k v, h : int . (Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_None -> has_height self h = (h = 0)) && (forall node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_Some node -> has_height self h = HasHeight0.has_height node h)
end
module RedBlackTree_Impl9_HasHeight_Impl
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  let rec ghost function has_height (self : Type.redblacktree_tree k v) (h : int) : bool
    ensures { forall node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_Some node -> result = HasHeight0.has_height node h }
    ensures { Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_None -> result = (h = 0) }
    
   = 
    HasHeightRec0.has_height_rec self h
end
module RedBlackTree_Impl10_Invariant_Interface
  type k
  type v
  use Type
  predicate invariant' (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl10_Invariant
  type k
  type v
  use Type
  use mach.int.Int
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height, axiom .
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  predicate invariant' (self : Type.redblacktree_tree k v) = 
    BstInvariant0.bst_invariant self && ColorInvariant0.color_invariant self && Color0.color self = Type.RedBlackTree_Color_Black && (exists h : (int) . HasHeight0.has_height self h)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module RedBlackTree_Impl11_IsRed_Interface
  type k
  type v
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  val is_red [@cfg:stackify] (self : Type.redblacktree_tree k v) : bool
    ensures { result = (Color0.color self = Type.RedBlackTree_Color_Red) }
    
end
module RedBlackTree_Impl11_IsRed
  type k
  type v
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  let rec cfg is_red [@cfg:stackify] (self : Type.redblacktree_tree k v) : bool
    ensures { result = (Color0.color self = Type.RedBlackTree_Color_Red) }
    
   = 
  var _0 : bool;
  var self_1 : Type.redblacktree_tree k v;
  var _2 : isize;
  var _3 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (Type.redblacktree_tree_Tree_node self_1)
      | Type.Core_Option_Option_Some _ -> goto BB2
      | _ -> goto BB5
      end
  }
  BB1 {
    _0 <- false;
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    switch (Type.redblacktree_node_Node_color (Type.core_option_option_Some_0 (Type.redblacktree_tree_Tree_node self_1)))
      | Type.RedBlackTree_Color_Red -> goto BB3
      | _ -> goto BB1
      end
  }
  BB3 {
    _0 <- true;
    goto BB4
  }
  BB4 {
    return _0
  }
  BB5 {
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  
end
module CreusotContracts_Logic_Ghost_Impl0_Model_Interface
  type t
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_Model
  type t
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_ModelTy
  type t
  type modelTy  = 
    t
end
module CreusotContracts_Logic_Ghost_Impl0
  type t
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Ghost_Impl1_Record_Interface
  type t
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Logic_Ghost_Impl1_Record
  type t
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module Core_Mem_Replace_Interface
  type t
  use prelude.Prelude
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = src }
    
end
module Core_Mem_Replace
  type t
  use prelude.Prelude
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = src }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module Core_Mem_Swap_Interface
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ y =  * x }
    ensures {  ^ x =  * y }
    
end
module Core_Mem_Swap
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ y =  * x }
    ensures {  ^ x =  * y }
    
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module RedBlackTree_Impl12_RotateRight_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  val rotate_right [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red}
    requires {BstInvariant0.bst_invariant ( * self)}
    ensures { forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r && (Type.redblacktree_node_Node_left ( ^ self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) = (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( * self)) }
    ensures { Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { BstInvariant0.bst_invariant ( ^ self) }
    ensures { SameMappings0.same_mappings ( * self) ( ^ self) }
    
end
module RedBlackTree_Impl12_RotateRight
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = Type.redblacktree_node k v
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.redblacktree_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone Core_Mem_Replace_Interface as Replace0 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = Type.redblacktree_node k v,
  function Model0.model = Model0.model
  let rec cfg rotate_right [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red}
    requires {BstInvariant0.bst_invariant ( * self)}
    ensures { forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r && (Type.redblacktree_node_Node_left ( ^ self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) = (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( * self)) }
    ensures { Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { BstInvariant0.bst_invariant ( ^ self) }
    ensures { SameMappings0.same_mappings ( * self) ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var old_self_2 : Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_node k v);
  var _3 : Type.redblacktree_node k v;
  var _4 : Type.redblacktree_node k v;
  var x_5 : Type.redblacktree_node k v;
  var _6 : Type.core_option_option (Type.redblacktree_node k v);
  var _7 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _8 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _9 : Type.core_option_option (Type.redblacktree_node k v);
  var _10 : isize;
  var x_11 : Type.redblacktree_node k v;
  var _12 : ();
  var _13 : ();
  var _14 : borrowed (Type.redblacktree_tree k v);
  var _15 : borrowed (Type.redblacktree_tree k v);
  var _16 : borrowed (Type.redblacktree_tree k v);
  var _17 : borrowed (Type.redblacktree_tree k v);
  var _18 : ();
  var _19 : borrowed (Type.redblacktree_node k v);
  var _20 : borrowed (Type.redblacktree_node k v);
  var _21 : borrowed (Type.redblacktree_node k v);
  var _22 : Type.redblacktree_color;
  var _23 : Type.redblacktree_color;
  var _24 : ();
  var _25 : ();
  var _26 : Type.redblacktree_tree k v;
  var _27 : Type.core_option_option (Type.redblacktree_node k v);
  var _28 : Type.redblacktree_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <-  * self_1;
    _3 <- _4;
    assume { Resolve0.resolve _4 };
    old_self_2 <- Record0.record _3;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_self_2 };
    _8 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _8)) b c d e) };
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    _9 <- Type.Core_Option_Option_None;
    _6 <- Replace0.replace _7 _9;
    goto BB2
  }
  BB2 {
    assume { Resolve2.resolve _8 };
    switch (_6)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB5
      end
  }
  BB3 {
    assume { Resolve3.resolve self_1 };
    absurd
  }
  BB4 {
    assume { Resolve3.resolve self_1 };
    assume { Resolve4.resolve _6 };
    absurd
  }
  BB5 {
    assume { Resolve5.resolve x_11 };
    x_11 <- Type.core_option_option_Some_0 _6;
    assume { Resolve5.resolve x_5 };
    x_5 <- x_11;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve4.resolve _6 };
    _15 <- borrow_mut (Type.redblacktree_node_Node_left ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node ( ^ _15) b c d e) };
    _14 <- borrow_mut ( * _15);
    _15 <- { _15 with current = ( ^ _14) };
    _17 <- borrow_mut (Type.redblacktree_node_Node_right x_5);
    x_5 <- (let Type.RedBlackTree_Node a b c d e = x_5 in Type.RedBlackTree_Node a b c d ( ^ _17));
    _16 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _16) };
    _13 <- Swap0.swap _14 _16;
    goto BB8
  }
  BB8 {
    assume { Resolve6.resolve _15 };
    assume { Resolve6.resolve _17 };
    _19 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _19) };
    _21 <- borrow_mut x_5;
    x_5 <-  ^ _21;
    _20 <- borrow_mut ( * _21);
    _21 <- { _21 with current = ( ^ _20) };
    _18 <- Swap1.swap _19 _20;
    goto BB9
  }
  BB9 {
    assume { Resolve7.resolve _21 };
    _22 <- Type.redblacktree_node_Node_color x_5;
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a _22 c d e) };
    _23 <- Type.RedBlackTree_Color_Red;
    x_5 <- (let Type.RedBlackTree_Node a b c d e = x_5 in Type.RedBlackTree_Node a _23 c d e);
    assert { HasMapping0.has_mapping (Type.redblacktree_node_Node_left (Model0.model old_self_2)) (Model1.model (Type.redblacktree_node_Node_key ( * self_1))) (Type.redblacktree_node_Node_val ( * self_1)) };
    _24 <- ();
    assert { forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_left x_5) k v -> HasMapping0.has_mapping (Type.redblacktree_node_Node_left (Model0.model old_self_2)) k v };
    goto BB10
  }
  BB10 {
    _25 <- ();
    assume { Resolve5.resolve _28 };
    _28 <- x_5;
    _27 <- Type.Core_Option_Option_Some _28;
    goto BB11
  }
  BB11 {
    _26 <- Type.RedBlackTree_Tree _27;
    goto BB12
  }
  BB12 {
    assume { Resolve8.resolve (Type.redblacktree_node_Node_right ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d _26) };
    goto BB13
  }
  BB13 {
    assume { Resolve3.resolve self_1 };
    goto BB14
  }
  BB14 {
    _0 <- ();
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module RedBlackTree_Impl12_RotateLeft_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  val rotate_left [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red}
    requires {BstInvariant0.bst_invariant ( * self)}
    ensures { forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l && (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( ^ self)) = (Type.redblacktree_node_Node_left ( * self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) }
    ensures { Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { BstInvariant0.bst_invariant ( ^ self) }
    ensures { SameMappings0.same_mappings ( * self) ( ^ self) }
    
end
module RedBlackTree_Impl12_RotateLeft
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = Type.redblacktree_node k v
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.redblacktree_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone Core_Mem_Replace_Interface as Replace0 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = Type.redblacktree_node k v,
  function Model0.model = Model0.model
  let rec cfg rotate_left [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red}
    requires {BstInvariant0.bst_invariant ( * self)}
    ensures { forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l && (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( ^ self)) = (Type.redblacktree_node_Node_left ( * self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) }
    ensures { Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { BstInvariant0.bst_invariant ( ^ self) }
    ensures { SameMappings0.same_mappings ( * self) ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var old_self_2 : Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_node k v);
  var _3 : Type.redblacktree_node k v;
  var _4 : Type.redblacktree_node k v;
  var x_5 : Type.redblacktree_node k v;
  var _6 : Type.core_option_option (Type.redblacktree_node k v);
  var _7 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _8 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _9 : Type.core_option_option (Type.redblacktree_node k v);
  var _10 : isize;
  var x_11 : Type.redblacktree_node k v;
  var _12 : ();
  var _13 : ();
  var _14 : borrowed (Type.redblacktree_tree k v);
  var _15 : borrowed (Type.redblacktree_tree k v);
  var _16 : borrowed (Type.redblacktree_tree k v);
  var _17 : borrowed (Type.redblacktree_tree k v);
  var _18 : ();
  var _19 : borrowed (Type.redblacktree_node k v);
  var _20 : borrowed (Type.redblacktree_node k v);
  var _21 : borrowed (Type.redblacktree_node k v);
  var _22 : Type.redblacktree_color;
  var _23 : Type.redblacktree_color;
  var _24 : ();
  var _25 : ();
  var _26 : Type.redblacktree_tree k v;
  var _27 : Type.core_option_option (Type.redblacktree_node k v);
  var _28 : Type.redblacktree_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <-  * self_1;
    _3 <- _4;
    assume { Resolve0.resolve _4 };
    old_self_2 <- Record0.record _3;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_self_2 };
    _8 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _8))) };
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    _9 <- Type.Core_Option_Option_None;
    _6 <- Replace0.replace _7 _9;
    goto BB2
  }
  BB2 {
    assume { Resolve2.resolve _8 };
    switch (_6)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB5
      end
  }
  BB3 {
    assume { Resolve3.resolve self_1 };
    absurd
  }
  BB4 {
    assume { Resolve3.resolve self_1 };
    assume { Resolve4.resolve _6 };
    absurd
  }
  BB5 {
    assume { Resolve5.resolve x_11 };
    x_11 <- Type.core_option_option_Some_0 _6;
    assume { Resolve5.resolve x_5 };
    x_5 <- x_11;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve4.resolve _6 };
    _15 <- borrow_mut (Type.redblacktree_node_Node_right ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d ( ^ _15)) };
    _14 <- borrow_mut ( * _15);
    _15 <- { _15 with current = ( ^ _14) };
    _17 <- borrow_mut (Type.redblacktree_node_Node_left x_5);
    x_5 <- (let Type.RedBlackTree_Node a b c d e = x_5 in Type.RedBlackTree_Node ( ^ _17) b c d e);
    _16 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _16) };
    _13 <- Swap0.swap _14 _16;
    goto BB8
  }
  BB8 {
    assume { Resolve6.resolve _15 };
    assume { Resolve6.resolve _17 };
    _19 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _19) };
    _21 <- borrow_mut x_5;
    x_5 <-  ^ _21;
    _20 <- borrow_mut ( * _21);
    _21 <- { _21 with current = ( ^ _20) };
    _18 <- Swap1.swap _19 _20;
    goto BB9
  }
  BB9 {
    assume { Resolve7.resolve _21 };
    _22 <- Type.redblacktree_node_Node_color x_5;
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a _22 c d e) };
    _23 <- Type.RedBlackTree_Color_Red;
    x_5 <- (let Type.RedBlackTree_Node a b c d e = x_5 in Type.RedBlackTree_Node a _23 c d e);
    assert { HasMapping0.has_mapping (Type.redblacktree_node_Node_right (Model0.model old_self_2)) (Model1.model (Type.redblacktree_node_Node_key ( * self_1))) (Type.redblacktree_node_Node_val ( * self_1)) };
    _24 <- ();
    assert { forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_right x_5) k v -> HasMapping0.has_mapping (Type.redblacktree_node_Node_right (Model0.model old_self_2)) k v };
    goto BB10
  }
  BB10 {
    _25 <- ();
    assume { Resolve5.resolve _28 };
    _28 <- x_5;
    _27 <- Type.Core_Option_Option_Some _28;
    goto BB11
  }
  BB11 {
    _26 <- Type.RedBlackTree_Tree _27;
    goto BB12
  }
  BB12 {
    assume { Resolve8.resolve (Type.redblacktree_node_Node_left ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node _26 b c d e) };
    goto BB13
  }
  BB13 {
    assume { Resolve3.resolve self_1 };
    goto BB14
  }
  BB14 {
    _0 <- ();
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module Core_Option_Impl0_AsMut_Interface
  type t
  use Type
  use prelude.Prelude
  val as_mut [@cfg:stackify] (self : borrowed (Type.core_option_option t)) : Type.core_option_option (borrowed t)
    ensures {  * self = Type.Core_Option_Option_None || (exists r : (borrowed t) . result = Type.Core_Option_Option_Some r &&  * self = Type.Core_Option_Option_Some ( * r) &&  ^ self = Type.Core_Option_Option_Some ( ^ r)) }
    ensures {  * self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None &&  ^ self = Type.Core_Option_Option_None }
    
end
module Core_Option_Impl0_AsMut
  type t
  use Type
  use prelude.Prelude
  val as_mut [@cfg:stackify] (self : borrowed (Type.core_option_option t)) : Type.core_option_option (borrowed t)
    ensures {  * self = Type.Core_Option_Option_None || (exists r : (borrowed t) . result = Type.Core_Option_Option_Some r &&  * self = Type.Core_Option_Option_Some ( * r) &&  ^ self = Type.Core_Option_Option_Some ( ^ r)) }
    ensures {  * self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None &&  ^ self = Type.Core_Option_Option_None }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Type
  val unwrap [@cfg:stackify] (self : Type.core_option_option t) : t
    requires {self <> Type.Core_Option_Option_None}
    ensures { Type.Core_Option_Option_Some result = self }
    
end
module Core_Option_Impl0_Unwrap
  type t
  use Type
  val unwrap [@cfg:stackify] (self : Type.core_option_option t) : t
    requires {self <> Type.Core_Option_Option_None}
    ensures { Type.Core_Option_Option_Some result = self }
    
end
module RedBlackTree_Impl12_FlipColors_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  val flip_colors [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {Color0.color (Type.redblacktree_node_Node_left ( * self)) = Color0.color (Type.redblacktree_node_Node_right ( * self))}
    requires {Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {BstInvariant0.bst_invariant ( * self)}
    ensures { exists r2 : (Type.redblacktree_node k v) . exists r1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r1 && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r2 && Type.redblacktree_node_Node_left r1 = Type.redblacktree_node_Node_left r2 && Type.redblacktree_node_Node_right r1 = Type.redblacktree_node_Node_right r2 && Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color r2 && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color r1 }
    ensures { exists l2 : (Type.redblacktree_node k v) . exists l1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l1 && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l2 && Type.redblacktree_node_Node_left l1 = Type.redblacktree_node_Node_left l2 && Type.redblacktree_node_Node_right l1 = Type.redblacktree_node_Node_right l2 && Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color l2 && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color l1 }
    ensures { SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { BstInvariant0.bst_invariant ( ^ self) }
    ensures { forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
end
module RedBlackTree_Impl12_FlipColors
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_color
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  let rec cfg flip_colors [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {Color0.color (Type.redblacktree_node_Node_left ( * self)) = Color0.color (Type.redblacktree_node_Node_right ( * self))}
    requires {Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {BstInvariant0.bst_invariant ( * self)}
    ensures { exists r2 : (Type.redblacktree_node k v) . exists r1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r1 && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r2 && Type.redblacktree_node_Node_left r1 = Type.redblacktree_node_Node_left r2 && Type.redblacktree_node_Node_right r1 = Type.redblacktree_node_Node_right r2 && Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color r2 && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color r1 }
    ensures { exists l2 : (Type.redblacktree_node k v) . exists l1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l1 && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l2 && Type.redblacktree_node_Node_left l1 = Type.redblacktree_node_Node_left l2 && Type.redblacktree_node_Node_right l1 = Type.redblacktree_node_Node_right l2 && Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color l2 && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color l1 }
    ensures { SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { BstInvariant0.bst_invariant ( ^ self) }
    ensures { forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _2 : Type.redblacktree_color;
  var _3 : borrowed (Type.redblacktree_node k v);
  var _4 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _5 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _6 : ();
  var _7 : borrowed (Type.redblacktree_color);
  var _8 : borrowed (Type.redblacktree_color);
  var _9 : borrowed (Type.redblacktree_color);
  var _10 : borrowed (Type.redblacktree_color);
  var _11 : borrowed (Type.redblacktree_node k v);
  var _12 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _13 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _14 : ();
  var _15 : ();
  var _16 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- Type.redblacktree_node_Node_color ( * self_1);
    _5 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _5)) b c d e) };
    _4 <- AsMut0.as_mut _5;
    goto BB1
  }
  BB1 {
    _3 <- Unwrap0.unwrap _4;
    goto BB2
  }
  BB2 {
    _3 <- { _3 with current = (let Type.RedBlackTree_Node a b c d e =  * _3 in Type.RedBlackTree_Node a _2 c d e) };
    assume { Resolve0.resolve _3 };
    _8 <- borrow_mut (Type.redblacktree_node_Node_color ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a ( ^ _8) c d e) };
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    _13 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _13))) };
    _12 <- AsMut0.as_mut _13;
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve self_1 };
    _11 <- Unwrap0.unwrap _12;
    goto BB4
  }
  BB4 {
    _10 <- borrow_mut (Type.redblacktree_node_Node_color ( * _11));
    _11 <- { _11 with current = (let Type.RedBlackTree_Node a b c d e =  * _11 in Type.RedBlackTree_Node a ( ^ _10) c d e) };
    assume { Resolve0.resolve _11 };
    _9 <- borrow_mut ( * _10);
    _10 <- { _10 with current = ( ^ _9) };
    _6 <- Swap0.swap _7 _9;
    goto BB5
  }
  BB5 {
    assume { Resolve2.resolve _8 };
    assume { Resolve2.resolve _10 };
    assert { SameMappings1.same_mappings (Type.redblacktree_node_Node_left ( * self_1)) (Type.redblacktree_node_Node_left ( ^ self_1)) };
    _14 <- ();
    assert { SameMappings1.same_mappings (Type.redblacktree_node_Node_right ( * self_1)) (Type.redblacktree_node_Node_right ( ^ self_1)) };
    _15 <- ();
    assert { BstInvariantHere0.bst_invariant_here ( * self_1) };
    _16 <- ();
    _0 <- ();
    return _0
  }
  
end
module Core_Option_Impl0_AsRef_Interface
  type t
  use Type
  use prelude.Prelude
  val as_ref [@cfg:stackify] (self : Type.core_option_option t) : Type.core_option_option t
    ensures { self = Type.Core_Option_Option_None || (exists r : (borrowed t) . result = Type.Core_Option_Option_Some ( * r) && self = Type.Core_Option_Option_Some ( * r)) }
    ensures { self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None }
    
end
module Core_Option_Impl0_AsRef
  type t
  use Type
  use prelude.Prelude
  val as_ref [@cfg:stackify] (self : Type.core_option_option t) : Type.core_option_option t
    ensures { self = Type.Core_Option_Option_None || (exists r : (borrowed t) . result = Type.Core_Option_Option_Some ( * r) && self = Type.Core_Option_Option_Some ( * r)) }
    ensures { self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None }
    
end
module RedBlackTree_Impl12_Balance_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariant_Interface as ColorInvariant1 with type k = k, type v = v
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  val balance [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> false}
    requires {Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self))}
    requires {Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self))}
    requires {BstInvariant0.bst_invariant ( * self)}
    ensures { forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Black && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant ( ^ self) }
    ensures { Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { forall l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Black && Type.redblacktree_node_Node_color l = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left l) && Color0.color (Type.redblacktree_node_Node_right l) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right l) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant ( ^ self) }
    ensures { ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Black ->  * self =  ^ self }
    ensures { BstInvariant0.bst_invariant ( ^ self) }
    ensures { SameMappings0.same_mappings ( * self) ( ^ self) }
    
end
module RedBlackTree_Impl12_Balance
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl12_FlipColors_Interface as FlipColors0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl12_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl12_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  let rec cfg balance [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> false}
    requires {Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self))}
    requires {Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self))}
    requires {BstInvariant0.bst_invariant ( * self)}
    ensures { forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Black && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant ( ^ self) }
    ensures { Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { forall l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Black && Type.redblacktree_node_Node_color l = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left l) && Color0.color (Type.redblacktree_node_Node_right l) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right l) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant ( ^ self) }
    ensures { ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Black ->  * self =  ^ self }
    ensures { BstInvariant0.bst_invariant ( ^ self) }
    ensures { SameMappings0.same_mappings ( * self) ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _2 : ();
  var _3 : bool;
  var _4 : bool;
  var _5 : Type.redblacktree_tree k v;
  var _6 : bool;
  var _7 : bool;
  var _8 : Type.redblacktree_tree k v;
  var _9 : ();
  var _10 : borrowed (Type.redblacktree_node k v);
  var _11 : ();
  var _12 : bool;
  var _13 : bool;
  var _14 : Type.redblacktree_tree k v;
  var _15 : bool;
  var _16 : Type.redblacktree_tree k v;
  var _17 : Type.redblacktree_node k v;
  var _18 : Type.core_option_option (Type.redblacktree_node k v);
  var _19 : Type.core_option_option (Type.redblacktree_node k v);
  var _20 : ();
  var _21 : borrowed (Type.redblacktree_node k v);
  var _22 : bool;
  var _23 : bool;
  var _24 : Type.redblacktree_tree k v;
  var _25 : bool;
  var _26 : Type.redblacktree_tree k v;
  var _27 : ();
  var _28 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _5 <- Type.redblacktree_node_Node_right ( * self_1);
    _4 <- IsRed0.is_red _5;
    goto BB4
  }
  BB1 {
    _3 <- false;
    goto BB3
  }
  BB2 {
    _8 <- Type.redblacktree_node_Node_left ( * self_1);
    _7 <- IsRed0.is_red _8;
    goto BB5
  }
  BB3 {
    switch (_3)
      | False -> goto BB8
      | _ -> goto BB6
      end
  }
  BB4 {
    switch (_4)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB5 {
    _6 <- not _7;
    _3 <- _6;
    goto BB3
  }
  BB6 {
    _10 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _10) };
    _9 <- RotateLeft0.rotate_left _10;
    goto BB7
  }
  BB7 {
    _2 <- ();
    goto BB9
  }
  BB8 {
    _2 <- ();
    goto BB9
  }
  BB9 {
    _14 <- Type.redblacktree_node_Node_left ( * self_1);
    _13 <- IsRed0.is_red _14;
    goto BB13
  }
  BB10 {
    _12 <- false;
    goto BB12
  }
  BB11 {
    _19 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1));
    _18 <- AsRef0.as_ref _19;
    goto BB14
  }
  BB12 {
    switch (_12)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB13 {
    switch (_13)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB14 {
    _17 <- Unwrap0.unwrap _18;
    goto BB15
  }
  BB15 {
    _16 <- Type.redblacktree_node_Node_left _17;
    assume { Resolve0.resolve _17 };
    _15 <- IsRed0.is_red _16;
    goto BB16
  }
  BB16 {
    _12 <- _15;
    goto BB12
  }
  BB17 {
    _21 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _21) };
    _20 <- RotateRight0.rotate_right _21;
    goto BB18
  }
  BB18 {
    _11 <- ();
    goto BB20
  }
  BB19 {
    _11 <- ();
    goto BB20
  }
  BB20 {
    _24 <- Type.redblacktree_node_Node_left ( * self_1);
    _23 <- IsRed0.is_red _24;
    goto BB24
  }
  BB21 {
    _22 <- false;
    goto BB23
  }
  BB22 {
    _26 <- Type.redblacktree_node_Node_right ( * self_1);
    _25 <- IsRed0.is_red _26;
    goto BB25
  }
  BB23 {
    switch (_22)
      | False -> goto BB28
      | _ -> goto BB26
      end
  }
  BB24 {
    switch (_23)
      | False -> goto BB21
      | _ -> goto BB22
      end
  }
  BB25 {
    _22 <- _25;
    goto BB23
  }
  BB26 {
    _28 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _28) };
    _27 <- FlipColors0.flip_colors _28;
    goto BB27
  }
  BB27 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB29
  }
  BB28 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB29
  }
  BB29 {
    return _0
  }
  
end
module RedBlackTree_Impl12_MoveRedLeft_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant1 with type k = k, type v = v
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  val move_red_left [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {exists r : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r && Type.redblacktree_node_Node_color r = Type.RedBlackTree_Color_Black}
    requires {exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_node_Node_color l = Type.RedBlackTree_Color_Black && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Black}
    requires {Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red}
    requires {ColorInvariant0.color_invariant ( * self)}
    requires {BstInvariant0.bst_invariant ( * self)}
    ensures { Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Black -> Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) }
    ensures { Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant ( ^ self) && (exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Red) }
    ensures { SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { BstInvariant0.bst_invariant ( ^ self) }
    ensures { forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
end
module RedBlackTree_Impl12_MoveRedLeft
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = Type.redblacktree_node k v,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl12_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl12_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl12_FlipColors_Interface as FlipColors0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg move_red_left [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {exists r : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r && Type.redblacktree_node_Node_color r = Type.RedBlackTree_Color_Black}
    requires {exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_node_Node_color l = Type.RedBlackTree_Color_Black && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Black}
    requires {Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red}
    requires {ColorInvariant0.color_invariant ( * self)}
    requires {BstInvariant0.bst_invariant ( * self)}
    ensures { Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Black -> Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) }
    ensures { Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant ( ^ self) && (exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Red) }
    ensures { SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { BstInvariant0.bst_invariant ( ^ self) }
    ensures { forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var old_self_2 : Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_node k v);
  var _3 : Type.redblacktree_node k v;
  var _4 : Type.redblacktree_node k v;
  var _5 : ();
  var _6 : borrowed (Type.redblacktree_node k v);
  var _7 : bool;
  var _8 : Type.redblacktree_tree k v;
  var _9 : borrowed (Type.redblacktree_node k v);
  var _10 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _11 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _12 : ();
  var _13 : borrowed (Type.redblacktree_node k v);
  var _14 : borrowed (Type.redblacktree_node k v);
  var _15 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _16 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _17 : ();
  var _18 : ();
  var _19 : borrowed (Type.redblacktree_node k v);
  var _20 : ();
  var _21 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <-  * self_1;
    _3 <- _4;
    assume { Resolve0.resolve _4 };
    old_self_2 <- Record0.record _3;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_self_2 };
    _6 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _6) };
    _5 <- FlipColors0.flip_colors _6;
    goto BB2
  }
  BB2 {
    _11 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _11))) };
    _10 <- AsMut0.as_mut _11;
    goto BB3
  }
  BB3 {
    _9 <- Unwrap0.unwrap _10;
    goto BB4
  }
  BB4 {
    _8 <- Type.redblacktree_node_Node_left ( * _9);
    assume { Resolve2.resolve _9 };
    _7 <- IsRed0.is_red _8;
    goto BB5
  }
  BB5 {
    switch (_7)
      | False -> goto BB12
      | _ -> goto BB6
      end
  }
  BB6 {
    _16 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _16))) };
    _15 <- AsMut0.as_mut _16;
    goto BB7
  }
  BB7 {
    _14 <- Unwrap0.unwrap _15;
    goto BB8
  }
  BB8 {
    _13 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    _12 <- RotateRight0.rotate_right _13;
    goto BB9
  }
  BB9 {
    assume { Resolve2.resolve _14 };
    assert { SameMappings0.same_mappings (Model0.model old_self_2) ( * self_1) };
    _17 <- ();
    _19 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _19) };
    _18 <- RotateLeft0.rotate_left _19;
    goto BB10
  }
  BB10 {
    _21 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _21) };
    _20 <- FlipColors0.flip_colors _21;
    goto BB11
  }
  BB11 {
    assume { Resolve3.resolve self_1 };
    _0 <- ();
    goto BB13
  }
  BB12 {
    assume { Resolve3.resolve self_1 };
    _0 <- ();
    goto BB13
  }
  BB13 {
    return _0
  }
  
end
module RedBlackTree_Impl13_New_Interface
  type k
  type v
  use Type
  use map.Const
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Invariant_Interface as Invariant0 with type k = k, type v = v
  val new [@cfg:stackify] (_ : ()) : Type.redblacktree_tree k v
    ensures { Invariant0.invariant' result }
    ensures { Model0.model result = Const.const (Type.Core_Option_Option_None) }
    
end
module RedBlackTree_Impl13_New
  type k
  type v
  use Type
  use map.Const
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl10_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg new [@cfg:stackify] (_ : ()) : Type.redblacktree_tree k v
    ensures { Invariant0.invariant' result }
    ensures { Model0.model result = Const.const (Type.Core_Option_Option_None) }
    
   = 
  var _0 : Type.redblacktree_tree k v;
  var _1 : Type.core_option_option (Type.redblacktree_node k v);
  {
    goto BB0
  }
  BB0 {
    _1 <- Type.Core_Option_Option_None;
    _0 <- Type.RedBlackTree_Tree _1;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module Core_Cmp_Ord_Cmp_Interface
  type self
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module Core_Cmp_Ord_Cmp
  type self
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module Core_Cmp_Ord_Max_Interface
  type self
  val max [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Max
  type self
  val max [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Min_Interface
  type self
  val min [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Min
  type self
  val min [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Clamp_Interface
  type self
  val clamp [@cfg:stackify] (self : self) (min : self) (max : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Clamp
  type self
  val clamp [@cfg:stackify] (self : self) (min : self) (max : self) : self
    requires {false}
    
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module RedBlackTree_Impl13_InsertRec_Interface
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height, axiom .
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  val insert_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {ColorInvariant0.color_invariant ( * self)}
    requires {BstInvariant0.bst_invariant ( * self)}
    ensures { forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model0.model key || HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    ensures { HasMapping0.has_mapping ( ^ self) (Model0.model key) val' }
    ensures { Color0.color ( * self) = Type.RedBlackTree_Color_Black -> ColorInvariant0.color_invariant ( ^ self) }
    ensures { exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( ^ self) = Type.Core_Option_Option_Some node && Color0.color (Type.redblacktree_node_Node_right node) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left node) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right node) }
    ensures { BstInvariant0.bst_invariant ( ^ self) }
    
end
module RedBlackTree_Impl13_InsertRec
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_tree k v)
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model1 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = Type.redblacktree_tree k v,
  function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model0.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl12_Balance_Interface as Balance0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate ColorInvariant1.color_invariant = ColorInvariant1.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg insert_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {ColorInvariant0.color_invariant ( * self)}
    requires {BstInvariant0.bst_invariant ( * self)}
    ensures { forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model0.model key || HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    ensures { HasMapping0.has_mapping ( ^ self) (Model0.model key) val' }
    ensures { Color0.color ( * self) = Type.RedBlackTree_Color_Black -> ColorInvariant0.color_invariant ( ^ self) }
    ensures { exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( ^ self) = Type.Core_Option_Option_Some node && Color0.color (Type.redblacktree_node_Node_right node) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left node) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right node) }
    ensures { BstInvariant0.bst_invariant ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var val'_3 : v;
  var old_self_4 : Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_tree k v);
  var _5 : Type.redblacktree_tree k v;
  var _6 : Type.redblacktree_tree k v;
  var _7 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _8 : isize;
  var _9 : ();
  var _10 : Type.core_option_option (Type.redblacktree_node k v);
  var _11 : Type.redblacktree_node k v;
  var _12 : Type.redblacktree_node k v;
  var _13 : Type.redblacktree_tree k v;
  var _14 : Type.core_option_option (Type.redblacktree_node k v);
  var _15 : Type.redblacktree_color;
  var _16 : k;
  var _17 : v;
  var _18 : Type.redblacktree_tree k v;
  var _19 : Type.core_option_option (Type.redblacktree_node k v);
  var node_20 : borrowed (Type.redblacktree_node k v);
  var _21 : ();
  var _22 : Type.core_cmp_ordering;
  var _23 : k;
  var _24 : k;
  var _25 : k;
  var _26 : int8;
  var _27 : borrowed (Type.redblacktree_tree k v);
  var _28 : k;
  var _29 : v;
  var _30 : ();
  var _31 : v;
  var _32 : borrowed (Type.redblacktree_tree k v);
  var _33 : k;
  var _34 : v;
  var _35 : ();
  var _36 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _6 <-  * self_1;
    _5 <- _6;
    assume { Resolve0.resolve _6 };
    old_self_4 <- Record0.record _5;
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve old_self_4 };
    _7 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _7)) };
    switch ( * _7)
      | Type.Core_Option_Option_None -> goto BB6
      | Type.Core_Option_Option_Some _ -> goto BB4
      end
  }
  BB4 {
    assume { Resolve2.resolve self_1 };
    node_20 <- borrow_mut (Type.core_option_option_Some_0 ( * _7));
    _7 <- { _7 with current = (let Type.Core_Option_Option_Some a =  * _7 in Type.Core_Option_Option_Some ( ^ node_20)) };
    assume { Resolve5.resolve _7 };
    _23 <- key_2;
    _25 <- Type.redblacktree_node_Node_key ( * node_20);
    _24 <- _25;
    assume { Resolve6.resolve _25 };
    _22 <- Cmp0.cmp _23 _24;
    goto BB17
  }
  BB5 {
    assume { Resolve2.resolve self_1 };
    assume { Resolve3.resolve key_2 };
    assume { Resolve4.resolve val'_3 };
    assume { Resolve5.resolve _7 };
    absurd
  }
  BB6 {
    assume { Resolve5.resolve _7 };
    _14 <- Type.Core_Option_Option_None;
    _13 <- Type.RedBlackTree_Tree _14;
    goto BB7
  }
  BB7 {
    _15 <- Type.RedBlackTree_Color_Red;
    assume { Resolve3.resolve _16 };
    _16 <- key_2;
    assume { Resolve4.resolve _17 };
    _17 <- val'_3;
    _19 <- Type.Core_Option_Option_None;
    _18 <- Type.RedBlackTree_Tree _19;
    goto BB8
  }
  BB8 {
    _12 <- Type.RedBlackTree_Node _13 _15 _16 _17 _18;
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    _11 <- _12;
    goto BB13
  }
  BB13 {
    _10 <- Type.Core_Option_Option_Some _11;
    goto BB14
  }
  BB14 {
    assume { Resolve8.resolve (Type.redblacktree_tree_Tree_node ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree _10) };
    goto BB15
  }
  BB15 {
    assume { Resolve2.resolve self_1 };
    goto BB16
  }
  BB16 {
    _0 <- ();
    goto BB29
  }
  BB17 {
    switch (_22)
      | Type.Core_Cmp_Ordering_Less -> goto BB20
      | Type.Core_Cmp_Ordering_Equal -> goto BB22
      | Type.Core_Cmp_Ordering_Greater -> goto BB18
      end
  }
  BB18 {
    _32 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_20));
    node_20 <- { node_20 with current = (let Type.RedBlackTree_Node a b c d e =  * node_20 in Type.RedBlackTree_Node a b c d ( ^ _32)) };
    assume { Resolve3.resolve _33 };
    _33 <- key_2;
    assume { Resolve4.resolve _34 };
    _34 <- val'_3;
    _21 <- insert_rec _32 _33 _34;
    goto BB25
  }
  BB19 {
    assume { Resolve3.resolve key_2 };
    assume { Resolve4.resolve val'_3 };
    assume { Resolve7.resolve node_20 };
    absurd
  }
  BB20 {
    _27 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_20));
    node_20 <- { node_20 with current = (let Type.RedBlackTree_Node a b c d e =  * node_20 in Type.RedBlackTree_Node ( ^ _27) b c d e) };
    assume { Resolve3.resolve _28 };
    _28 <- key_2;
    assume { Resolve4.resolve _29 };
    _29 <- val'_3;
    _21 <- insert_rec _27 _28 _29;
    goto BB21
  }
  BB21 {
    goto BB26
  }
  BB22 {
    assume { Resolve4.resolve _31 };
    _31 <- val'_3;
    assume { Resolve4.resolve (Type.redblacktree_node_Node_val ( * node_20)) };
    node_20 <- { node_20 with current = (let Type.RedBlackTree_Node a b c d e =  * node_20 in Type.RedBlackTree_Node a b c _31 e) };
    goto BB23
  }
  BB23 {
    assume { Resolve7.resolve node_20 };
    goto BB24
  }
  BB24 {
    _0 <- ();
    goto BB29
  }
  BB25 {
    goto BB26
  }
  BB26 {
    _36 <- borrow_mut ( * node_20);
    node_20 <- { node_20 with current = ( ^ _36) };
    _35 <- Balance0.balance _36;
    goto BB27
  }
  BB27 {
    assume { Resolve7.resolve node_20 };
    _0 <- ();
    goto BB28
  }
  BB28 {
    goto BB31
  }
  BB29 {
    goto BB30
  }
  BB30 {
    goto BB31
  }
  BB31 {
    return _0
  }
  
end
module RedBlackTree_Impl13_Insert_Interface
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Invariant_Interface as Invariant0 with type k = k, type v = v
  val insert [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {Invariant0.invariant' ( * self)}
    ensures { Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_Some val') }
    ensures { Invariant0.invariant' ( ^ self) }
    
end
module RedBlackTree_Impl13_Insert
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model2 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl10_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_tree k v
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_tree k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = Type.redblacktree_tree k v,
  function Model0.model = Model2.model
  clone RedBlackTree_Impl13_InsertRec_Interface as InsertRec0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasHeight0.has_height = HasHeight0.has_height, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Color0.color = Color0.color, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg insert [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {Invariant0.invariant' ( * self)}
    ensures { Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_Some val') }
    ensures { Invariant0.invariant' ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var val'_3 : v;
  var old_self_4 : Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_tree k v);
  var _5 : Type.redblacktree_tree k v;
  var _6 : Type.redblacktree_tree k v;
  var _7 : ();
  var _8 : borrowed (Type.redblacktree_tree k v);
  var _9 : k;
  var _10 : v;
  var _11 : Type.redblacktree_color;
  var _12 : borrowed (Type.redblacktree_node k v);
  var _13 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _14 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _15 : ();
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _6 <-  * self_1;
    _5 <- _6;
    assume { Resolve0.resolve _6 };
    old_self_4 <- Record0.record _5;
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve old_self_4 };
    _8 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _8) };
    assume { Resolve2.resolve _9 };
    _9 <- key_2;
    assume { Resolve3.resolve _10 };
    _10 <- val'_3;
    _7 <- InsertRec0.insert_rec _8 _9 _10;
    goto BB3
  }
  BB3 {
    _11 <- Type.RedBlackTree_Color_Black;
    _14 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _14)) };
    _13 <- AsMut0.as_mut _14;
    goto BB4
  }
  BB4 {
    assume { Resolve4.resolve self_1 };
    _12 <- Unwrap0.unwrap _13;
    goto BB5
  }
  BB5 {
    _12 <- { _12 with current = (let Type.RedBlackTree_Node a b c d e =  * _12 in Type.RedBlackTree_Node a _11 c d e) };
    assume { Resolve5.resolve _12 };
    assert { forall h : (int) . HasHeight0.has_height (Model2.model old_self_4) h -> HasHeight0.has_height ( * self_1) h || HasHeight0.has_height ( * self_1) (h + 1) };
    _15 <- ();
    assert { let _ = HasMappingModel0.has_mapping_model ( * self_1) (Model1.model key_2) val'_3 in true };
    goto BB6
  }
  BB6 {
    _0 <- ();
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) = 
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t1
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve0 with type t1 = t1, type t2 = t2,
  predicate Resolve0.resolve = Resolve2.resolve, predicate Resolve1.resolve = Resolve3.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = (t1, t2),
  predicate resolve = Resolve0.resolve
end
module RedBlackTree_Impl13_DeleteMinRec_Interface
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  val delete_min_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) : (k, v)
    requires {exists h : (int) . HasHeight0.has_height ( * self) h}
    requires {exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( * self) = Type.Core_Option_Option_Some node && (Type.redblacktree_node_Node_color node = Type.RedBlackTree_Color_Red || Color0.color (Type.redblacktree_node_Node_left node) = Type.RedBlackTree_Color_Red)}
    requires {ColorInvariant0.color_invariant ( * self)}
    requires {BstInvariant0.bst_invariant ( * self)}
    ensures { Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    ensures { ColorInvariant0.color_invariant ( ^ self) }
    ensures { forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v -> Model0.model (let (a, _) = result in a) <> k && HasMapping0.has_mapping ( * self) k v }
    ensures { forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> Model0.model (let (a, _) = result in a) = k || HasMapping0.has_mapping ( ^ self) k v }
    ensures { forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log (Model0.model (let (a, _) = result in a)) k }
    ensures { HasMapping0.has_mapping ( * self) (Model0.model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { BstInvariant0.bst_invariant ( ^ self) }
    
end
module RedBlackTree_Impl13_DeleteMinRec
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model1 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve9 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone Core_Mem_Replace_Interface as Replace0 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve5 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve7.resolve, predicate Resolve1.resolve = Resolve8.resolve
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_tree k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_tree k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = Type.redblacktree_tree k v,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl12_Balance_Interface as Balance0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate ColorInvariant1.color_invariant = ColorInvariant1.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl12_MoveRedLeft_Interface as MoveRedLeft0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  predicate ColorInvariant1.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg delete_min_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) : (k, v)
    requires {exists h : (int) . HasHeight0.has_height ( * self) h}
    requires {exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( * self) = Type.Core_Option_Option_Some node && (Type.redblacktree_node_Node_color node = Type.RedBlackTree_Color_Red || Color0.color (Type.redblacktree_node_Node_left node) = Type.RedBlackTree_Color_Red)}
    requires {ColorInvariant0.color_invariant ( * self)}
    requires {BstInvariant0.bst_invariant ( * self)}
    ensures { Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    ensures { ColorInvariant0.color_invariant ( ^ self) }
    ensures { forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v -> Model0.model (let (a, _) = result in a) <> k && HasMapping0.has_mapping ( * self) k v }
    ensures { forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> Model0.model (let (a, _) = result in a) = k || HasMapping0.has_mapping ( ^ self) k v }
    ensures { forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log (Model0.model (let (a, _) = result in a)) k }
    ensures { HasMapping0.has_mapping ( * self) (Model0.model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { BstInvariant0.bst_invariant ( ^ self) }
    
   = 
  var _0 : (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var old_self_2 : Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_tree k v);
  var _3 : Type.redblacktree_tree k v;
  var _4 : Type.redblacktree_tree k v;
  var node_5 : borrowed (Type.redblacktree_node k v);
  var _6 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _7 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _8 : ();
  var _9 : isize;
  var node_10 : Type.redblacktree_node k v;
  var _11 : Type.core_option_option (Type.redblacktree_node k v);
  var _12 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _13 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _14 : Type.core_option_option (Type.redblacktree_node k v);
  var _15 : ();
  var _16 : k;
  var _17 : v;
  var _18 : ();
  var _19 : bool;
  var _20 : bool;
  var _21 : bool;
  var _22 : Type.redblacktree_tree k v;
  var _23 : bool;
  var _24 : bool;
  var _25 : Type.redblacktree_tree k v;
  var _26 : Type.redblacktree_node k v;
  var _27 : Type.core_option_option (Type.redblacktree_node k v);
  var _28 : Type.core_option_option (Type.redblacktree_node k v);
  var _29 : ();
  var _30 : borrowed (Type.redblacktree_node k v);
  var _31 : ();
  var r_32 : (k, v);
  var _33 : borrowed (Type.redblacktree_tree k v);
  var _34 : ();
  var _35 : ();
  var _36 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <-  * self_1;
    _3 <- _4;
    assume { Resolve0.resolve _4 };
    old_self_2 <- Record0.record _3;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_self_2 };
    _7 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _7)) };
    _6 <- AsMut0.as_mut _7;
    goto BB2
  }
  BB2 {
    node_5 <- Unwrap0.unwrap _6;
    goto BB3
  }
  BB3 {
    switch (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_5)))
      | Type.Core_Option_Option_None -> goto BB4
      | _ -> goto BB9
      end
  }
  BB4 {
    assume { Resolve4.resolve node_5 };
    _13 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _13)) };
    assume { Resolve2.resolve self_1 };
    _12 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _12) };
    _14 <- Type.Core_Option_Option_None;
    _11 <- Replace0.replace _12 _14;
    goto BB5
  }
  BB5 {
    assume { Resolve6.resolve _13 };
    node_10 <- Unwrap2.unwrap _11;
    goto BB6
  }
  BB6 {
    assume { Resolve7.resolve _16 };
    _16 <- Type.redblacktree_node_Node_key node_10;
    assume { Resolve8.resolve _17 };
    _17 <- Type.redblacktree_node_Node_val node_10;
    _0 <- (_16, _17);
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB24
  }
  BB9 {
    assume { Resolve2.resolve self_1 };
    _8 <- ();
    _22 <- Type.redblacktree_node_Node_left ( * node_5);
    _21 <- IsRed0.is_red _22;
    goto BB13
  }
  BB10 {
    _19 <- false;
    goto BB12
  }
  BB11 {
    _28 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_5));
    _27 <- AsRef0.as_ref _28;
    goto BB14
  }
  BB12 {
    switch (_19)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB13 {
    _20 <- not _21;
    switch (_20)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB14 {
    _26 <- Unwrap1.unwrap _27;
    goto BB15
  }
  BB15 {
    _25 <- Type.redblacktree_node_Node_left _26;
    assume { Resolve3.resolve _26 };
    _24 <- IsRed0.is_red _25;
    goto BB16
  }
  BB16 {
    _23 <- not _24;
    _19 <- _23;
    goto BB12
  }
  BB17 {
    _30 <- borrow_mut ( * node_5);
    node_5 <- { node_5 with current = ( ^ _30) };
    _29 <- MoveRedLeft0.move_red_left _30;
    goto BB18
  }
  BB18 {
    _18 <- ();
    goto BB20
  }
  BB19 {
    _18 <- ();
    goto BB20
  }
  BB20 {
    assert { forall h : (int) . HasHeight0.has_height (Model1.model old_self_2) h -> HasHeight1.has_height ( * node_5) h };
    _31 <- ();
    _33 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_5));
    node_5 <- { node_5 with current = (let Type.RedBlackTree_Node a b c d e =  * node_5 in Type.RedBlackTree_Node ( ^ _33) b c d e) };
    r_32 <- delete_min_rec _33;
    goto BB21
  }
  BB21 {
    assert { forall h : (int) . HasHeight0.has_height (Model1.model old_self_2) h -> HasHeight1.has_height ( * node_5) h };
    _34 <- ();
    _36 <- borrow_mut ( * node_5);
    node_5 <- { node_5 with current = ( ^ _36) };
    _35 <- Balance0.balance _36;
    goto BB22
  }
  BB22 {
    assume { Resolve4.resolve node_5 };
    assume { Resolve5.resolve _0 };
    _0 <- r_32;
    goto BB23
  }
  BB23 {
    goto BB25
  }
  BB24 {
    assume { Resolve9.resolve node_10 };
    goto BB25
  }
  BB25 {
    return _0
  }
  
end
module RedBlackTree_Impl13_DeleteMin_Interface
  type k
  type v
  use Type
  use map.Map
  use map.Const
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Invariant_Interface as Invariant0 with type k = k, type v = v
  val delete_min [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) : Type.core_option_option (k, v)
    requires {Invariant0.invariant' ( * self)}
    ensures { forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Map.get (Model0.model ( * self)) (Model1.model k) = Type.Core_Option_Option_Some v && (forall k2 : (ModelTy0.modelTy) . Map.get (Model0.model ( * self)) k2 = Type.Core_Option_Option_None || LeLog0.le_log (Model1.model k) k2) && Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model k) (Type.Core_Option_Option_None) }
    ensures { result = Type.Core_Option_Option_None -> Model0.model ( ^ self) = Model0.model ( * self) && Model0.model ( * self) = Const.const (Type.Core_Option_Option_None) }
    ensures { Invariant0.invariant' ( ^ self) }
    
end
module RedBlackTree_Impl13_DeleteMin
  type k
  type v
  use Type
  use map.Map
  use map.Const
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model2 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl10_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve5 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve6.resolve, predicate Resolve1.resolve = Resolve7.resolve
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_tree k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = Type.redblacktree_tree k v,
  function Model0.model = Model2.model
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl13_DeleteMinRec_Interface as DeleteMinRec0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Color0.color = Color0.color,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model1.model,
  predicate LeLog0.le_log = LeLog0.le_log, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg delete_min [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) : Type.core_option_option (k, v)
    requires {Invariant0.invariant' ( * self)}
    ensures { forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Map.get (Model0.model ( * self)) (Model1.model k) = Type.Core_Option_Option_Some v && (forall k2 : (ModelTy0.modelTy) . Map.get (Model0.model ( * self)) k2 = Type.Core_Option_Option_None || LeLog0.le_log (Model1.model k) k2) && Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model k) (Type.Core_Option_Option_None) }
    ensures { result = Type.Core_Option_Option_None -> Model0.model ( ^ self) = Model0.model ( * self) && Model0.model ( * self) = Const.const (Type.Core_Option_Option_None) }
    ensures { Invariant0.invariant' ( ^ self) }
    
   = 
  var _0 : Type.core_option_option (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var old_self_2 : Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_tree k v);
  var _3 : Type.redblacktree_tree k v;
  var _4 : Type.redblacktree_tree k v;
  var _5 : ();
  var _6 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _7 : isize;
  var _8 : ();
  var node_9 : borrowed (Type.redblacktree_node k v);
  var _10 : bool;
  var _11 : bool;
  var _12 : bool;
  var _13 : Type.redblacktree_tree k v;
  var _14 : bool;
  var _15 : bool;
  var _16 : Type.redblacktree_tree k v;
  var _17 : Type.redblacktree_color;
  var _18 : ();
  var r_19 : (k, v);
  var _20 : borrowed (Type.redblacktree_tree k v);
  var _21 : ();
  var _22 : bool;
  var _23 : Type.redblacktree_tree k v;
  var _24 : Type.redblacktree_color;
  var _25 : borrowed (Type.redblacktree_node k v);
  var _26 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _27 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _28 : ();
  var _29 : ();
  var _30 : (k, v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <-  * self_1;
    _3 <- _4;
    assume { Resolve0.resolve _4 };
    old_self_2 <- Record0.record _3;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_self_2 };
    _6 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _6)) };
    switch ( * _6)
      | Type.Core_Option_Option_None -> goto BB4
      | Type.Core_Option_Option_Some _ -> goto BB2
      end
  }
  BB2 {
    node_9 <- borrow_mut (Type.core_option_option_Some_0 ( * _6));
    _6 <- { _6 with current = (let Type.Core_Option_Option_Some a =  * _6 in Type.Core_Option_Option_Some ( ^ node_9)) };
    assume { Resolve3.resolve _6 };
    _13 <- Type.redblacktree_node_Node_left ( * node_9);
    _12 <- IsRed0.is_red _13;
    goto BB8
  }
  BB3 {
    assume { Resolve2.resolve self_1 };
    assume { Resolve3.resolve _6 };
    absurd
  }
  BB4 {
    assume { Resolve2.resolve self_1 };
    assume { Resolve3.resolve _6 };
    _0 <- Type.Core_Option_Option_None;
    goto BB23
  }
  BB5 {
    _10 <- false;
    goto BB7
  }
  BB6 {
    _16 <- Type.redblacktree_node_Node_right ( * node_9);
    _15 <- IsRed0.is_red _16;
    goto BB9
  }
  BB7 {
    switch (_10)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB8 {
    _11 <- not _12;
    switch (_11)
      | False -> goto BB5
      | _ -> goto BB6
      end
  }
  BB9 {
    _14 <- not _15;
    _10 <- _14;
    goto BB7
  }
  BB10 {
    _17 <- Type.RedBlackTree_Color_Red;
    node_9 <- { node_9 with current = (let Type.RedBlackTree_Node a b c d e =  * node_9 in Type.RedBlackTree_Node a _17 c d e) };
    assume { Resolve4.resolve node_9 };
    _5 <- ();
    goto BB12
  }
  BB11 {
    assume { Resolve4.resolve node_9 };
    _5 <- ();
    goto BB12
  }
  BB12 {
    assert { forall h : (int) . HasHeight0.has_height (Model2.model old_self_2) h -> Color0.color ( * self_1) = Type.RedBlackTree_Color_Black || HasHeight0.has_height ( * self_1) (h - 1) };
    _18 <- ();
    _20 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _20) };
    r_19 <- DeleteMinRec0.delete_min_rec _20;
    goto BB13
  }
  BB13 {
    _23 <-  * self_1;
    _22 <- IsRed0.is_red _23;
    goto BB14
  }
  BB14 {
    switch (_22)
      | False -> goto BB18
      | _ -> goto BB15
      end
  }
  BB15 {
    _24 <- Type.RedBlackTree_Color_Black;
    _27 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _27)) };
    _26 <- AsMut0.as_mut _27;
    goto BB16
  }
  BB16 {
    assume { Resolve2.resolve self_1 };
    _25 <- Unwrap0.unwrap _26;
    goto BB17
  }
  BB17 {
    _25 <- { _25 with current = (let Type.RedBlackTree_Node a b c d e =  * _25 in Type.RedBlackTree_Node a _24 c d e) };
    assume { Resolve4.resolve _25 };
    _21 <- ();
    goto BB19
  }
  BB18 {
    assume { Resolve2.resolve self_1 };
    _21 <- ();
    goto BB19
  }
  BB19 {
    assert { forall h : (int) . HasHeight0.has_height (Model2.model old_self_2) h -> HasHeight0.has_height ( * self_1) h || HasHeight0.has_height ( * self_1) (h - 1) };
    _28 <- ();
    assert { let _ = HasMappingModel0.has_mapping_model ( * self_1) (Model1.model (let (a, _) = r_19 in a)) (let (_, a) = r_19 in a) in true };
    goto BB20
  }
  BB20 {
    _29 <- ();
    assume { Resolve5.resolve _30 };
    _30 <- r_19;
    _0 <- Type.Core_Option_Option_Some _30;
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    return _0
  }
  
end
module RedBlackTree_Impl13_Get_Interface
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Invariant_Interface as Invariant0 with type k = k, type v = v
  val get [@cfg:stackify] (self : Type.redblacktree_tree k v) (key : k) : Type.core_option_option v
    requires {Invariant0.invariant' self}
    ensures { result = Type.Core_Option_Option_None -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_None }
    ensures { forall v : (v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_Some v }
    
end
module RedBlackTree_Impl13_Get
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl10_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  use mach.int.Int
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model1.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg get [@cfg:stackify] (self : Type.redblacktree_tree k v) (key : k) : Type.core_option_option v
    requires {Invariant0.invariant' self}
    ensures { result = Type.Core_Option_Option_None -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_None }
    ensures { forall v : (v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_Some v }
    
   = 
  var _0 : Type.core_option_option v;
  var self_1 : Type.redblacktree_tree k v;
  var key_2 : k;
  var _3 : ();
  var tree_4 : Type.redblacktree_tree k v;
  var _5 : ();
  var _6 : ();
  var _7 : Type.core_option_option (Type.redblacktree_node k v);
  var _8 : isize;
  var node_9 : Type.redblacktree_node k v;
  var _10 : Type.core_cmp_ordering;
  var _11 : k;
  var _12 : k;
  var _13 : k;
  var _14 : int8;
  var _15 : Type.redblacktree_tree k v;
  var _16 : Type.redblacktree_tree k v;
  var _17 : ();
  var _18 : v;
  var _19 : v;
  var _20 : Type.redblacktree_tree k v;
  var _21 : Type.redblacktree_tree k v;
  var _22 : ();
  var _23 : ();
  var _24 : ();
  var _25 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    assert { forall v : (v) . let _ = HasMappingModel0.has_mapping_model self_1 (Model1.model key_2) v in true };
    _3 <- ();
    assume { Resolve0.resolve tree_4 };
    tree_4 <- self_1;
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  BB1 {
    invariant bst_inv { BstInvariant0.bst_invariant tree_4 };
    invariant has_mapping { forall v : (v) . HasMapping0.has_mapping self_1 (Model1.model key_2) v = HasMapping0.has_mapping tree_4 (Model1.model key_2) v };
    _7 <- Type.redblacktree_tree_Tree_node tree_4;
    assume { Resolve0.resolve tree_4 };
    switch (_7)
      | Type.Core_Option_Option_Some _ -> goto BB2
      | _ -> goto BB9
      end
  }
  BB2 {
    node_9 <- Type.core_option_option_Some_0 _7;
    assume { Resolve2.resolve _7 };
    _11 <- key_2;
    _13 <- Type.redblacktree_node_Node_key node_9;
    _12 <- _13;
    assume { Resolve1.resolve _13 };
    _10 <- Cmp0.cmp _11 _12;
    goto BB3
  }
  BB3 {
    switch (_10)
      | Type.Core_Cmp_Ordering_Less -> goto BB6
      | Type.Core_Cmp_Ordering_Equal -> goto BB7
      | Type.Core_Cmp_Ordering_Greater -> goto BB4
      end
  }
  BB4 {
    _21 <- Type.redblacktree_node_Node_right node_9;
    assume { Resolve3.resolve node_9 };
    _20 <- _21;
    assume { Resolve0.resolve _21 };
    assume { Resolve0.resolve tree_4 };
    tree_4 <- _20;
    _6 <- ();
    goto BB8
  }
  BB5 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve3.resolve node_9 };
    absurd
  }
  BB6 {
    _16 <- Type.redblacktree_node_Node_left node_9;
    assume { Resolve3.resolve node_9 };
    _15 <- _16;
    assume { Resolve0.resolve _16 };
    assume { Resolve0.resolve tree_4 };
    tree_4 <- _15;
    _6 <- ();
    goto BB8
  }
  BB7 {
    assume { Resolve1.resolve key_2 };
    _19 <- Type.redblacktree_node_Node_val node_9;
    assume { Resolve3.resolve node_9 };
    _18 <- _19;
    assume { Resolve4.resolve _19 };
    _0 <- Type.Core_Option_Option_Some _18;
    goto BB10
  }
  BB8 {
    goto BB1
  }
  BB9 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _7 };
    _5 <- ();
    _0 <- Type.Core_Option_Option_None;
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module RedBlackTree_Impl13_GetMut_Interface
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model2 with type t = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Invariant_Interface as Invariant0 with type k = k, type v = v
  val get_mut [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (borrowed v)
    requires {Invariant0.invariant' ( * self)}
    ensures { result = Type.Core_Option_Option_None -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None && Map.get (Model0.model ( ^ self)) (Model1.model key) = Type.Core_Option_Option_None }
    ensures { forall v : (borrowed v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some ( * v) && Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model2.model key) (Type.Core_Option_Option_Some ( ^ v)) }
    ensures { Invariant0.invariant' ( ^ self) }
    
end
module RedBlackTree_Impl13_GetMut
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  use mach.int.Int
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl10_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_tree k v
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model1.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg get_mut [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (borrowed v)
    requires {Invariant0.invariant' ( * self)}
    ensures { result = Type.Core_Option_Option_None -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None && Map.get (Model0.model ( ^ self)) (Model1.model key) = Type.Core_Option_Option_None }
    ensures { forall v : (borrowed v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some ( * v) && Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model2.model key) (Type.Core_Option_Option_Some ( ^ v)) }
    ensures { Invariant0.invariant' ( ^ self) }
    
   = 
  var _0 : Type.core_option_option (borrowed v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var _3 : ();
  var tree_4 : borrowed (Type.redblacktree_tree k v);
  var _5 : ();
  var _6 : ();
  var _7 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _8 : isize;
  var node_9 : borrowed (Type.redblacktree_node k v);
  var _10 : Type.core_cmp_ordering;
  var _11 : k;
  var _12 : k;
  var _13 : k;
  var _14 : int8;
  var _15 : borrowed (Type.redblacktree_tree k v);
  var _16 : borrowed (Type.redblacktree_tree k v);
  var _17 : ();
  var _18 : borrowed v;
  var _19 : borrowed v;
  var _20 : borrowed (Type.redblacktree_tree k v);
  var _21 : borrowed (Type.redblacktree_tree k v);
  var _22 : ();
  var _23 : ();
  var _24 : ();
  var _25 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    assert { forall v : (v) . let _ = HasMappingModel0.has_mapping_model ( * self_1) (Model1.model key_2) v in true };
    _3 <- ();
    assume { Resolve0.resolve tree_4 };
    tree_4 <- self_1;
    goto BB1
  }
  BB1 {
    invariant bst_inv { BstInvariant0.bst_invariant ( * tree_4) };
    invariant color_inv { ColorInvariant0.color_invariant ( * tree_4) };
    invariant mapping_prof_key { forall v : (v) . HasMapping0.has_mapping ( ^ tree_4) (Model2.model key_2) v = HasMapping0.has_mapping ( ^ self_1) (Model2.model key_2) v };
    invariant mapping_cur_key { forall v : (v) . HasMapping0.has_mapping ( * tree_4) (Model2.model key_2) v = HasMapping0.has_mapping ( * self_1) (Model2.model key_2) v };
    invariant bst_inv_proph { (forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model2.model key_2 || HasMapping0.has_mapping ( * tree_4) k v = HasMapping0.has_mapping ( ^ tree_4) k v) -> BstInvariant0.bst_invariant ( ^ tree_4) -> BstInvariant0.bst_invariant ( ^ self_1) };
    invariant color_inv_proph { ColorInvariant0.color_invariant ( ^ tree_4) && Color0.color ( ^ tree_4) = Color0.color ( * tree_4) -> ColorInvariant0.color_invariant ( ^ self_1) };
    invariant color_proph { Color0.color ( ^ tree_4) = Color0.color ( * tree_4) -> Color0.color ( ^ self_1) = Color0.color ( * self_1) };
    invariant mapping_proph { forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * tree_4) k v = HasMapping0.has_mapping ( ^ tree_4) k v -> HasMapping0.has_mapping ( * self_1) k v = HasMapping0.has_mapping ( ^ self_1) k v };
    invariant height { Color0.color ( ^ tree_4) = Color0.color ( * tree_4) && (forall h : (int) . HasHeight0.has_height ( * tree_4) h -> HasHeight0.has_height ( ^ tree_4) h) -> (forall h : (int) . HasHeight0.has_height ( * self_1) h -> HasHeight0.has_height ( ^ self_1) h) };
    _7 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * tree_4));
    tree_4 <- { tree_4 with current = (let Type.RedBlackTree_Tree a =  * tree_4 in Type.RedBlackTree_Tree ( ^ _7)) };
    assume { Resolve0.resolve tree_4 };
    switch ( * _7)
      | Type.Core_Option_Option_Some _ -> goto BB2
      | _ -> goto BB9
      end
  }
  BB2 {
    node_9 <- borrow_mut (Type.core_option_option_Some_0 ( * _7));
    _7 <- { _7 with current = (let Type.Core_Option_Option_Some a =  * _7 in Type.Core_Option_Option_Some ( ^ node_9)) };
    assume { Resolve2.resolve _7 };
    _11 <- key_2;
    _13 <- Type.redblacktree_node_Node_key ( * node_9);
    _12 <- _13;
    assume { Resolve1.resolve _13 };
    _10 <- Cmp0.cmp _11 _12;
    goto BB3
  }
  BB3 {
    switch (_10)
      | Type.Core_Cmp_Ordering_Less -> goto BB6
      | Type.Core_Cmp_Ordering_Equal -> goto BB7
      | Type.Core_Cmp_Ordering_Greater -> goto BB4
      end
  }
  BB4 {
    _21 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_9));
    node_9 <- { node_9 with current = (let Type.RedBlackTree_Node a b c d e =  * node_9 in Type.RedBlackTree_Node a b c d ( ^ _21)) };
    assume { Resolve3.resolve node_9 };
    _20 <- borrow_mut ( * _21);
    _21 <- { _21 with current = ( ^ _20) };
    assume { Resolve0.resolve _21 };
    assume { Resolve0.resolve tree_4 };
    tree_4 <- _20;
    _6 <- ();
    goto BB8
  }
  BB5 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve3.resolve node_9 };
    absurd
  }
  BB6 {
    _16 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_9));
    node_9 <- { node_9 with current = (let Type.RedBlackTree_Node a b c d e =  * node_9 in Type.RedBlackTree_Node ( ^ _16) b c d e) };
    assume { Resolve3.resolve node_9 };
    _15 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ _15) };
    assume { Resolve0.resolve _16 };
    assume { Resolve0.resolve tree_4 };
    tree_4 <- _15;
    _6 <- ();
    goto BB8
  }
  BB7 {
    assume { Resolve1.resolve key_2 };
    _19 <- borrow_mut (Type.redblacktree_node_Node_val ( * node_9));
    node_9 <- { node_9 with current = (let Type.RedBlackTree_Node a b c d e =  * node_9 in Type.RedBlackTree_Node a b c ( ^ _19) e) };
    assume { Resolve3.resolve node_9 };
    _18 <- borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    _0 <- Type.Core_Option_Option_Some _18;
    assume { Resolve4.resolve _19 };
    goto BB10
  }
  BB8 {
    goto BB1
  }
  BB9 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _7 };
    _5 <- ();
    _0 <- Type.Core_Option_Option_None;
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module RedBlackTree_Impl14
  use Type
  clone RedBlackTree_Impl14_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.redblacktree_color, val clone' = Clone0.clone'
end
module RedBlackTree_Impl15
  
end
module RedBlackTree_Impl2_ModelTy
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  type modelTy  = 
    Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl2
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model3 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model3.model
  clone RedBlackTree_Impl3_Model as Model2 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl2_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model, function Model1.model = Model3.model,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl2_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.redblacktree_node k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.redblacktree_node k v,
  type modelTy = ModelTy0.modelTy
end
