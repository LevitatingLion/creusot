module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type derivemacros_product 'a 'b =
    | DeriveMacros_Product 'a 'b
    
  let function derivemacros_product_Product_a (self : derivemacros_product 'a 'b) : 'a =
    match (self) with
      | DeriveMacros_Product a _ -> a
      end
  let function derivemacros_product_Product_b (self : derivemacros_product 'a 'b) : 'b =
    match (self) with
      | DeriveMacros_Product _ a -> a
      end
  type derivemacros_sum 'a 'b =
    | DeriveMacros_Sum_A1 'a
    | DeriveMacros_Sum_B1 'b
    
  let function derivemacros_sum_B_0 (self : derivemacros_sum 'a 'b) : 'b =
    match (self) with
      | DeriveMacros_Sum_A1 _ -> any 'b
      | DeriveMacros_Sum_B1 a -> a
      end
  let function derivemacros_sum_A_0 (self : derivemacros_sum 'a 'b) : 'a =
    match (self) with
      | DeriveMacros_Sum_A1 a -> a
      | DeriveMacros_Sum_B1 _ -> any 'a
      end
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module DeriveMacros_Impl2_Clone_Interface
  type a
  type b
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.derivemacros_product a b) : Type.derivemacros_product a b
    ensures { [#"../derive_macros.rs" 7 9 7 14] result = self }
    
end
module DeriveMacros_Impl2_Clone
  type a
  type b
  use prelude.Prelude
  use Type
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = b
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.derivemacros_product a b
  clone Core_Clone_Clone_Clone_Interface as Clone0 with type self = a
  let rec cfg clone' [@cfg:stackify] [#"../derive_macros.rs" 7 9 7 14] (self : Type.derivemacros_product a b) : Type.derivemacros_product a b
    ensures { [#"../derive_macros.rs" 7 9 7 14] result = self }
    
   =
  var _0 : Type.derivemacros_product a b;
  var self_1 : Type.derivemacros_product a b;
  var _2 : a;
  var _3 : a;
  var _4 : b;
  var _5 : b;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Type.derivemacros_product_Product_a self_1;
    _2 <- ([#"../derive_macros.rs" 9 4 9 8] Clone0.clone' _3);
    goto BB1
  }
  BB1 {
    _5 <- Type.derivemacros_product_Product_b self_1;
    assume { Resolve0.resolve self_1 };
    _4 <- ([#"../derive_macros.rs" 10 4 10 8] Clone1.clone' _5);
    goto BB2
  }
  BB2 {
    _0 <- Type.DeriveMacros_Product _2 _4;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module DeriveMacros_Impl0_ModelTy
  type a
  type b
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = b
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = a
  type modelTy  =
    Type.derivemacros_product ModelTy0.modelTy ModelTy1.modelTy
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module DeriveMacros_Impl0_Model_Interface
  type a
  type b
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = b
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = a
  function model (self : Type.derivemacros_product a b) : Type.derivemacros_product ModelTy0.modelTy ModelTy1.modelTy
end
module DeriveMacros_Impl0_Model
  type a
  type b
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = b
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = a
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = b,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model [#"../derive_macros.rs" 21 4 21 35] (self : Type.derivemacros_product a b) : Type.derivemacros_product ModelTy0.modelTy ModelTy1.modelTy
    
   =
    [#"../derive_macros.rs" 22 8 22 56] Type.DeriveMacros_Product (Model0.model (Type.derivemacros_product_Product_a self)) (Model1.model (Type.derivemacros_product_Product_b self))
end
module DeriveMacros_Impl0
  type a
  type b
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy3 with type self = b
  clone CreusotContracts_Logic_Model_Model_Model as Model3 with type self = b, type ModelTy0.modelTy = ModelTy3.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = a
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = a, type ModelTy0.modelTy = ModelTy2.modelTy
  clone DeriveMacros_Impl0_ModelTy as ModelTy0 with type a = a, type b = b, type ModelTy0.modelTy = ModelTy2.modelTy,
  type ModelTy1.modelTy = ModelTy3.modelTy
  clone DeriveMacros_Impl0_Model as Model0 with type a = a, type b = b, type ModelTy0.modelTy = ModelTy2.modelTy,
  type ModelTy1.modelTy = ModelTy3.modelTy, function Model0.model = Model2.model, function Model1.model = Model3.model
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.derivemacros_product a b,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.derivemacros_product a b,
  type modelTy = ModelTy0.modelTy
end
module Core_Cmp_PartialEq_Eq_Interface
  type self
  type rhs
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = rhs,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module Core_Cmp_PartialEq_Eq
  type self
  type rhs
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = rhs,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module DeriveMacros_Impl3_Eq_Interface
  type a
  type b
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = b
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = a
  clone DeriveMacros_Impl0_ModelTy as ModelTy0 with type a = a, type b = b, type ModelTy0.modelTy = ModelTy1.modelTy,
  type ModelTy1.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.derivemacros_product a b,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Type.derivemacros_product a b) (rhs : Type.derivemacros_product a b) : bool
    ensures { [#"../derive_macros.rs" 7 16 7 25] result = (Model0.model self = Model0.model rhs) }
    
end
module DeriveMacros_Impl3_Eq
  type a
  type b
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = b
  clone CreusotContracts_Logic_Model_Model_Model as Model3 with type self = b, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = a
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = a, type ModelTy0.modelTy = ModelTy1.modelTy
  clone DeriveMacros_Impl0_Model as Model1 with type a = a, type b = b, type ModelTy0.modelTy = ModelTy1.modelTy,
  type ModelTy1.modelTy = ModelTy2.modelTy, function Model0.model = Model2.model, function Model1.model = Model3.model
  clone DeriveMacros_Impl0_ModelTy as ModelTy0 with type a = a, type b = b, type ModelTy0.modelTy = ModelTy1.modelTy,
  type ModelTy1.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.derivemacros_product a b,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = b, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model3.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = a, type ModelTy0.modelTy = ModelTy1.modelTy,
  function Model0.model = Model2.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = b, type rhs = b, function Model0.model = Model5.model,
  function Model1.model = Model5.model, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = b
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.derivemacros_product a b
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with type self = a, type rhs = a, function Model0.model = Model4.model,
  function Model1.model = Model4.model, type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = a
  let rec cfg eq [@cfg:stackify] [#"../derive_macros.rs" 7 16 7 25] (self : Type.derivemacros_product a b) (rhs : Type.derivemacros_product a b) : bool
    ensures { [#"../derive_macros.rs" 7 16 7 25] result = (Model0.model self = Model0.model rhs) }
    
   =
  var _0 : bool;
  var self_1 : Type.derivemacros_product a b;
  var rhs_2 : Type.derivemacros_product a b;
  var _3 : bool;
  var _4 : a;
  var _5 : a;
  var _6 : a;
  var _7 : bool;
  var _8 : b;
  var _9 : b;
  var _10 : b;
  {
    self_1 <- self;
    rhs_2 <- rhs;
    goto BB0
  }
  BB0 {
    _4 <- Type.derivemacros_product_Product_a self_1;
    _6 <- Type.derivemacros_product_Product_a rhs_2;
    _5 <- _6;
    assume { Resolve0.resolve _6 };
    _3 <- ([#"../derive_macros.rs" 9 4 9 8] Eq0.eq _4 _5);
    goto BB4
  }
  BB1 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve1.resolve rhs_2 };
    _0 <- false;
    goto BB3
  }
  BB2 {
    _8 <- Type.derivemacros_product_Product_b self_1;
    assume { Resolve1.resolve self_1 };
    _10 <- Type.derivemacros_product_Product_b rhs_2;
    assume { Resolve1.resolve rhs_2 };
    _9 <- _10;
    assume { Resolve2.resolve _10 };
    _7 <- ([#"../derive_macros.rs" 10 4 10 8] Eq1.eq _8 _9);
    goto BB5
  }
  BB3 {
    return _0
  }
  BB4 {
    switch (_3)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB5 {
    _0 <- _7;
    goto BB3
  }
  
end
module DeriveMacros_Impl4_Clone_Interface
  type a
  type b
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.derivemacros_sum a b) : Type.derivemacros_sum a b
    ensures { [#"../derive_macros.rs" 26 9 26 14] result = self }
    
end
module DeriveMacros_Impl4_Clone
  type a
  type b
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = a
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = a
  clone Core_Clone_Clone_Clone_Interface as Clone0 with type self = b
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = b
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.derivemacros_sum a b
  let rec cfg clone' [@cfg:stackify] [#"../derive_macros.rs" 26 9 26 14] (self : Type.derivemacros_sum a b) : Type.derivemacros_sum a b
    ensures { [#"../derive_macros.rs" 26 9 26 14] result = self }
    
   =
  var _0 : Type.derivemacros_sum a b;
  var self_1 : Type.derivemacros_sum a b;
  var _2 : isize;
  var v0_1_3 : a;
  var _4 : a;
  var _5 : a;
  var v0_1_6 : b;
  var _7 : b;
  var _8 : b;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Type.DeriveMacros_Sum_A1 _ -> goto BB3
      | Type.DeriveMacros_Sum_B1 _ -> goto BB1
      end
  }
  BB1 {
    v0_1_6 <- Type.derivemacros_sum_B_0 self_1;
    assume { Resolve0.resolve self_1 };
    _8 <- v0_1_6;
    assume { Resolve1.resolve v0_1_6 };
    _7 <- ([#"../derive_macros.rs" 26 9 26 14] Clone0.clone' _8);
    goto BB6
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB3 {
    v0_1_3 <- Type.derivemacros_sum_A_0 self_1;
    assume { Resolve0.resolve self_1 };
    _5 <- v0_1_3;
    assume { Resolve2.resolve v0_1_3 };
    _4 <- ([#"../derive_macros.rs" 26 9 26 14] Clone1.clone' _5);
    goto BB4
  }
  BB4 {
    _0 <- Type.DeriveMacros_Sum_A1 _4;
    goto BB5
  }
  BB5 {
    goto BB8
  }
  BB6 {
    _0 <- Type.DeriveMacros_Sum_B1 _7;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module DeriveMacros_Impl1_ModelTy
  type a
  type b
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = b
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = a
  type modelTy  =
    Type.derivemacros_sum ModelTy0.modelTy ModelTy1.modelTy
end
module DeriveMacros_Impl1_Model_Interface
  type a
  type b
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = b
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = a
  function model (self : Type.derivemacros_sum a b) : Type.derivemacros_sum ModelTy0.modelTy ModelTy1.modelTy
end
module DeriveMacros_Impl1_Model
  type a
  type b
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = b
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = a
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = b,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model [#"../derive_macros.rs" 36 4 36 35] (self : Type.derivemacros_sum a b) : Type.derivemacros_sum ModelTy0.modelTy ModelTy1.modelTy
    
   =
    [#"../derive_macros.rs" 37 8 40 9] match (self) with
      | Type.DeriveMacros_Sum_A1 a -> Type.DeriveMacros_Sum_A1 (Model0.model a)
      | Type.DeriveMacros_Sum_B1 b -> Type.DeriveMacros_Sum_B1 (Model1.model b)
      end
end
module DeriveMacros_Impl1
  type a
  type b
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy3 with type self = b
  clone CreusotContracts_Logic_Model_Model_Model as Model3 with type self = b, type ModelTy0.modelTy = ModelTy3.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = a
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = a, type ModelTy0.modelTy = ModelTy2.modelTy
  clone DeriveMacros_Impl1_ModelTy as ModelTy0 with type a = a, type b = b, type ModelTy0.modelTy = ModelTy2.modelTy,
  type ModelTy1.modelTy = ModelTy3.modelTy
  clone DeriveMacros_Impl1_Model as Model0 with type a = a, type b = b, type ModelTy0.modelTy = ModelTy2.modelTy,
  type ModelTy1.modelTy = ModelTy3.modelTy, function Model0.model = Model2.model, function Model1.model = Model3.model
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.derivemacros_sum a b,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.derivemacros_sum a b,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
end
module DeriveMacros_Impl5_Eq_Interface
  type a
  type b
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = b
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = a
  clone DeriveMacros_Impl1_ModelTy as ModelTy0 with type a = a, type b = b, type ModelTy0.modelTy = ModelTy1.modelTy,
  type ModelTy1.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.derivemacros_sum a b,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Type.derivemacros_sum a b) (rhs : Type.derivemacros_sum a b) : bool
    ensures { [#"../derive_macros.rs" 26 16 26 25] result = (Model0.model self = Model0.model rhs) }
    
end
module DeriveMacros_Impl5_Eq
  type a
  type b
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = b
  clone CreusotContracts_Logic_Model_Model_Model as Model3 with type self = b, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = a
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = a, type ModelTy0.modelTy = ModelTy1.modelTy
  clone DeriveMacros_Impl1_Model as Model1 with type a = a, type b = b, type ModelTy0.modelTy = ModelTy1.modelTy,
  type ModelTy1.modelTy = ModelTy2.modelTy, function Model0.model = Model2.model, function Model1.model = Model3.model
  clone DeriveMacros_Impl1_ModelTy as ModelTy0 with type a = a, type b = b, type ModelTy0.modelTy = ModelTy1.modelTy,
  type ModelTy1.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.derivemacros_sum a b,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = a, type ModelTy0.modelTy = ModelTy1.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = b, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model3.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = a, type rhs = a, function Model0.model = Model5.model,
  function Model1.model = Model5.model, type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = a
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with type self = b, type rhs = b, function Model0.model = Model4.model,
  function Model1.model = Model4.model, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = b
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.derivemacros_sum a b
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve1 with type t1 = Type.derivemacros_sum a b,
  type t2 = Type.derivemacros_sum a b, predicate Resolve0.resolve = Resolve0.resolve,
  predicate Resolve1.resolve = Resolve0.resolve
  let rec cfg eq [@cfg:stackify] [#"../derive_macros.rs" 26 16 26 25] (self : Type.derivemacros_sum a b) (rhs : Type.derivemacros_sum a b) : bool
    ensures { [#"../derive_macros.rs" 26 16 26 25] result = (Model0.model self = Model0.model rhs) }
    
   =
  var _0 : bool;
  var self_1 : Type.derivemacros_sum a b;
  var rhs_2 : Type.derivemacros_sum a b;
  var _3 : (Type.derivemacros_sum a b, Type.derivemacros_sum a b);
  var _4 : Type.derivemacros_sum a b;
  var _5 : Type.derivemacros_sum a b;
  var _6 : isize;
  var _7 : isize;
  var _8 : isize;
  var v0_1_9 : a;
  var v0_2_10 : a;
  var _11 : bool;
  var _12 : a;
  var _13 : a;
  var v0_1_14 : b;
  var v0_2_15 : b;
  var _16 : bool;
  var _17 : b;
  var _18 : b;
  {
    self_1 <- self;
    rhs_2 <- rhs;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _4 };
    _4 <- self_1;
    assume { Resolve0.resolve self_1 };
    assume { Resolve0.resolve _5 };
    _5 <- rhs_2;
    assume { Resolve0.resolve rhs_2 };
    _3 <- (_4, _5);
    switch (let (a, _) = _3 in a)
      | Type.DeriveMacros_Sum_A1 _ -> goto BB1
      | Type.DeriveMacros_Sum_B1 _ -> goto BB3
      end
  }
  BB1 {
    switch (let (_, a) = _3 in a)
      | Type.DeriveMacros_Sum_A1 _ -> goto BB4
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve1.resolve _3 };
    _0 <- false;
    goto BB14
  }
  BB3 {
    switch (let (_, a) = _3 in a)
      | Type.DeriveMacros_Sum_B1 _ -> goto BB9
      | _ -> goto BB2
      end
  }
  BB4 {
    v0_1_9 <- Type.derivemacros_sum_A_0 (let (a, _) = _3 in a);
    v0_2_10 <- Type.derivemacros_sum_A_0 (let (_, a) = _3 in a);
    assume { Resolve1.resolve _3 };
    _12 <- v0_1_9;
    assume { Resolve3.resolve v0_1_9 };
    _13 <- v0_2_10;
    assume { Resolve3.resolve v0_2_10 };
    _11 <- ([#"../derive_macros.rs" 26 16 26 25] Eq1.eq _12 _13);
    goto BB8
  }
  BB5 {
    _0 <- false;
    goto BB7
  }
  BB6 {
    _0 <- true;
    goto BB7
  }
  BB7 {
    goto BB14
  }
  BB8 {
    switch (_11)
      | False -> goto BB5
      | _ -> goto BB6
      end
  }
  BB9 {
    v0_1_14 <- Type.derivemacros_sum_B_0 (let (a, _) = _3 in a);
    v0_2_15 <- Type.derivemacros_sum_B_0 (let (_, a) = _3 in a);
    assume { Resolve1.resolve _3 };
    _17 <- v0_1_14;
    assume { Resolve2.resolve v0_1_14 };
    _18 <- v0_2_15;
    assume { Resolve2.resolve v0_2_15 };
    _16 <- ([#"../derive_macros.rs" 26 16 26 25] Eq0.eq _17 _18);
    goto BB13
  }
  BB10 {
    _0 <- false;
    goto BB12
  }
  BB11 {
    _0 <- true;
    goto BB12
  }
  BB12 {
    goto BB14
  }
  BB13 {
    switch (_16)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB14 {
    return _0
  }
  
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module DeriveMacros_Impl2
  type a
  type b
  use Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Type.derivemacros_product a b
  clone DeriveMacros_Impl2_Clone_Interface as Clone0 with type a = a, type b = b
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.derivemacros_product a b,
  val clone' = Clone0.clone'
end
module DeriveMacros_Impl4
  type a
  type b
  use Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Type.derivemacros_sum a b
  clone DeriveMacros_Impl4_Clone_Interface as Clone0 with type a = a, type b = b
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.derivemacros_sum a b,
  val clone' = Clone0.clone'
end
module Core_Cmp_PartialEq_Ne_Interface
  type self
  type rhs
  use prelude.Prelude
  val ne [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Ne
  type self
  type rhs
  use prelude.Prelude
  val ne [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module DeriveMacros_Impl3
  type a
  type b
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = b
  clone CreusotContracts_Logic_Model_Model_Model as Model3 with type self = b, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = a
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = a, type ModelTy0.modelTy = ModelTy1.modelTy
  clone DeriveMacros_Impl0_Model as Model1 with type a = a, type b = b, type ModelTy0.modelTy = ModelTy1.modelTy,
  type ModelTy1.modelTy = ModelTy2.modelTy, function Model0.model = Model2.model, function Model1.model = Model3.model
  clone DeriveMacros_Impl0_ModelTy as ModelTy0 with type a = a, type b = b, type ModelTy0.modelTy = ModelTy1.modelTy,
  type ModelTy1.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.derivemacros_product a b,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Type.derivemacros_product a b,
  type rhs = Type.derivemacros_product a b
  clone DeriveMacros_Impl3_Eq_Interface as Eq0 with type a = a, type b = b, function Model0.model = Model0.model,
  type ModelTy1.modelTy = ModelTy1.modelTy, type ModelTy2.modelTy = ModelTy2.modelTy
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Type.derivemacros_product a b,
  type rhs = Type.derivemacros_product a b, val eq = Eq0.eq, function Model0.model = Model0.model,
  function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module DeriveMacros_Impl5
  type a
  type b
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = b
  clone CreusotContracts_Logic_Model_Model_Model as Model3 with type self = b, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = a
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = a, type ModelTy0.modelTy = ModelTy1.modelTy
  clone DeriveMacros_Impl1_Model as Model1 with type a = a, type b = b, type ModelTy0.modelTy = ModelTy1.modelTy,
  type ModelTy1.modelTy = ModelTy2.modelTy, function Model0.model = Model2.model, function Model1.model = Model3.model
  clone DeriveMacros_Impl1_ModelTy as ModelTy0 with type a = a, type b = b, type ModelTy0.modelTy = ModelTy1.modelTy,
  type ModelTy1.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.derivemacros_sum a b,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Type.derivemacros_sum a b,
  type rhs = Type.derivemacros_sum a b
  clone DeriveMacros_Impl5_Eq_Interface as Eq0 with type a = a, type b = b, function Model0.model = Model0.model,
  type ModelTy1.modelTy = ModelTy1.modelTy, type ModelTy2.modelTy = ModelTy2.modelTy
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Type.derivemacros_sum a b,
  type rhs = Type.derivemacros_sum a b, val eq = Eq0.eq, function Model0.model = Model0.model,
  function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
