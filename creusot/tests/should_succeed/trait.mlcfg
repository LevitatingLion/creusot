module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use set.Set
  use prelude.Prelude
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module Trait_UsesCustom_Interface
  type a
  type b
  type t
  val uses_custom [@cfg:stackify] (_t : t) : ()
end
module Trait_UsesCustom
  type a
  type b
  type t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  let rec cfg uses_custom [@cfg:stackify] [#"../trait.rs" 9 0 9 54] (_t : t) : () =
  var _0 : ();
  var _t_1 : t;
  {
    _t_1 <- _t;
    goto BB0
  }
  BB0 {
    _0 <- ();
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _t_1 };
    return _0
  }
  
end
module Trait_UsesCustom2_Interface
  type a
  type b
  type t
  val uses_custom2 [@cfg:stackify] (_t : t) : ()
end
module Trait_UsesCustom2
  type a
  type b
  type t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  let rec cfg uses_custom2 [@cfg:stackify] [#"../trait.rs" 13 0 13 61] (_t : t) : () =
  var _0 : ();
  var _t_1 : t;
  {
    _t_1 <- _t;
    goto BB0
  }
  BB0 {
    _0 <- ();
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _t_1 };
    return _0
  }
  
end
