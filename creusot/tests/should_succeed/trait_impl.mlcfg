module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use set.Set
  use prelude.Prelude
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
end
module TraitImpl_Impl0_X_Interface
  type b
  type t2
  type t1
  val x [@cfg:stackify] (self : (t1, t2)) : ()
end
module TraitImpl_Impl0_X
  type b
  type t2
  type t1
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t1
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve0 with type t1 = t1, type t2 = t2,
  predicate Resolve0.resolve = Resolve1.resolve, predicate Resolve1.resolve = Resolve2.resolve
  let rec cfg x [@cfg:stackify] [#"../trait_impl.rs" 25 4 25 14] (self : (t1, t2)) : () =
  var _0 : ();
  var self_1 : (t1, t2);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module TraitImpl_Impl1_X_Interface
  type b
  use mach.int.Int
  use mach.int.UInt32
  val x [@cfg:stackify] (self : uint32) : ()
end
module TraitImpl_Impl1_X
  type b
  use mach.int.Int
  use mach.int.UInt32
  let rec cfg x [@cfg:stackify] [#"../trait_impl.rs" 29 4 29 14] (self : uint32) : () =
  var _0 : ();
  var self_1 : uint32;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module TraitImpl_T_X_Interface
  type self
  type b
  val x [@cfg:stackify] (self : self) : ()
end
module TraitImpl_T_X
  type self
  type b
  val x [@cfg:stackify] (self : self) : ()
end
module TraitImpl_Impl0
  type b
  type t2
  type t1
  clone TraitImpl_Impl0_X_Interface as X0 with type b = b, type t2 = t2, type t1 = t1
  clone TraitImpl_T_X_Interface as X1 with type self = (t1, t2), type b = b, val x = X0.x
end
module TraitImpl_Impl1
  type b
  use mach.int.Int
  use mach.int.UInt32
  clone TraitImpl_Impl1_X_Interface as X0 with type b = b
  clone TraitImpl_T_X_Interface as X1 with type self = uint32, type b = b, val x = X0.x
end
