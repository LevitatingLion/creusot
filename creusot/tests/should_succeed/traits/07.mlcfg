module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use set.Set
  use prelude.Prelude
end
module C07_Impl0_Ix_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  val ix [@cfg:stackify] (self : int32) : ()
end
module C07_Impl0_Ix
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  let rec cfg ix [@cfg:stackify] [#"../07.rs" 11 4 11 36] (self : int32) : () =
  var _0 : ();
  var self_1 : int32;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module C07_Test_Interface
  type g
  type t
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.UInt64
  val test [@cfg:stackify] (_a : uint32) (_b : uint64) : bool
end
module C07_Test
  type g
  type t
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.UInt64
  let rec cfg test [@cfg:stackify] [#"../07.rs" 16 0 16 81] (_a : uint32) (_b : uint64) : bool =
  var _0 : bool;
  var _a_1 : uint32;
  var _b_2 : uint64;
  {
    _a_1 <- _a;
    _b_2 <- _b;
    goto BB0
  }
  BB0 {
    _0 <- true;
    return _0
  }
  
end
module C07_Impl0_Tgt
  type tgt  =
    ()
end
module C07_Ix_Tgt
  type self
  type tgt
end
module C07_Ix_Ix_Interface
  type self
  use prelude.Prelude
  clone C07_Ix_Tgt as Tgt0 with type self = self
  val ix [@cfg:stackify] (self : self) : Tgt0.tgt
end
module C07_Ix_Ix
  type self
  use prelude.Prelude
  clone C07_Ix_Tgt as Tgt0 with type self = self
  val ix [@cfg:stackify] (self : self) : Tgt0.tgt
end
module C07_Impl0
  use mach.int.Int
  use mach.int.Int32
  clone C07_Impl0_Ix_Interface as Ix0
  clone C07_Impl0_Tgt as Tgt0
  clone C07_Ix_Ix_Interface as Ix1 with type self = int32, val ix = Ix0.ix, type Tgt0.tgt = Tgt0.tgt
  clone C07_Ix_Tgt as Tgt1 with type self = int32, type tgt = Tgt0.tgt
end
module C07_Test2_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  val test2 [@cfg:stackify] (a : int32) : ()
end
module C07_Test2
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  clone C07_Impl0_Ix_Interface as Ix0
  let rec cfg test2 [@cfg:stackify] [#"../07.rs" 20 0 20 21] (a : int32) : () =
  var _0 : ();
  var a_1 : int32;
  var _2 : int32;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _2 <- a_1;
    _0 <- ([#"../07.rs" 21 4 21 10] Ix0.ix _2);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
