module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type creusotcontracts_std1_vec_vec 't  
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  function core_option_option_Some_0 (self : core_option_option 't) : 't
  val core_option_option_Some_0 (self : core_option_option 't) : 't
    ensures { result = core_option_option_Some_0 self }
    
  axiom core_option_option_Some_0_acc : forall a : 't . core_option_option_Some_0 (Core_Option_Option_Some a : core_option_option 't) = a
  type challenge3_hset 't = 
    | Challenge3_HSet (creusotcontracts_std1_vec_vec (core_option_option 't))
    
  function challenge3_hset_HSet_inner (self : challenge3_hset 't) : creusotcontracts_std1_vec_vec (core_option_option 't)
    
  val challenge3_hset_HSet_inner (self : challenge3_hset 't) : creusotcontracts_std1_vec_vec (core_option_option 't)
    ensures { result = challenge3_hset_HSet_inner self }
    
  axiom challenge3_hset_HSet_inner_acc : forall a : creusotcontracts_std1_vec_vec (core_option_option 't) . challenge3_hset_HSet_inner (Challenge3_HSet a : challenge3_hset 't) = a
  type creusotcontracts_logic_ghost_ghost 't = 
    | CreusotContracts_Logic_Ghost_Ghost opaque_ptr
    
end
module Challenge3_Hash_Hash_Interface
  type self   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val hash [@cfg:stackify] (self : self) (state : usize) : usize
    ensures { result < state }
    
end
module Challenge3_Hash_Hash
  type self   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val hash [@cfg:stackify] (self : self) (state : usize) : usize
    ensures { result < state }
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t   
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t   
  predicate resolve (self : t) = 
    true
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface
  type self   
  predicate log_eq (self : self) (_2' : self)
end
module CreusotContracts_Logic_Eq_EqLogic_LogEq
  type self   
  predicate log_eq (self : self) (_2' : self)
end
module CreusotContracts_Std1_Eq_Eq_Eq_Interface
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  val eq [@cfg:stackify] (self : self) (o : self) : bool
    ensures { result = LogEq0.log_eq self o }
    
end
module CreusotContracts_Std1_Eq_Eq_Eq
  type self   
  use prelude.Prelude
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  val eq [@cfg:stackify] (self : self) (o : self) : bool
    ensures { result = LogEq0.log_eq self o }
    
end
module CreusotContracts_Logic_Resolve_Impl2
  type t   
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t,
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, val index = Index0.index, type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Eq_EqLogic_LogNe_Interface
  type self   
  predicate log_ne (self : self) (_2' : self)
end
module CreusotContracts_Logic_Eq_EqLogic_LogNe
  type self   
  predicate log_ne (self : self) (_2' : self)
end
module CreusotContracts_Logic_Eq_EqLogic_EqNe_Interface
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe_Interface as LogNe0 with type self = self
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function eq_ne (a : self) (b : self) : ()
end
module CreusotContracts_Logic_Eq_EqLogic_EqNe
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe_Interface as LogNe0 with type self = self
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function eq_ne (a : self) (b : self) : ()
  axiom eq_ne_spec : forall a : self, b : self . not (LogEq0.log_eq a b = LogNe0.log_ne a b)
end
module CreusotContracts_Logic_Eq_EqLogic_Refl_Interface
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Eq_EqLogic_Refl
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . LogEq0.log_eq x x
end
module CreusotContracts_Logic_Eq_EqLogic_Symmetry_Interface
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function symmetry (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Eq_EqLogic_Symmetry
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function symmetry (x : self) (y : self) : ()
  axiom symmetry_spec : forall x : self, y : self . LogEq0.log_eq x y -> LogEq0.log_eq y x
end
module CreusotContracts_Logic_Eq_EqLogic_Transitivity_Interface
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function transitivity (x : self) (y : self) (z : self) : ()
end
module CreusotContracts_Logic_Eq_EqLogic_Transitivity
  type self   
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function transitivity (x : self) (y : self) (z : self) : ()
  axiom transitivity_spec : forall x : self, y : self, z : self . LogEq0.log_eq y z -> LogEq0.log_eq x y -> LogEq0.log_eq x z
end
module Challenge3_Impl0_Member_Interface
  type t   
  use prelude.Prelude
  use Type
  val member [@cfg:stackify] (self : Type.challenge3_hset t) (k : t) : bool
end
module Challenge3_Impl0_Member
  type t   
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use Type
  use mach.int.Int64
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe as LogNe0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.core_option_option t
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve5 with type t = ()
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq as LogEq0 with type self = t
  clone CreusotContracts_Logic_Eq_EqLogic_Transitivity as Transitivity0 with type self = t,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Symmetry as Symmetry0 with type self = t,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Refl as Refl0 with type self = t, predicate LogEq0.log_eq = LogEq0.log_eq,
  axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_EqNe as EqNe0 with type self = t, predicate LogEq0.log_eq = LogEq0.log_eq,
  predicate LogNe0.log_ne = LogNe0.log_ne, axiom .
  clone CreusotContracts_Std1_Eq_Eq_Eq_Interface as Eq0 with type self = t, predicate LogEq0.log_eq = LogEq0.log_eq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.challenge3_hset t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.core_option_option t
  clone Challenge3_Hash_Hash_Interface as Hash0 with type self = t
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.core_option_option t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.core_option_option t),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.core_option_option t,
  function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.core_option_option t,
  function Model0.model = Model0.model
  let rec cfg member [@cfg:stackify] (self : Type.challenge3_hset t) (k : t) : bool = 
  var _0 : bool;
  var self_1 : Type.challenge3_hset t;
  var k_2 : t;
  var _3 : ();
  var n_4 : usize;
  var _5 : Type.creusotcontracts_std1_vec_vec (Type.core_option_option t);
  var i0_6 : usize;
  var _7 : t;
  var _8 : usize;
  var i_9 : usize;
  var _10 : ();
  var _11 : ();
  var k1_12 : Type.core_option_option t;
  var _13 : Type.core_option_option t;
  var _14 : Type.creusotcontracts_std1_vec_vec (Type.core_option_option t);
  var _15 : usize;
  var _16 : ();
  var _17 : isize;
  var k2_18 : t;
  var _19 : bool;
  var _20 : t;
  var _21 : t;
  var _22 : t;
  var _23 : ();
  var _24 : ();
  var _25 : usize;
  var _26 : usize;
  var _27 : usize;
  var _28 : bool;
  var _29 : bool;
  var _30 : usize;
  var _31 : usize;
  var _32 : ();
  {
    self_1 <- self;
    k_2 <- k;
    goto BB0
  }
  BB0 {
    _5 <- Type.challenge3_hset_HSet_inner self_1;
    n_4 <- Len0.len _5;
    goto BB1
  }
  BB1 {
    _7 <- k_2;
    assume { Resolve0.resolve _8 };
    _8 <- n_4;
    i0_6 <- Hash0.hash _7 _8;
    goto BB2
  }
  BB2 {
    i_9 <- (0 : usize);
    goto BB3
  }
  BB3 {
    invariant i_loop { UInt64.to_int i_9 < UInt64.to_int n_4 };
    _14 <- Type.challenge3_hset_HSet_inner self_1;
    assume { Resolve0.resolve _15 };
    _15 <- i_9;
    _13 <- Index0.index _14 _15;
    goto BB4
  }
  BB4 {
    k1_12 <- _13;
    assume { Resolve1.resolve _13 };
    switch (k1_12)
      | Type.Core_Option_Option_Some _ -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    assume { Resolve2.resolve self_1 };
    assume { Resolve0.resolve n_4 };
    assume { Resolve0.resolve i0_6 };
    assume { Resolve0.resolve i_9 };
    assume { Resolve1.resolve k1_12 };
    _0 <- false;
    goto BB13
  }
  BB6 {
    k2_18 <- Type.core_option_option_Some_0 k1_12;
    assume { Resolve1.resolve k1_12 };
    _20 <- k2_18;
    assume { Resolve4.resolve k2_18 };
    _22 <- k_2;
    _21 <- _22;
    assume { Resolve4.resolve _22 };
    _19 <- Eq0.eq _20 _21;
    goto BB7
  }
  BB7 {
    switch (_19)
      | False -> goto BB9
      | _ -> goto BB8
      end
  }
  BB8 {
    assume { Resolve2.resolve self_1 };
    assume { Resolve0.resolve n_4 };
    assume { Resolve0.resolve i0_6 };
    assume { Resolve0.resolve i_9 };
    _0 <- true;
    goto BB13
  }
  BB9 {
    _16 <- ();
    assume { Resolve5.resolve _16 };
    assume { Resolve0.resolve _26 };
    _26 <- i_9;
    assume { Resolve0.resolve i_9 };
    _25 <- _26 + (1 : usize);
    assume { Resolve0.resolve _27 };
    _27 <- n_4;
    _28 <- _27 = (0 : usize);
    assert { not _28 };
    goto BB10
  }
  BB10 {
    i_9 <- _25 % _27;
    assume { Resolve0.resolve _30 };
    _30 <- i_9;
    assume { Resolve0.resolve _31 };
    _31 <- i0_6;
    _29 <- _30 = _31;
    switch (_29)
      | False -> goto BB12
      | _ -> goto BB11
      end
  }
  BB11 {
    assume { Resolve2.resolve self_1 };
    assume { Resolve0.resolve n_4 };
    assume { Resolve0.resolve i0_6 };
    assume { Resolve0.resolve i_9 };
    _10 <- ();
    assume { Resolve5.resolve _10 };
    _0 <- false;
    goto BB14
  }
  BB12 {
    _11 <- ();
    assume { Resolve5.resolve _11 };
    goto BB3
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    assume { Resolve3.resolve k_2 };
    return _0
  }
  
end
module Challenge3_Impl0_AllNone_Interface
  type t   
  use prelude.Prelude
  use Type
  predicate all_none (self : Type.challenge3_hset t)
end
module Challenge3_Impl0_AllNone
  type t   
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.core_option_option t
  predicate all_none (self : Type.challenge3_hset t) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.challenge3_hset_HSet_inner self)) -> Seq.get (Model0.model (Type.challenge3_hset_HSet_inner self)) i = Type.Core_Option_Option_None
end
module Challenge3_Impl0_Full_Interface
  type t   
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  predicate full (self : Type.challenge3_hset t) (hash : usize)
end
module Challenge3_Impl0_Full
  type t   
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.core_option_option t
  predicate full (self : Type.challenge3_hset t) (hash : usize) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.challenge3_hset_HSet_inner self)) -> not (Seq.get (Model0.model (Type.challenge3_hset_HSet_inner self)) (mod (i + UInt64.to_int hash) (Seq.length (Model0.model (Type.challenge3_hset_HSet_inner self)))) = Type.Core_Option_Option_None)
end
module CreusotContracts_Std1_Vec_Impl1_New_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val new [@cfg:stackify] () : Type.creusotcontracts_std1_vec_vec t
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Std1_Vec_Impl1_New
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val new [@cfg:stackify] () : Type.creusotcontracts_std1_vec_vec t
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreusotContracts_Std1_Vec_Impl1_Push_Interface
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val push [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (v : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model1.model self) v }
    
end
module CreusotContracts_Std1_Vec_Impl1_Push
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val push [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (v : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model1.model self) v }
    
end
module CreusotContracts_Std1_Vec_Impl5_Resolve_Interface
  type t   
  use Type
  predicate resolve (self : Type.creusotcontracts_std1_vec_vec t)
end
module CreusotContracts_Std1_Vec_Impl5_Resolve
  type t   
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  predicate resolve (self : Type.creusotcontracts_std1_vec_vec t) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Std1_Vec_Impl5
  type t   
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl5_Resolve as Resolve0 with type t = t, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_std1_vec_vec t,
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module Challenge3_Impl0_Empty_Interface
  type t   
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.core_option_option t
  clone Challenge3_Impl0_AllNone_Interface as AllNone0 with type t = t
  val empty [@cfg:stackify] (n : usize) : Type.challenge3_hset t
    ensures { AllNone0.all_none result }
    ensures { Seq.length (Model0.model (Type.challenge3_hset_HSet_inner result)) = UInt64.to_int n }
    
end
module Challenge3_Impl0_Empty
  type t   
  use mach.int.UInt64
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.core_option_option t
  clone Challenge3_Impl0_AllNone as AllNone0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.core_option_option t
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = ()
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.core_option_option t
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = usize
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec (Type.core_option_option t),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Push_Interface as Push0 with type t = Type.core_option_option t,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl5_Resolve as Resolve2 with type t = Type.core_option_option t,
  function Model0.model = Model0.model, predicate Resolve0.resolve = Resolve3.resolve
  clone CreusotContracts_Std1_Vec_Impl1_New_Interface as New0 with type t = Type.core_option_option t,
  function Model0.model = Model0.model
  let rec cfg empty [@cfg:stackify] (n : usize) : Type.challenge3_hset t
    ensures { AllNone0.all_none result }
    ensures { Seq.length (Model0.model (Type.challenge3_hset_HSet_inner result)) = UInt64.to_int n }
    
   = 
  var _0 : Type.challenge3_hset t;
  var n_1 : usize;
  var v_2 : Type.creusotcontracts_std1_vec_vec (Type.core_option_option t);
  var i_3 : usize;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : ();
  var _10 : borrowed (Type.creusotcontracts_std1_vec_vec (Type.core_option_option t));
  var _11 : Type.core_option_option t;
  var _12 : ();
  var _13 : ();
  var _14 : ();
  var _15 : Type.creusotcontracts_std1_vec_vec (Type.core_option_option t);
  {
    n_1 <- n;
    goto BB0
  }
  BB0 {
    v_2 <- New0.new ();
    goto BB1
  }
  BB1 {
    i_3 <- (0 : usize);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant len_ok { UInt64.to_int i_3 <= UInt64.to_int n_1 };
    invariant len_is { UInt64.to_int i_3 = Seq.length (Model0.model v_2) };
    invariant all_none { forall j : (int) . 0 <= j && j < UInt64.to_int i_3 -> Seq.get (Model0.model v_2) j = Type.Core_Option_Option_None };
    assume { Resolve0.resolve _7 };
    _7 <- i_3;
    assume { Resolve0.resolve _8 };
    _8 <- n_1;
    _6 <- _7 < _8;
    switch (_6)
      | False -> goto BB7
      | _ -> goto BB5
      end
  }
  BB5 {
    _10 <- borrow_mut v_2;
    v_2 <-  ^ _10;
    _11 <- Type.Core_Option_Option_None;
    _9 <- Push0.push _10 _11;
    goto BB6
  }
  BB6 {
    i_3 <- i_3 + (1 : usize);
    _5 <- ();
    assume { Resolve1.resolve _5 };
    goto BB4
  }
  BB7 {
    assume { Resolve0.resolve n_1 };
    assume { Resolve0.resolve i_3 };
    _4 <- ();
    assume { Resolve1.resolve _4 };
    assume { Resolve2.resolve _15 };
    _15 <- v_2;
    _0 <- Type.Challenge3_HSet _15;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Challenge3_Impl0_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.core_option_option t
  val len [@cfg:stackify] (self : Type.challenge3_hset t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model (Type.challenge3_hset_HSet_inner self)) }
    
end
module Challenge3_Impl0_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.core_option_option t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.core_option_option t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.challenge3_hset t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec (Type.core_option_option t),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.core_option_option t,
  function Model0.model = Model1.model
  let rec cfg len [@cfg:stackify] (self : Type.challenge3_hset t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model (Type.challenge3_hset_HSet_inner self)) }
    
   = 
  var _0 : usize;
  var self_1 : Type.challenge3_hset t;
  var _2 : ();
  var _3 : Type.creusotcontracts_std1_vec_vec (Type.core_option_option t);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Type.challenge3_hset_HSet_inner self_1;
    assume { Resolve0.resolve self_1 };
    _0 <- Len0.len _3;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module CreusotContracts_Logic_Eq_Impl0_LogEq_Interface
  type t   
  use Type
  predicate log_eq (self : Type.core_option_option t) (rhs : Type.core_option_option t)
end
module CreusotContracts_Logic_Eq_Impl0_LogEq
  type t   
  use Type
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = t
  predicate log_eq (self : Type.core_option_option t) (rhs : Type.core_option_option t) = 
    match ((self, rhs)) with
      | (Type.Core_Option_Option_Some x, Type.Core_Option_Option_Some y) -> LogEq0.log_eq x y
      | (Type.Core_Option_Option_None, Type.Core_Option_Option_None) -> true
      | _ -> false
      end
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Ghost_Impl0_Model_Interface
  type t   
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_Model
  type t   
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_ModelTy
  type t   
  type modelTy  = 
    t
end
module CreusotContracts_Logic_Ghost_Impl0
  type t   
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Eq_Impl0_LogNe_Interface
  type t   
  use Type
  predicate log_ne (self : Type.core_option_option t) (rhs : Type.core_option_option t)
end
module CreusotContracts_Logic_Eq_Impl0_LogNe
  type t   
  use Type
  clone CreusotContracts_Logic_Eq_Impl0_LogEq_Interface as LogEq0 with type t = t
  predicate log_ne (self : Type.core_option_option t) (rhs : Type.core_option_option t) = 
    not (LogEq0.log_eq self rhs)
end
module CreusotContracts_Logic_Eq_Impl0_EqNe_Interface
  type t   
  use Type
  function eq_ne (_1' : Type.core_option_option t) (_2' : Type.core_option_option t) : ()
end
module CreusotContracts_Logic_Eq_Impl0_EqNe
  type t   
  use Type
  function eq_ne (_1' : Type.core_option_option t) (_2' : Type.core_option_option t) : () = 
    ()
end
module CreusotContracts_Logic_Eq_Impl0_Refl_Interface
  type t   
  use Type
  function refl (_1' : Type.core_option_option t) : ()
end
module CreusotContracts_Logic_Eq_Impl0_Refl
  type t   
  use Type
  function refl (_1' : Type.core_option_option t) : () = 
    ()
end
module CreusotContracts_Logic_Eq_Impl0_Symmetry_Interface
  type t   
  use Type
  function symmetry (_1' : Type.core_option_option t) (_2' : Type.core_option_option t) : ()
end
module CreusotContracts_Logic_Eq_Impl0_Symmetry
  type t   
  use Type
  function symmetry (_1' : Type.core_option_option t) (_2' : Type.core_option_option t) : () = 
    ()
end
module CreusotContracts_Logic_Eq_Impl0_Transitivity_Interface
  type t   
  use Type
  function transitivity (_1' : Type.core_option_option t) (_2' : Type.core_option_option t) (_3' : Type.core_option_option t) : ()
    
end
module CreusotContracts_Logic_Eq_Impl0_Transitivity
  type t   
  use Type
  function transitivity (_1' : Type.core_option_option t) (_2' : Type.core_option_option t) (_3' : Type.core_option_option t) : ()
    
   = 
    ()
end
module CreusotContracts_Logic_Eq_Impl0
  type t   
  use Type
  clone CreusotContracts_Logic_Eq_Impl0_Transitivity as Transitivity0 with type t = t
  clone CreusotContracts_Logic_Eq_Impl0_Symmetry as Symmetry0 with type t = t
  clone CreusotContracts_Logic_Eq_Impl0_Refl as Refl0 with type t = t
  clone CreusotContracts_Logic_Eq_Impl0_EqNe as EqNe0 with type t = t
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq as LogEq2 with type self = t
  clone CreusotContracts_Logic_Eq_Impl0_LogEq as LogEq0 with type t = t, predicate LogEq0.log_eq = LogEq2.log_eq
  clone CreusotContracts_Logic_Eq_EqLogic_Transitivity as Transitivity1 with type self = Type.core_option_option t,
  function transitivity = Transitivity0.transitivity, predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Symmetry as Symmetry1 with type self = Type.core_option_option t,
  function symmetry = Symmetry0.symmetry, predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Refl as Refl1 with type self = Type.core_option_option t,
  function refl = Refl0.refl, predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_Impl0_LogNe as LogNe0 with type t = t, predicate LogEq0.log_eq = LogEq0.log_eq
  clone CreusotContracts_Logic_Eq_EqLogic_EqNe as EqNe1 with type self = Type.core_option_option t,
  function eq_ne = EqNe0.eq_ne, predicate LogEq0.log_eq = LogEq0.log_eq, predicate LogNe0.log_ne = LogNe0.log_ne,
  axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe as LogNe1 with type self = Type.core_option_option t,
  predicate log_ne = LogNe0.log_ne
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq as LogEq1 with type self = Type.core_option_option t,
  predicate log_eq = LogEq0.log_eq
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Logic_Ghost_Impl1_Record_Interface
  type t   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Logic_Ghost_Impl1_Record
  type t   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Std1_Eq_Impl0_Eq_Interface
  type t   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Eq_Impl0_LogEq_Interface as LogEq0 with type t = t
  val eq [@cfg:stackify] (self : Type.core_option_option t) (rhs : Type.core_option_option t) : bool
    ensures { result = LogEq0.log_eq self rhs }
    
end
module CreusotContracts_Std1_Eq_Impl0_Eq
  type t   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Eq_Impl0_LogEq_Interface as LogEq0 with type t = t
  val eq [@cfg:stackify] (self : Type.core_option_option t) (rhs : Type.core_option_option t) : bool
    ensures { result = LogEq0.log_eq self rhs }
    
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Eq_Impl0
  type t   
  use Type
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq as LogEq1 with type self = t
  clone CreusotContracts_Logic_Eq_Impl0_LogEq as LogEq0 with type t = t, predicate LogEq0.log_eq = LogEq1.log_eq
  clone CreusotContracts_Std1_Eq_Impl0_Eq_Interface as Eq0 with type t = t, predicate LogEq0.log_eq = LogEq0.log_eq
  clone CreusotContracts_Std1_Eq_Eq_Eq_Interface as Eq1 with type self = Type.core_option_option t, val eq = Eq0.eq,
  predicate LogEq0.log_eq = LogEq0.log_eq
end
module CreusotContracts_Std1_Vec_Impl2
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = t,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, val index_mut = IndexMut0.index_mut, type Output0.output = Output0.output
end
module Challenge3_Impl0_Insert_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface as Resolve0 with type t = Type.challenge3_hset t
  clone Challenge3_Impl0_Full_Interface as Full0 with type t = t
  clone CreusotContracts_Logic_Eq_Impl0_LogEq_Interface as LogEq0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.core_option_option t
  val insert [@cfg:stackify] (self : borrowed (Type.challenge3_hset t)) (key_in : t) : bool
    requires {Seq.length (Model0.model (Type.challenge3_hset_HSet_inner ( * self))) < div 18446744073709551615 2}
    ensures { result -> (exists i : (int) . LogEq0.log_eq (Seq.get (Model0.model (Type.challenge3_hset_HSet_inner ( ^ self))) i) (Type.Core_Option_Option_Some key_in)) }
    ensures { not result -> (exists i : (usize) . Full0.full ( * self) i) && Resolve0.resolve self }
    
end
module Challenge3_Impl0_Insert
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe as LogNe0 with type self = t
  clone CreusotContracts_Logic_Eq_Impl0_Transitivity as Transitivity0 with type t = t
  clone CreusotContracts_Logic_Eq_Impl0_Symmetry as Symmetry0 with type t = t
  clone CreusotContracts_Logic_Eq_Impl0_Refl as Refl0 with type t = t
  clone CreusotContracts_Logic_Eq_Impl0_EqNe as EqNe0 with type t = t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.challenge3_hset t
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq as LogEq1 with type self = t
  clone CreusotContracts_Logic_Eq_EqLogic_Transitivity as Transitivity1 with type self = t,
  predicate LogEq0.log_eq = LogEq1.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Symmetry as Symmetry1 with type self = t,
  predicate LogEq0.log_eq = LogEq1.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Refl as Refl1 with type self = t, predicate LogEq0.log_eq = LogEq1.log_eq,
  axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_EqNe as EqNe1 with type self = t, predicate LogEq0.log_eq = LogEq1.log_eq,
  predicate LogNe0.log_ne = LogNe0.log_ne, axiom .
  clone CreusotContracts_Logic_Eq_Impl0_LogEq as LogEq0 with type t = t, predicate LogEq0.log_eq = LogEq1.log_eq
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model1 with type t = borrowed (Type.challenge3_hset t)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.core_option_option t
  clone Challenge3_Impl0_Full as Full0 with type t = t, function Model0.model = Model0.model
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve8 with type t = Type.core_option_option t
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve7 with type t = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.core_option_option t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.core_option_option t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.core_option_option t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = t
  clone Challenge3_Hash_Hash_Interface as Hash0 with type self = t
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve3 with type t = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.challenge3_hset t))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed (Type.challenge3_hset t)
  clone CreusotContracts_Std1_Eq_Impl0_Eq_Interface as Eq0 with type t = t, predicate LogEq0.log_eq = LogEq0.log_eq
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.challenge3_hset t),
  function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec (Type.core_option_option t),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = Type.core_option_option t,
  function Model0.model = Model0.model, function Model1.model = Model3.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Type.creusotcontracts_std1_vec_vec (Type.core_option_option t),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.core_option_option t,
  function Model0.model = Model2.model
  clone Challenge3_Impl0_Len_Interface as Len0 with type t = t, function Model0.model = Model0.model
  let rec cfg insert [@cfg:stackify] (self : borrowed (Type.challenge3_hset t)) (key_in : t) : bool
    requires {Seq.length (Model0.model (Type.challenge3_hset_HSet_inner ( * self))) < div 18446744073709551615 2}
    ensures { result -> (exists i : (int) . LogEq0.log_eq (Seq.get (Model0.model (Type.challenge3_hset_HSet_inner ( ^ self))) i) (Type.Core_Option_Option_Some key_in)) }
    ensures { not result -> (exists i : (usize) . Full0.full ( * self) i) && Resolve0.resolve self }
    
   = 
  var _0 : bool;
  var self_1 : borrowed (Type.challenge3_hset t);
  var key_in_2 : t;
  var _3 : ();
  var old_self_4 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.challenge3_hset t));
  var _5 : borrowed (Type.challenge3_hset t);
  var _6 : borrowed (Type.challenge3_hset t);
  var n_7 : usize;
  var _8 : Type.challenge3_hset t;
  var hash_9 : usize;
  var _10 : t;
  var _11 : usize;
  var i_12 : usize;
  var key_13 : Type.core_option_option t;
  var _14 : t;
  var _15 : ();
  var _16 : ();
  var _17 : bool;
  var _18 : usize;
  var _19 : usize;
  var _20 : Type.challenge3_hset t;
  var _21 : ();
  var _22 : Type.core_option_option t;
  var _23 : Type.core_option_option t;
  var _24 : Type.creusotcontracts_std1_vec_vec (Type.core_option_option t);
  var _25 : usize;
  var _26 : usize;
  var _27 : usize;
  var _28 : usize;
  var _29 : usize;
  var _30 : bool;
  var _31 : isize;
  var _32 : ();
  var _33 : Type.core_option_option t;
  var _34 : borrowed (Type.core_option_option t);
  var _35 : borrowed (Type.creusotcontracts_std1_vec_vec (Type.core_option_option t));
  var _36 : usize;
  var _37 : usize;
  var _38 : usize;
  var _39 : usize;
  var _40 : usize;
  var _41 : bool;
  var a_42 : Type.core_option_option t;
  var _43 : bool;
  var _44 : Type.core_option_option t;
  var _45 : Type.core_option_option t;
  var _46 : Type.core_option_option t;
  var _47 : ();
  var _48 : ();
  var _49 : ();
  var _50 : ();
  var _51 : ();
  var _52 : ();
  {
    self_1 <- self;
    key_in_2 <- key_in;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _6 <- self_1;
    _5 <- _6;
    assume { Resolve1.resolve _6 };
    old_self_4 <- Record0.record _5;
    goto BB2
  }
  BB2 {
    assume { Resolve2.resolve old_self_4 };
    _8 <-  * self_1;
    n_7 <- Len0.len _8;
    goto BB3
  }
  BB3 {
    _10 <- key_in_2;
    assume { Resolve3.resolve _11 };
    _11 <- n_7;
    hash_9 <- Hash0.hash _10 _11;
    goto BB4
  }
  BB4 {
    i_12 <- (0 : usize);
    assume { Resolve4.resolve _14 };
    _14 <- key_in_2;
    key_13 <- Type.Core_Option_Option_Some _14;
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    invariant i_ok { UInt64.to_int i_12 <= Seq.length (Model0.model (Type.challenge3_hset_HSet_inner ( * self_1))) };
    invariant neq { UInt64.to_int n_7 = Seq.length (Model0.model (Type.challenge3_hset_HSet_inner ( * self_1))) };
    invariant inv { forall j : (int) . 0 <= j && j < UInt64.to_int i_12 -> not (Seq.get (Model0.model (Type.challenge3_hset_HSet_inner ( * self_1))) (mod (j + UInt64.to_int hash_9) (Seq.length (Model0.model (Type.challenge3_hset_HSet_inner ( * self_1))))) = key_13) };
    invariant inv2 { forall j : (int) . 0 <= j && j < UInt64.to_int i_12 -> not (Seq.get (Model0.model (Type.challenge3_hset_HSet_inner ( * self_1))) (mod (j + UInt64.to_int hash_9) (Seq.length (Model0.model (Type.challenge3_hset_HSet_inner ( * self_1))))) = Type.Core_Option_Option_None) };
    invariant unch { Model1.model old_self_4 = self_1 };
    invariant proph {  ^ Model1.model old_self_4 =  ^ self_1 };
    assume { Resolve3.resolve _18 };
    _18 <- i_12;
    _20 <-  * self_1;
    _19 <- Len0.len _20;
    goto BB8
  }
  BB8 {
    _17 <- _18 < _19;
    switch (_17)
      | False -> goto BB23
      | _ -> goto BB9
      end
  }
  BB9 {
    _24 <- Type.challenge3_hset_HSet_inner ( * self_1);
    assume { Resolve3.resolve _27 };
    _27 <- i_12;
    assume { Resolve3.resolve _28 };
    _28 <- hash_9;
    _26 <- _27 + _28;
    assume { Resolve3.resolve _29 };
    _29 <- n_7;
    _30 <- _29 = (0 : usize);
    assert { not _30 };
    goto BB10
  }
  BB10 {
    _25 <- _26 % _29;
    _23 <- Index0.index _24 _25;
    goto BB11
  }
  BB11 {
    _22 <- _23;
    assume { Resolve5.resolve _23 };
    switch (_22)
      | Type.Core_Option_Option_None -> goto BB14
      | Type.Core_Option_Option_Some _ -> goto BB12
      end
  }
  BB12 {
    assume { Resolve5.resolve a_42 };
    a_42 <- _22;
    assume { Resolve5.resolve _22 };
    _44 <- a_42;
    assume { Resolve5.resolve a_42 };
    _46 <- key_13;
    _45 <- _46;
    assume { Resolve5.resolve _46 };
    _43 <- Eq0.eq _44 _45;
    goto BB19
  }
  BB13 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve3.resolve n_7 };
    assume { Resolve3.resolve hash_9 };
    assume { Resolve3.resolve i_12 };
    assume { Resolve6.resolve key_13 };
    assume { Resolve5.resolve _22 };
    absurd
  }
  BB14 {
    assume { Resolve5.resolve _22 };
    assume { Resolve6.resolve _33 };
    _33 <- key_13;
    _35 <- borrow_mut (Type.challenge3_hset_HSet_inner ( * self_1));
    self_1 <- { self_1 with current = (let Type.Challenge3_HSet a =  * self_1 in Type.Challenge3_HSet ( ^ _35)) };
    assume { Resolve0.resolve self_1 };
    assume { Resolve3.resolve _38 };
    _38 <- i_12;
    assume { Resolve3.resolve i_12 };
    assume { Resolve3.resolve _39 };
    _39 <- hash_9;
    assume { Resolve3.resolve hash_9 };
    _37 <- _38 + _39;
    assume { Resolve3.resolve _40 };
    _40 <- n_7;
    assume { Resolve3.resolve n_7 };
    _41 <- _40 = (0 : usize);
    assert { not _41 };
    goto BB15
  }
  BB15 {
    _36 <- _37 % _40;
    _34 <- IndexMut0.index_mut _35 _36;
    goto BB16
  }
  BB16 {
    assume { Resolve6.resolve ( * _34) };
    _34 <- { _34 with current = _33 };
    goto BB17
  }
  BB17 {
    assume { Resolve8.resolve _34 };
    goto BB18
  }
  BB18 {
    _0 <- true;
    goto BB24
  }
  BB19 {
    switch (_43)
      | False -> goto BB21
      | _ -> goto BB20
      end
  }
  BB20 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve3.resolve n_7 };
    assume { Resolve3.resolve hash_9 };
    assume { Resolve3.resolve i_12 };
    _0 <- true;
    goto BB24
  }
  BB21 {
    _21 <- ();
    assume { Resolve7.resolve _21 };
    assert { not (Seq.get (Model0.model (Type.challenge3_hset_HSet_inner ( * self_1))) (mod (UInt64.to_int i_12 + UInt64.to_int hash_9) (Seq.length (Model0.model (Type.challenge3_hset_HSet_inner ( * self_1))))) = Type.Core_Option_Option_None) };
    _48 <- ();
    assume { Resolve7.resolve _48 };
    assert { not (Seq.get (Model0.model (Type.challenge3_hset_HSet_inner ( * self_1))) (mod (UInt64.to_int i_12 + UInt64.to_int hash_9) (Seq.length (Model0.model (Type.challenge3_hset_HSet_inner ( * self_1))))) = key_13) };
    goto BB22
  }
  BB22 {
    _49 <- ();
    assume { Resolve7.resolve _49 };
    i_12 <- i_12 + (1 : usize);
    _16 <- ();
    assume { Resolve7.resolve _16 };
    goto BB7
  }
  BB23 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve3.resolve n_7 };
    assume { Resolve3.resolve hash_9 };
    assume { Resolve3.resolve i_12 };
    _15 <- ();
    assume { Resolve7.resolve _15 };
    _0 <- false;
    goto BB25
  }
  BB24 {
    goto BB25
  }
  BB25 {
    goto BB26
  }
  BB26 {
    goto BB27
  }
  BB27 {
    return _0
  }
  
end
