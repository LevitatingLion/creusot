module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type pointcloud_point  =
    | Pointcloud_Point int64 int64 int64
    
  let function pointcloud_point_Point_x (self : pointcloud_point) : int64 =
    match (self) with
      | Pointcloud_Point a _ _ -> a
      end
  let function pointcloud_point_Point_y (self : pointcloud_point) : int64 =
    match (self) with
      | Pointcloud_Point _ a _ -> a
      end
  let function pointcloud_point_Point_z (self : pointcloud_point) : int64 =
    match (self) with
      | Pointcloud_Point _ _ a -> a
      end
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't =
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
end
module Pointcloud_Impl1_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.pointcloud_point) : Type.pointcloud_point
end
module Pointcloud_Impl1_Clone
  use prelude.Prelude
  use Type
  let rec cfg clone' [@cfg:stackify] [#"../pointcloud.rs" 5 9 14] (self : Type.pointcloud_point) : Type.pointcloud_point
   =
  var _0 : Type.pointcloud_point;
  var self_1 : Type.pointcloud_point;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- self_1;
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 18446744073709551615
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3
  type t
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module Core_Slice_Index_Impl2_Output
  type t
  type output  =
    t
end
module Core_Slice_Index_Impl2
  type t
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module Pointcloud_MaxX_Interface
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val max_x [@cfg:stackify] (p : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)) : Type.core_option_option int64
    ensures { [#"../pointcloud.rs" 12 0 3] match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.pointcloud_point_Point_x (Seq.get (Model0.model p) i) <= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.pointcloud_point_Point_x (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
end
module Pointcloud_MaxX
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = Type.pointcloud_point
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Type.pointcloud_point
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.pointcloud_point, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.pointcloud_point, type a = Type.alloc_alloc_global,
  function Model0.model = Model1.model
  let rec cfg max_x [@cfg:stackify] [#"../pointcloud.rs" 17 0 39] (p : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)) : Type.core_option_option int64
    ensures { [#"../pointcloud.rs" 12 0 3] match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.pointcloud_point_Point_x (Seq.get (Model0.model p) i) <= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.pointcloud_point_Point_x (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
   =
  var _0 : Type.core_option_option int64;
  var p_1 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _2 : ();
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _7 : ();
  var max_seen_8 : int64;
  var _9 : Type.pointcloud_point;
  var _10 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var max_idx_11 : usize;
  var i_12 : usize;
  var _13 : ();
  var _14 : ();
  var _15 : bool;
  var _16 : usize;
  var _17 : usize;
  var _18 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _19 : ();
  var _20 : bool;
  var _21 : int64;
  var _22 : Type.pointcloud_point;
  var _23 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _24 : usize;
  var _25 : int64;
  var _26 : int64;
  var _27 : Type.pointcloud_point;
  var _28 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _29 : usize;
  var _30 : usize;
  var _31 : ();
  var _32 : ();
  var _33 : ();
  var _34 : int64;
  {
    p_1 <- p;
    goto BB0
  }
  BB0 {
    _6 <- p_1;
    _5 <- ([#"../pointcloud.rs" 18 7 14] Len0.len _6);
    goto BB1
  }
  BB1 {
    _4 <- ([#"../pointcloud.rs" 18 7 19] _5 = (0 : usize));
    switch (_4)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    _0 <- Type.Core_Option_Option_None;
    goto BB14
  }
  BB3 {
    _3 <- ();
    _10 <- p_1;
    _9 <- ([#"../pointcloud.rs" 21 28 32] Index0.index _10 (0 : usize));
    goto BB4
  }
  BB4 {
    max_seen_8 <- Type.pointcloud_point_Point_x _9;
    max_idx_11 <- (0 : usize);
    i_12 <- (1 : usize);
    goto BB5
  }
  BB5 {
    invariant i_less { [#"../pointcloud.rs" 24 4 53] 1 <= UInt64.to_int i_12 && UInt64.to_int i_12 <= Seq.length (Model0.model p_1) };
    invariant max_idx_less { [#"../pointcloud.rs" 25 4 70] 0 <= UInt64.to_int max_idx_11 && UInt64.to_int max_idx_11 < Seq.length (Model0.model p_1) };
    invariant max_is_max { [#"../pointcloud.rs" 26 4 4] forall j : (int) . 0 <= j && j < UInt64.to_int i_12 -> Type.pointcloud_point_Point_x (Seq.get (Model0.model p_1) j) <= max_seen_8 };
    invariant name { [#"../pointcloud.rs" 29 4 52] Type.pointcloud_point_Point_x (Seq.get (Model0.model p_1) (UInt64.to_int max_idx_11)) = max_seen_8 };
    _16 <- i_12;
    _18 <- p_1;
    _17 <- ([#"../pointcloud.rs" 30 14 21] Len0.len _18);
    goto BB6
  }
  BB6 {
    _15 <- ([#"../pointcloud.rs" 30 10 21] _16 < _17);
    switch (_15)
      | False -> goto BB13
      | _ -> goto BB7
      end
  }
  BB7 {
    _23 <- p_1;
    _24 <- i_12;
    _22 <- ([#"../pointcloud.rs" 31 11 15] Index0.index _23 _24);
    goto BB8
  }
  BB8 {
    _21 <- Type.pointcloud_point_Point_x _22;
    _25 <- max_seen_8;
    _20 <- ([#"../pointcloud.rs" 31 11 28] _21 > _25);
    switch (_20)
      | False -> goto BB11
      | _ -> goto BB9
      end
  }
  BB9 {
    _28 <- p_1;
    _29 <- i_12;
    _27 <- ([#"../pointcloud.rs" 32 23 27] Index0.index _28 _29);
    goto BB10
  }
  BB10 {
    _26 <- Type.pointcloud_point_Point_x _27;
    max_seen_8 <- _26;
    _30 <- i_12;
    max_idx_11 <- _30;
    _19 <- ();
    goto BB12
  }
  BB11 {
    _19 <- ();
    goto BB12
  }
  BB12 {
    i_12 <- ([#"../pointcloud.rs" 35 8 14] i_12 + (1 : usize));
    _14 <- ();
    goto BB5
  }
  BB13 {
    _13 <- ();
    _34 <- max_seen_8;
    _0 <- Type.Core_Option_Option_Some _34;
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
module Pointcloud_MaxY_Interface
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val max_y [@cfg:stackify] (p : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)) : Type.core_option_option int64
    ensures { [#"../pointcloud.rs" 40 0 3] match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.pointcloud_point_Point_y (Seq.get (Model0.model p) i) <= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.pointcloud_point_Point_y (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
end
module Pointcloud_MaxY
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = Type.pointcloud_point
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Type.pointcloud_point
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.pointcloud_point, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.pointcloud_point, type a = Type.alloc_alloc_global,
  function Model0.model = Model1.model
  let rec cfg max_y [@cfg:stackify] [#"../pointcloud.rs" 45 0 39] (p : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)) : Type.core_option_option int64
    ensures { [#"../pointcloud.rs" 40 0 3] match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.pointcloud_point_Point_y (Seq.get (Model0.model p) i) <= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.pointcloud_point_Point_y (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
   =
  var _0 : Type.core_option_option int64;
  var p_1 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _2 : ();
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _7 : ();
  var max_seen_8 : int64;
  var _9 : Type.pointcloud_point;
  var _10 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var max_idx_11 : usize;
  var i_12 : usize;
  var _13 : ();
  var _14 : ();
  var _15 : bool;
  var _16 : usize;
  var _17 : usize;
  var _18 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _19 : ();
  var _20 : bool;
  var _21 : int64;
  var _22 : Type.pointcloud_point;
  var _23 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _24 : usize;
  var _25 : int64;
  var _26 : int64;
  var _27 : Type.pointcloud_point;
  var _28 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _29 : usize;
  var _30 : usize;
  var _31 : ();
  var _32 : ();
  var _33 : ();
  var _34 : int64;
  {
    p_1 <- p;
    goto BB0
  }
  BB0 {
    _6 <- p_1;
    _5 <- ([#"../pointcloud.rs" 46 7 14] Len0.len _6);
    goto BB1
  }
  BB1 {
    _4 <- ([#"../pointcloud.rs" 46 7 19] _5 = (0 : usize));
    switch (_4)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    _0 <- Type.Core_Option_Option_None;
    goto BB14
  }
  BB3 {
    _3 <- ();
    _10 <- p_1;
    _9 <- ([#"../pointcloud.rs" 49 28 32] Index0.index _10 (0 : usize));
    goto BB4
  }
  BB4 {
    max_seen_8 <- Type.pointcloud_point_Point_y _9;
    max_idx_11 <- (0 : usize);
    i_12 <- (1 : usize);
    goto BB5
  }
  BB5 {
    invariant i_less { [#"../pointcloud.rs" 52 4 53] 1 <= UInt64.to_int i_12 && UInt64.to_int i_12 <= Seq.length (Model0.model p_1) };
    invariant max_idx_less { [#"../pointcloud.rs" 53 4 70] 0 <= UInt64.to_int max_idx_11 && UInt64.to_int max_idx_11 < Seq.length (Model0.model p_1) };
    invariant max_is_max { [#"../pointcloud.rs" 54 4 4] forall j : (int) . 0 <= j && j < UInt64.to_int i_12 -> Type.pointcloud_point_Point_y (Seq.get (Model0.model p_1) j) <= max_seen_8 };
    invariant name { [#"../pointcloud.rs" 57 4 52] Type.pointcloud_point_Point_y (Seq.get (Model0.model p_1) (UInt64.to_int max_idx_11)) = max_seen_8 };
    _16 <- i_12;
    _18 <- p_1;
    _17 <- ([#"../pointcloud.rs" 58 14 21] Len0.len _18);
    goto BB6
  }
  BB6 {
    _15 <- ([#"../pointcloud.rs" 58 10 21] _16 < _17);
    switch (_15)
      | False -> goto BB13
      | _ -> goto BB7
      end
  }
  BB7 {
    _23 <- p_1;
    _24 <- i_12;
    _22 <- ([#"../pointcloud.rs" 59 11 15] Index0.index _23 _24);
    goto BB8
  }
  BB8 {
    _21 <- Type.pointcloud_point_Point_y _22;
    _25 <- max_seen_8;
    _20 <- ([#"../pointcloud.rs" 59 11 28] _21 > _25);
    switch (_20)
      | False -> goto BB11
      | _ -> goto BB9
      end
  }
  BB9 {
    _28 <- p_1;
    _29 <- i_12;
    _27 <- ([#"../pointcloud.rs" 60 23 27] Index0.index _28 _29);
    goto BB10
  }
  BB10 {
    _26 <- Type.pointcloud_point_Point_y _27;
    max_seen_8 <- _26;
    _30 <- i_12;
    max_idx_11 <- _30;
    _19 <- ();
    goto BB12
  }
  BB11 {
    _19 <- ();
    goto BB12
  }
  BB12 {
    i_12 <- ([#"../pointcloud.rs" 63 8 14] i_12 + (1 : usize));
    _14 <- ();
    goto BB5
  }
  BB13 {
    _13 <- ();
    _34 <- max_seen_8;
    _0 <- Type.Core_Option_Option_Some _34;
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
module Pointcloud_MaxZ_Interface
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val max_z [@cfg:stackify] (p : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)) : Type.core_option_option int64
    ensures { [#"../pointcloud.rs" 68 0 3] match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.pointcloud_point_Point_z (Seq.get (Model0.model p) i) <= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.pointcloud_point_Point_z (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
end
module Pointcloud_MaxZ
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = Type.pointcloud_point
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Type.pointcloud_point
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.pointcloud_point, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.pointcloud_point, type a = Type.alloc_alloc_global,
  function Model0.model = Model1.model
  let rec cfg max_z [@cfg:stackify] [#"../pointcloud.rs" 73 0 39] (p : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)) : Type.core_option_option int64
    ensures { [#"../pointcloud.rs" 68 0 3] match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.pointcloud_point_Point_z (Seq.get (Model0.model p) i) <= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.pointcloud_point_Point_z (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
   =
  var _0 : Type.core_option_option int64;
  var p_1 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _2 : ();
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _7 : ();
  var max_seen_8 : int64;
  var _9 : Type.pointcloud_point;
  var _10 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var max_idx_11 : usize;
  var i_12 : usize;
  var _13 : ();
  var _14 : ();
  var _15 : bool;
  var _16 : usize;
  var _17 : usize;
  var _18 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _19 : ();
  var _20 : bool;
  var _21 : int64;
  var _22 : Type.pointcloud_point;
  var _23 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _24 : usize;
  var _25 : int64;
  var _26 : int64;
  var _27 : Type.pointcloud_point;
  var _28 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _29 : usize;
  var _30 : usize;
  var _31 : ();
  var _32 : ();
  var _33 : ();
  var _34 : int64;
  {
    p_1 <- p;
    goto BB0
  }
  BB0 {
    _6 <- p_1;
    _5 <- ([#"../pointcloud.rs" 74 7 14] Len0.len _6);
    goto BB1
  }
  BB1 {
    _4 <- ([#"../pointcloud.rs" 74 7 19] _5 = (0 : usize));
    switch (_4)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    _0 <- Type.Core_Option_Option_None;
    goto BB14
  }
  BB3 {
    _3 <- ();
    _10 <- p_1;
    _9 <- ([#"../pointcloud.rs" 77 28 32] Index0.index _10 (0 : usize));
    goto BB4
  }
  BB4 {
    max_seen_8 <- Type.pointcloud_point_Point_z _9;
    max_idx_11 <- (0 : usize);
    i_12 <- (1 : usize);
    goto BB5
  }
  BB5 {
    invariant i_less { [#"../pointcloud.rs" 80 4 53] 1 <= UInt64.to_int i_12 && UInt64.to_int i_12 <= Seq.length (Model0.model p_1) };
    invariant max_idx_less { [#"../pointcloud.rs" 81 4 70] 0 <= UInt64.to_int max_idx_11 && UInt64.to_int max_idx_11 < Seq.length (Model0.model p_1) };
    invariant max_is_max { [#"../pointcloud.rs" 82 4 4] forall j : (int) . 0 <= j && j < UInt64.to_int i_12 -> Type.pointcloud_point_Point_z (Seq.get (Model0.model p_1) j) <= max_seen_8 };
    invariant name { [#"../pointcloud.rs" 85 4 52] Type.pointcloud_point_Point_z (Seq.get (Model0.model p_1) (UInt64.to_int max_idx_11)) = max_seen_8 };
    _16 <- i_12;
    _18 <- p_1;
    _17 <- ([#"../pointcloud.rs" 86 14 21] Len0.len _18);
    goto BB6
  }
  BB6 {
    _15 <- ([#"../pointcloud.rs" 86 10 21] _16 < _17);
    switch (_15)
      | False -> goto BB13
      | _ -> goto BB7
      end
  }
  BB7 {
    _23 <- p_1;
    _24 <- i_12;
    _22 <- ([#"../pointcloud.rs" 87 11 15] Index0.index _23 _24);
    goto BB8
  }
  BB8 {
    _21 <- Type.pointcloud_point_Point_z _22;
    _25 <- max_seen_8;
    _20 <- ([#"../pointcloud.rs" 87 11 28] _21 > _25);
    switch (_20)
      | False -> goto BB11
      | _ -> goto BB9
      end
  }
  BB9 {
    _28 <- p_1;
    _29 <- i_12;
    _27 <- ([#"../pointcloud.rs" 88 23 27] Index0.index _28 _29);
    goto BB10
  }
  BB10 {
    _26 <- Type.pointcloud_point_Point_z _27;
    max_seen_8 <- _26;
    _30 <- i_12;
    max_idx_11 <- _30;
    _19 <- ();
    goto BB12
  }
  BB11 {
    _19 <- ();
    goto BB12
  }
  BB12 {
    i_12 <- ([#"../pointcloud.rs" 91 8 14] i_12 + (1 : usize));
    _14 <- ();
    goto BB5
  }
  BB13 {
    _13 <- ();
    _34 <- max_seen_8;
    _0 <- Type.Core_Option_Option_Some _34;
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
module Pointcloud_MinZ_Interface
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val min_z [@cfg:stackify] (p : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)) : Type.core_option_option int64
    ensures { [#"../pointcloud.rs" 96 0 3] match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.pointcloud_point_Point_z (Seq.get (Model0.model p) i) >= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.pointcloud_point_Point_z (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
end
module Pointcloud_MinZ
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = Type.pointcloud_point
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Type.pointcloud_point
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.pointcloud_point, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.pointcloud_point, type a = Type.alloc_alloc_global,
  function Model0.model = Model1.model
  let rec cfg min_z [@cfg:stackify] [#"../pointcloud.rs" 101 0 39] (p : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)) : Type.core_option_option int64
    ensures { [#"../pointcloud.rs" 96 0 3] match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.pointcloud_point_Point_z (Seq.get (Model0.model p) i) >= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.pointcloud_point_Point_z (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
   =
  var _0 : Type.core_option_option int64;
  var p_1 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _2 : ();
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _7 : ();
  var min_seen_8 : int64;
  var _9 : Type.pointcloud_point;
  var _10 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  ghost var min_idx_11 : usize;
  var _12 : ();
  var i_13 : usize;
  var _14 : ();
  var _15 : ();
  var _16 : bool;
  var _17 : usize;
  var _18 : usize;
  var _19 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _20 : ();
  var _21 : bool;
  var _22 : int64;
  var _23 : Type.pointcloud_point;
  var _24 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _25 : usize;
  var _26 : int64;
  var _27 : int64;
  var _28 : Type.pointcloud_point;
  var _29 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _30 : usize;
  ghost var _31 : usize;
  var _32 : ();
  var _33 : ();
  var _34 : ();
  var _35 : ();
  var _36 : int64;
  {
    p_1 <- p;
    goto BB0
  }
  BB0 {
    _6 <- p_1;
    _5 <- ([#"../pointcloud.rs" 102 7 14] Len0.len _6);
    goto BB1
  }
  BB1 {
    _4 <- ([#"../pointcloud.rs" 102 7 19] _5 = (0 : usize));
    switch (_4)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    _0 <- Type.Core_Option_Option_None;
    goto BB16
  }
  BB3 {
    _3 <- ();
    _10 <- p_1;
    _9 <- ([#"../pointcloud.rs" 105 28 32] Index0.index _10 (0 : usize));
    goto BB4
  }
  BB4 {
    min_seen_8 <- Type.pointcloud_point_Point_z _9;
    _12 <- ();
    min_idx_11 <- ghost ([#"../pointcloud.rs" 106 22 39] (0 : usize));
    goto BB5
  }
  BB5 {
    i_13 <- (1 : usize);
    goto BB6
  }
  BB6 {
    invariant min_idx_less { [#"../pointcloud.rs" 108 4 70] 0 <= UInt64.to_int min_idx_11 && UInt64.to_int min_idx_11 < Seq.length (Model0.model p_1) };
    invariant min_is_min { [#"../pointcloud.rs" 109 4 88] forall j : (int) . 0 <= j && j < UInt64.to_int i_13 -> Type.pointcloud_point_Point_z (Seq.get (Model0.model p_1) j) >= min_seen_8 };
    invariant name { [#"../pointcloud.rs" 110 4 52] Type.pointcloud_point_Point_z (Seq.get (Model0.model p_1) (UInt64.to_int min_idx_11)) = min_seen_8 };
    _17 <- i_13;
    _19 <- p_1;
    _18 <- ([#"../pointcloud.rs" 111 14 21] Len0.len _19);
    goto BB7
  }
  BB7 {
    _16 <- ([#"../pointcloud.rs" 111 10 21] _17 < _18);
    switch (_16)
      | False -> goto BB15
      | _ -> goto BB8
      end
  }
  BB8 {
    _24 <- p_1;
    _25 <- i_13;
    _23 <- ([#"../pointcloud.rs" 112 11 15] Index0.index _24 _25);
    goto BB9
  }
  BB9 {
    _22 <- Type.pointcloud_point_Point_z _23;
    _26 <- min_seen_8;
    _21 <- ([#"../pointcloud.rs" 112 11 28] _22 < _26);
    switch (_21)
      | False -> goto BB13
      | _ -> goto BB10
      end
  }
  BB10 {
    _29 <- p_1;
    _30 <- i_13;
    _28 <- ([#"../pointcloud.rs" 113 23 27] Index0.index _29 _30);
    goto BB11
  }
  BB11 {
    _27 <- Type.pointcloud_point_Point_z _28;
    min_seen_8 <- _27;
    _32 <- ();
    _31 <- ghost ([#"../pointcloud.rs" 114 22 34] i_13);
    goto BB12
  }
  BB12 {
    min_idx_11 <- _31;
    _20 <- ();
    goto BB14
  }
  BB13 {
    _20 <- ();
    goto BB14
  }
  BB14 {
    i_13 <- ([#"../pointcloud.rs" 116 8 14] i_13 + (1 : usize));
    _15 <- ();
    goto BB6
  }
  BB15 {
    _14 <- ();
    _36 <- min_seen_8;
    _0 <- Type.Core_Option_Option_Some _36;
    goto BB16
  }
  BB16 {
    return _0
  }
  
end
module Pointcloud_MinY_Interface
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val min_y [@cfg:stackify] (p : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)) : Type.core_option_option int64
    ensures { [#"../pointcloud.rs" 121 0 3] match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.pointcloud_point_Point_y (Seq.get (Model0.model p) i) >= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.pointcloud_point_Point_y (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
end
module Pointcloud_MinY
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = Type.pointcloud_point
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Type.pointcloud_point
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.pointcloud_point, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.pointcloud_point, type a = Type.alloc_alloc_global,
  function Model0.model = Model1.model
  let rec cfg min_y [@cfg:stackify] [#"../pointcloud.rs" 126 0 39] (p : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)) : Type.core_option_option int64
    ensures { [#"../pointcloud.rs" 121 0 3] match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.pointcloud_point_Point_y (Seq.get (Model0.model p) i) >= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.pointcloud_point_Point_y (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
   =
  var _0 : Type.core_option_option int64;
  var p_1 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _2 : ();
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _7 : ();
  var min_seen_8 : int64;
  var _9 : Type.pointcloud_point;
  var _10 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  ghost var min_idx_11 : usize;
  var _12 : ();
  var i_13 : usize;
  var _14 : ();
  var _15 : ();
  var _16 : bool;
  var _17 : usize;
  var _18 : usize;
  var _19 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _20 : ();
  var _21 : bool;
  var _22 : int64;
  var _23 : Type.pointcloud_point;
  var _24 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _25 : usize;
  var _26 : int64;
  var _27 : int64;
  var _28 : Type.pointcloud_point;
  var _29 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _30 : usize;
  ghost var _31 : usize;
  var _32 : ();
  var _33 : ();
  var _34 : ();
  var _35 : ();
  var _36 : int64;
  {
    p_1 <- p;
    goto BB0
  }
  BB0 {
    _6 <- p_1;
    _5 <- ([#"../pointcloud.rs" 127 7 14] Len0.len _6);
    goto BB1
  }
  BB1 {
    _4 <- ([#"../pointcloud.rs" 127 7 19] _5 = (0 : usize));
    switch (_4)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    _0 <- Type.Core_Option_Option_None;
    goto BB16
  }
  BB3 {
    _3 <- ();
    _10 <- p_1;
    _9 <- ([#"../pointcloud.rs" 130 23 27] Index0.index _10 (0 : usize));
    goto BB4
  }
  BB4 {
    min_seen_8 <- Type.pointcloud_point_Point_y _9;
    _12 <- ();
    min_idx_11 <- ghost ([#"../pointcloud.rs" 131 22 39] (0 : usize));
    goto BB5
  }
  BB5 {
    i_13 <- (1 : usize);
    goto BB6
  }
  BB6 {
    invariant min_idx_less { [#"../pointcloud.rs" 133 4 70] 0 <= UInt64.to_int min_idx_11 && UInt64.to_int min_idx_11 < Seq.length (Model0.model p_1) };
    invariant min_is_min { [#"../pointcloud.rs" 134 4 87] forall j : (int) . 0 <= j && j < UInt64.to_int i_13 -> Type.pointcloud_point_Point_y (Seq.get (Model0.model p_1) j) >= min_seen_8 };
    invariant name { [#"../pointcloud.rs" 135 4 52] Type.pointcloud_point_Point_y (Seq.get (Model0.model p_1) (UInt64.to_int min_idx_11)) = min_seen_8 };
    _17 <- i_13;
    _19 <- p_1;
    _18 <- ([#"../pointcloud.rs" 136 14 21] Len0.len _19);
    goto BB7
  }
  BB7 {
    _16 <- ([#"../pointcloud.rs" 136 10 21] _17 < _18);
    switch (_16)
      | False -> goto BB15
      | _ -> goto BB8
      end
  }
  BB8 {
    _24 <- p_1;
    _25 <- i_13;
    _23 <- ([#"../pointcloud.rs" 137 11 15] Index0.index _24 _25);
    goto BB9
  }
  BB9 {
    _22 <- Type.pointcloud_point_Point_y _23;
    _26 <- min_seen_8;
    _21 <- ([#"../pointcloud.rs" 137 11 28] _22 < _26);
    switch (_21)
      | False -> goto BB13
      | _ -> goto BB10
      end
  }
  BB10 {
    _29 <- p_1;
    _30 <- i_13;
    _28 <- ([#"../pointcloud.rs" 138 23 27] Index0.index _29 _30);
    goto BB11
  }
  BB11 {
    _27 <- Type.pointcloud_point_Point_y _28;
    min_seen_8 <- _27;
    _32 <- ();
    _31 <- ghost ([#"../pointcloud.rs" 139 22 34] i_13);
    goto BB12
  }
  BB12 {
    min_idx_11 <- _31;
    _20 <- ();
    goto BB14
  }
  BB13 {
    _20 <- ();
    goto BB14
  }
  BB14 {
    i_13 <- ([#"../pointcloud.rs" 141 8 14] i_13 + (1 : usize));
    _15 <- ();
    goto BB6
  }
  BB15 {
    _14 <- ();
    _36 <- min_seen_8;
    _0 <- Type.Core_Option_Option_Some _36;
    goto BB16
  }
  BB16 {
    return _0
  }
  
end
module Pointcloud_MinX_Interface
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val min_x [@cfg:stackify] (p : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)) : Type.core_option_option int64
    ensures { [#"../pointcloud.rs" 146 0 3] match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.pointcloud_point_Point_x (Seq.get (Model0.model p) i) >= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.pointcloud_point_Point_x (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
end
module Pointcloud_MinX
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = Type.pointcloud_point
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Type.pointcloud_point
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.pointcloud_point, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.pointcloud_point, type a = Type.alloc_alloc_global,
  function Model0.model = Model1.model
  let rec cfg min_x [@cfg:stackify] [#"../pointcloud.rs" 151 0 39] (p : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)) : Type.core_option_option int64
    ensures { [#"../pointcloud.rs" 146 0 3] match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.pointcloud_point_Point_x (Seq.get (Model0.model p) i) >= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.pointcloud_point_Point_x (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
   =
  var _0 : Type.core_option_option int64;
  var p_1 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _2 : ();
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _7 : ();
  var min_seen_8 : int64;
  var _9 : Type.pointcloud_point;
  var _10 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  ghost var min_idx_11 : usize;
  var _12 : ();
  var i_13 : usize;
  var _14 : ();
  var _15 : ();
  var _16 : bool;
  var _17 : usize;
  var _18 : usize;
  var _19 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _20 : ();
  var _21 : bool;
  var _22 : int64;
  var _23 : Type.pointcloud_point;
  var _24 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _25 : usize;
  var _26 : int64;
  var _27 : int64;
  var _28 : Type.pointcloud_point;
  var _29 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _30 : usize;
  ghost var _31 : usize;
  var _32 : ();
  var _33 : ();
  var _34 : ();
  var _35 : ();
  var _36 : int64;
  {
    p_1 <- p;
    goto BB0
  }
  BB0 {
    _6 <- p_1;
    _5 <- ([#"../pointcloud.rs" 152 7 14] Len0.len _6);
    goto BB1
  }
  BB1 {
    _4 <- ([#"../pointcloud.rs" 152 7 19] _5 = (0 : usize));
    switch (_4)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    _0 <- Type.Core_Option_Option_None;
    goto BB16
  }
  BB3 {
    _3 <- ();
    _10 <- p_1;
    _9 <- ([#"../pointcloud.rs" 155 23 27] Index0.index _10 (0 : usize));
    goto BB4
  }
  BB4 {
    min_seen_8 <- Type.pointcloud_point_Point_x _9;
    _12 <- ();
    min_idx_11 <- ghost ([#"../pointcloud.rs" 156 22 39] (0 : usize));
    goto BB5
  }
  BB5 {
    i_13 <- (1 : usize);
    goto BB6
  }
  BB6 {
    invariant min_idx_less { [#"../pointcloud.rs" 158 4 70] 0 <= UInt64.to_int min_idx_11 && UInt64.to_int min_idx_11 < Seq.length (Model0.model p_1) };
    invariant min_is_min { [#"../pointcloud.rs" 159 4 88] forall j : (int) . 0 <= j && j < UInt64.to_int i_13 -> Type.pointcloud_point_Point_x (Seq.get (Model0.model p_1) j) >= min_seen_8 };
    invariant name { [#"../pointcloud.rs" 160 4 52] Type.pointcloud_point_Point_x (Seq.get (Model0.model p_1) (UInt64.to_int min_idx_11)) = min_seen_8 };
    _17 <- i_13;
    _19 <- p_1;
    _18 <- ([#"../pointcloud.rs" 161 14 21] Len0.len _19);
    goto BB7
  }
  BB7 {
    _16 <- ([#"../pointcloud.rs" 161 10 21] _17 < _18);
    switch (_16)
      | False -> goto BB15
      | _ -> goto BB8
      end
  }
  BB8 {
    _24 <- p_1;
    _25 <- i_13;
    _23 <- ([#"../pointcloud.rs" 162 11 15] Index0.index _24 _25);
    goto BB9
  }
  BB9 {
    _22 <- Type.pointcloud_point_Point_x _23;
    _26 <- min_seen_8;
    _21 <- ([#"../pointcloud.rs" 162 11 28] _22 < _26);
    switch (_21)
      | False -> goto BB13
      | _ -> goto BB10
      end
  }
  BB10 {
    _29 <- p_1;
    _30 <- i_13;
    _28 <- ([#"../pointcloud.rs" 163 23 27] Index0.index _29 _30);
    goto BB11
  }
  BB11 {
    _27 <- Type.pointcloud_point_Point_x _28;
    min_seen_8 <- _27;
    _32 <- ();
    _31 <- ghost ([#"../pointcloud.rs" 164 22 34] i_13);
    goto BB12
  }
  BB12 {
    min_idx_11 <- _31;
    _20 <- ();
    goto BB14
  }
  BB13 {
    _20 <- ();
    goto BB14
  }
  BB14 {
    i_13 <- ([#"../pointcloud.rs" 166 8 14] i_13 + (1 : usize));
    _15 <- ();
    goto BB6
  }
  BB15 {
    _14 <- ();
    _36 <- min_seen_8;
    _0 <- Type.Core_Option_Option_Some _36;
    goto BB16
  }
  BB16 {
    return _0
  }
  
end
module Pointcloud_Abs_Interface
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  val abs [@cfg:stackify] (i : int64) : int64
    requires {[#"../pointcloud.rs" 171 0 25] i > (-9223372036854775808 : int64)}
    ensures { [#"../pointcloud.rs" 173 0 52] Int64.to_int result = (if Int64.to_int i < 0 then
      - Int64.to_int i
    else
      Int64.to_int i
    ) }
    ensures { [#"../pointcloud.rs" 172 0 24] Int64.to_int result >= 0 }
    
end
module Pointcloud_Abs
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  let rec cfg abs [@cfg:stackify] [#"../pointcloud.rs" 174 0 21] (i : int64) : int64
    requires {[#"../pointcloud.rs" 171 0 25] i > (-9223372036854775808 : int64)}
    ensures { [#"../pointcloud.rs" 173 0 52] Int64.to_int result = (if Int64.to_int i < 0 then
      - Int64.to_int i
    else
      Int64.to_int i
    ) }
    ensures { [#"../pointcloud.rs" 172 0 24] Int64.to_int result >= 0 }
    
   =
  var _0 : int64;
  var i_1 : int64;
  var _2 : bool;
  var _3 : int64;
  var _4 : int64;
  {
    i_1 <- i;
    goto BB0
  }
  BB0 {
    _3 <- i_1;
    _2 <- ([#"../pointcloud.rs" 175 7 12] _3 < (0 : int64));
    switch (_2)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    _4 <- i_1;
    _0 <- - _4;
    goto BB3
  }
  BB2 {
    _0 <- i_1;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module Pointcloud_Impl0_Add_Interface
  use Type
  use prelude.Prelude
  val add [@cfg:stackify] (self : Type.pointcloud_point) (rhs : Type.pointcloud_point) : Type.pointcloud_point
end
module Pointcloud_Impl0_Add
  use Type
  use prelude.Prelude
  val add [@cfg:stackify] (self : Type.pointcloud_point) (rhs : Type.pointcloud_point) : Type.pointcloud_point
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module Pointcloud_Unwrap_Interface
  type t
  use Type
  val unwrap [@cfg:stackify] (o : Type.core_option_option t) : t
    requires {[#"../pointcloud.rs" 195 0 25] not o = Type.Core_Option_Option_None}
    ensures { [#"../pointcloud.rs" 196 0 29] Type.Core_Option_Option_Some result = o }
    
end
module Pointcloud_Unwrap
  type t
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.core_option_option t
  let rec cfg unwrap [@cfg:stackify] [#"../pointcloud.rs" 197 0 31] (o : Type.core_option_option t) : t
    requires {[#"../pointcloud.rs" 195 0 25] not o = Type.Core_Option_Option_None}
    ensures { [#"../pointcloud.rs" 196 0 29] Type.Core_Option_Option_Some result = o }
    
   =
  var _0 : t;
  var o_1 : Type.core_option_option t;
  var _2 : isize;
  var t_3 : t;
  var _4 : ();
  {
    o_1 <- o;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (o_1)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB5
      end
  }
  BB3 {
    absurd
  }
  BB4 {
    assume { Resolve0.resolve o_1 };
    absurd
  }
  BB5 {
    assume { Resolve1.resolve t_3 };
    t_3 <- Type.core_option_option_Some_0 o_1;
    assume { Resolve1.resolve _0 };
    _0 <- t_3;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve0.resolve o_1 };
    return _0
  }
  
end
module Pointcloud_DivMono_Interface
  use mach.int.Int
  use mach.int.Int32
  function div_mono (a : int) (b : int) (c : int) : ()
end
module Pointcloud_DivMono
  use mach.int.Int
  use mach.int.Int32
  function div_mono [#"../pointcloud.rs" 208 0 35] (a : int) (b : int) (c : int) : () =
    [#"../pointcloud.rs" 204 0 8] ()
  axiom div_mono_spec : forall a : int, b : int, c : int . ([#"../pointcloud.rs" 206 0 19] a <= b) -> ([#"../pointcloud.rs" 205 0 18] c > 0) -> ([#"../pointcloud.rs" 207 0 26] div a c <= div b c)
end
module Pointcloud_DivMono_Impl
  use mach.int.Int
  use mach.int.Int32
  let rec ghost function div_mono (a : int) (b : int) (c : int) : ()
    requires {[#"../pointcloud.rs" 206 0 19] a <= b}
    requires {[#"../pointcloud.rs" 205 0 18] c > 0}
    ensures { [#"../pointcloud.rs" 207 0 26] div a c <= div b c }
    
   =
    [#"../pointcloud.rs" 204 0 8] ()
end
module Pointcloud_MultMono_Interface
  use mach.int.Int
  use mach.int.Int32
  function mult_mono (a : int) (b : int) (c : int) (d : int) : ()
end
module Pointcloud_MultMono
  use mach.int.Int
  use mach.int.Int32
  function mult_mono [#"../pointcloud.rs" 216 0 44] (a : int) (b : int) (c : int) (d : int) : () =
    [#"../pointcloud.rs" 210 0 8] ()
  axiom mult_mono_spec : forall a : int, b : int, c : int, d : int . ([#"../pointcloud.rs" 214 0 18] d > 0) -> ([#"../pointcloud.rs" 213 0 18] c > 0) -> ([#"../pointcloud.rs" 212 0 28] 0 <= a && b < d) -> ([#"../pointcloud.rs" 211 0 28] 0 <= a && a < c) -> ([#"../pointcloud.rs" 215 0 25] a * b < c * d)
end
module Pointcloud_MultMono_Impl
  use mach.int.Int
  use mach.int.Int32
  let rec ghost function mult_mono (a : int) (b : int) (c : int) (d : int) : ()
    requires {[#"../pointcloud.rs" 214 0 18] d > 0}
    requires {[#"../pointcloud.rs" 213 0 18] c > 0}
    requires {[#"../pointcloud.rs" 212 0 28] 0 <= a && b < d}
    requires {[#"../pointcloud.rs" 211 0 28] 0 <= a && a < c}
    ensures { [#"../pointcloud.rs" 215 0 25] a * b < c * d }
    
   =
    [#"../pointcloud.rs" 210 0 8] ()
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Std1_Vec_Impl1_Resolve_Interface
  type t
  use Type
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global))
end
module CreusotContracts_Std1_Vec_Impl1_Resolve
  type t
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global)) =
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module Alloc_Vec_FromElem_Interface
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module Alloc_Vec_FromElem
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module Pointcloud_DivPoint_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  val div_point [@cfg:stackify] (sup : Type.pointcloud_point) (div : usize) : Type.pointcloud_point
    requires {[#"../pointcloud.rs" 300 0 21] UInt64.to_int div > 0}
    
end
module Pointcloud_DivPoint
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  val div_point [@cfg:stackify] (sup : Type.pointcloud_point) (div : usize) : Type.pointcloud_point
    requires {[#"../pointcloud.rs" 300 0 21] UInt64.to_int div > 0}
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module CreusotContracts_Std1_Vec_Impl1
  type t
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
end
module Pointcloud_Average_Interface
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = usize, type a = Type.alloc_alloc_global,
  axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global, axiom .
  val average [@cfg:stackify] (count_array : Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (voxel_array : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)) (num_vox_x : usize) (num_vox_y : usize) (num_vox_z : usize) : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)
    requires {[#"../pointcloud.rs" 309 0 57] Seq.length (Model0.model voxel_array) = Seq.length (Model1.model count_array)}
    requires {[#"../pointcloud.rs" 308 0 75] Seq.length (Model1.model count_array) = UInt64.to_int num_vox_x * UInt64.to_int num_vox_y * UInt64.to_int num_vox_z}
    requires {[#"../pointcloud.rs" 307 0 31] UInt64.to_int num_vox_z <= 2000}
    requires {[#"../pointcloud.rs" 306 0 31] UInt64.to_int num_vox_y <= 2000}
    requires {[#"../pointcloud.rs" 305 0 31] UInt64.to_int num_vox_x <= 2000}
    
end
module Pointcloud_Average
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  clone Pointcloud_MultMono as MultMono0 with axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve3 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = Type.pointcloud_point
  clone Pointcloud_DivPoint_Interface as DivPoint0
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = Type.pointcloud_point
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve1 with type t = usize, function Model0.model = Model1.model,
  predicate Resolve0.resolve = Resolve3.resolve
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve0 with type t = Type.pointcloud_point,
  function Model0.model = Model0.model, predicate Resolve0.resolve = Resolve2.resolve
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = Type.pointcloud_point, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.pointcloud_point, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = Type.pointcloud_point, function Model0.model = Model0.model
  let rec cfg average [@cfg:stackify] [#"../pointcloud.rs" 310 0 15] (count_array : Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (voxel_array : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)) (num_vox_x : usize) (num_vox_y : usize) (num_vox_z : usize) : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)
    requires {[#"../pointcloud.rs" 309 0 57] Seq.length (Model0.model voxel_array) = Seq.length (Model1.model count_array)}
    requires {[#"../pointcloud.rs" 308 0 75] Seq.length (Model1.model count_array) = UInt64.to_int num_vox_x * UInt64.to_int num_vox_y * UInt64.to_int num_vox_z}
    requires {[#"../pointcloud.rs" 307 0 31] UInt64.to_int num_vox_z <= 2000}
    requires {[#"../pointcloud.rs" 306 0 31] UInt64.to_int num_vox_y <= 2000}
    requires {[#"../pointcloud.rs" 305 0 31] UInt64.to_int num_vox_x <= 2000}
    
   =
  var _0 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var count_array_1 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var voxel_array_2 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var num_vox_x_3 : usize;
  var num_vox_y_4 : usize;
  var num_vox_z_5 : usize;
  var _6 : ();
  var i_7 : usize;
  var pd_8 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _9 : ();
  var _10 : ();
  var _11 : bool;
  var _12 : usize;
  var _13 : usize;
  var j_14 : usize;
  var _15 : ();
  var _16 : bool;
  var _17 : usize;
  var _18 : usize;
  var k_19 : usize;
  var _20 : ();
  var _21 : bool;
  var _22 : usize;
  var _23 : usize;
  var idx_24 : usize;
  var _25 : usize;
  var _26 : usize;
  var _27 : usize;
  var _28 : usize;
  var _29 : ();
  var _30 : ();
  var _31 : ();
  var _32 : bool;
  var _33 : usize;
  var _34 : usize;
  var _35 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _36 : usize;
  var _37 : ();
  var _38 : borrowed (Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global));
  var _39 : Type.pointcloud_point;
  var _40 : Type.pointcloud_point;
  var _41 : Type.pointcloud_point;
  var _42 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _43 : usize;
  var _44 : usize;
  var _45 : usize;
  var _46 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _47 : usize;
  var _48 : ();
  var _49 : ();
  var _50 : ();
  var _51 : ();
  var _52 : ();
  var _53 : ();
  var _54 : ();
  var _55 : ();
  var _56 : ();
  {
    count_array_1 <- count_array;
    voxel_array_2 <- voxel_array;
    num_vox_x_3 <- num_vox_x;
    num_vox_y_4 <- num_vox_y;
    num_vox_z_5 <- num_vox_z;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    i_7 <- (0 : usize);
    pd_8 <- ([#"../pointcloud.rs" 318 17 27] New0.new ());
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant i_bound { [#"../pointcloud.rs" 319 4 54] 0 <= UInt64.to_int i_7 && UInt64.to_int i_7 <= UInt64.to_int num_vox_x_3 };
    _12 <- i_7;
    _13 <- num_vox_x_3;
    _11 <- ([#"../pointcloud.rs" 320 10 23] _12 < _13);
    switch (_11)
      | False -> goto BB20
      | _ -> goto BB5
      end
  }
  BB5 {
    j_14 <- (0 : usize);
    goto BB6
  }
  BB6 {
    invariant j_bound { [#"../pointcloud.rs" 322 8 58] 0 <= UInt64.to_int j_14 && UInt64.to_int j_14 <= UInt64.to_int num_vox_y_4 };
    _17 <- j_14;
    _18 <- num_vox_y_4;
    _16 <- ([#"../pointcloud.rs" 323 14 27] _17 < _18);
    switch (_16)
      | False -> goto BB19
      | _ -> goto BB7
      end
  }
  BB7 {
    k_19 <- (0 : usize);
    goto BB8
  }
  BB8 {
    invariant k_bound { [#"../pointcloud.rs" 325 12 62] 0 <= UInt64.to_int k_19 && UInt64.to_int k_19 <= UInt64.to_int num_vox_z_5 };
    _22 <- k_19;
    _23 <- num_vox_z_5;
    _21 <- ([#"../pointcloud.rs" 326 18 31] _22 < _23);
    switch (_21)
      | False -> goto BB18
      | _ -> goto BB9
      end
  }
  BB9 {
    _26 <- i_7;
    _27 <- j_14;
    _25 <- ([#"../pointcloud.rs" 327 34 39] _26 * _27);
    _28 <- k_19;
    idx_24 <- ([#"../pointcloud.rs" 327 33 44] _25 * _28);
    assert { [#"../pointcloud.rs" 328 16 60] let _ = MultMono0.mult_mono 0 0 0 0 in true };
    _29 <- ();
    assert { [#"../pointcloud.rs" 330 16 76] UInt64.to_int idx_24 < UInt64.to_int num_vox_x_3 * UInt64.to_int num_vox_y_4 * UInt64.to_int num_vox_z_5 };
    _30 <- ();
    _35 <- count_array_1;
    _36 <- idx_24;
    _34 <- ([#"../pointcloud.rs" 331 19 35] Index0.index _35 _36);
    goto BB10
  }
  BB10 {
    _33 <- _34;
    _32 <- ([#"../pointcloud.rs" 331 19 40] _33 <> (0 : usize));
    switch (_32)
      | False -> goto BB16
      | _ -> goto BB11
      end
  }
  BB11 {
    _38 <- borrow_mut pd_8;
    pd_8 <-  ^ _38;
    _42 <- voxel_array_2;
    _43 <- idx_24;
    _41 <- ([#"../pointcloud.rs" 332 38 54] Index1.index _42 _43);
    goto BB12
  }
  BB12 {
    _40 <- _41;
    _46 <- count_array_1;
    _47 <- idx_24;
    _45 <- ([#"../pointcloud.rs" 332 56 72] Index0.index _46 _47);
    goto BB13
  }
  BB13 {
    _44 <- _45;
    _39 <- ([#"../pointcloud.rs" 332 28 73] DivPoint0.div_point _40 _44);
    goto BB14
  }
  BB14 {
    _37 <- ([#"../pointcloud.rs" 332 20 74] Push0.push _38 _39);
    goto BB15
  }
  BB15 {
    _31 <- ();
    goto BB17
  }
  BB16 {
    _31 <- ();
    goto BB17
  }
  BB17 {
    k_19 <- ([#"../pointcloud.rs" 334 16 22] k_19 + (1 : usize));
    _10 <- ();
    goto BB8
  }
  BB18 {
    _20 <- ();
    j_14 <- ([#"../pointcloud.rs" 336 12 18] j_14 + (1 : usize));
    _10 <- ();
    goto BB6
  }
  BB19 {
    _15 <- ();
    i_7 <- ([#"../pointcloud.rs" 338 8 14] i_7 + (1 : usize));
    _10 <- ();
    goto BB4
  }
  BB20 {
    _9 <- ();
    assume { Resolve0.resolve _0 };
    _0 <- pd_8;
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    assume { Resolve0.resolve voxel_array_2 };
    goto BB23
  }
  BB23 {
    assume { Resolve1.resolve count_array_1 };
    return _0
  }
  
end
module Pointcloud_Impl0_Output
  use Type
  type output  =
    Type.pointcloud_point
end
module Core_Ops_Arith_Add_Output
  type self
  type rhs
  type output
end
module Core_Ops_Arith_Add_Add_Interface
  type self
  type rhs
  clone Core_Ops_Arith_Add_Output as Output0 with type self = self, type rhs = rhs
  val add [@cfg:stackify] (self : self) (rhs : rhs) : Output0.output
    requires {false}
    
end
module Core_Ops_Arith_Add_Add
  type self
  type rhs
  clone Core_Ops_Arith_Add_Output as Output0 with type self = self, type rhs = rhs
  val add [@cfg:stackify] (self : self) (rhs : rhs) : Output0.output
    requires {false}
    
end
module Pointcloud_Impl0
  use Type
  use prelude.Prelude
  clone Pointcloud_Impl0_Add_Interface as Add0
  clone Pointcloud_Impl0_Output as Output0
  clone Core_Ops_Arith_Add_Add_Interface as Add1 with type self = Type.pointcloud_point,
  type rhs = Type.pointcloud_point, val add = Add0.add, type Output0.output = Output0.output
  clone Core_Ops_Arith_Add_Output as Output1 with type self = Type.pointcloud_point, type rhs = Type.pointcloud_point,
  type output = Output0.output
end
module Alloc_Vec_Impl17
  type t
  type i
  type a
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : (int) . 0 <= i && i <> UInt64.to_int self && i < Seq.length old' -> Seq.get old' i = Seq.get fin i
end
module Pointcloud_Downsample_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.Int64
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global, axiom .
  val downsample [@cfg:stackify] (p : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)) (voxel_size : uint64) : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)
    requires {[#"../pointcloud.rs" 227 0 51] UInt64.to_int voxel_size > 0 && UInt64.to_int voxel_size <= 1000}
    requires {[#"../pointcloud.rs" 224 0 2] forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Int64.to_int (Type.pointcloud_point_Point_z (Seq.get (Model0.model p) i)) < 1000 && Int64.to_int (Type.pointcloud_point_Point_z (Seq.get (Model0.model p) i)) >= - 1000}
    requires {[#"../pointcloud.rs" 221 0 2] forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Int64.to_int (Type.pointcloud_point_Point_y (Seq.get (Model0.model p) i)) < 1000 && Int64.to_int (Type.pointcloud_point_Point_y (Seq.get (Model0.model p) i)) >= - 1000}
    requires {[#"../pointcloud.rs" 218 0 2] forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Int64.to_int (Type.pointcloud_point_Point_x (Seq.get (Model0.model p) i)) < 1000 && Int64.to_int (Type.pointcloud_point_Point_x (Seq.get (Model0.model p) i)) >= - 1000}
    
end
module Pointcloud_Downsample
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.Int64
  use Type
  use prelude.Prelude
  clone Pointcloud_MultMono as MultMono0 with axiom .
  clone Pointcloud_DivMono as DivMono0 with axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve5 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy2 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = Type.pointcloud_point
  clone Pointcloud_Impl0_Add_Interface as Add0
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = Type.pointcloud_point
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Type.pointcloud_point
  clone Pointcloud_Abs_Interface as Abs0
  clone Pointcloud_Unwrap_Interface as Unwrap0 with type t = int64
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.pointcloud_point,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = Type.pointcloud_point
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve3 with type t = usize, function Model0.model = Model1.model,
  predicate Resolve0.resolve = Resolve5.resolve
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut1 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere,
  predicate HasValue0.has_value = HasValue1.has_value, type Output0.output = Output1.output
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_FromElem_Interface as FromElem1 with type t = usize, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone Pointcloud_MinZ_Interface as MinZ0 with function Model0.model = Model2.model
  clone Pointcloud_MaxZ_Interface as MaxZ0 with function Model0.model = Model2.model
  clone Pointcloud_MinY_Interface as MinY0 with function Model0.model = Model2.model
  clone Pointcloud_MaxY_Interface as MaxY0 with function Model0.model = Model2.model
  clone Pointcloud_MinX_Interface as MinX0 with function Model0.model = Model2.model
  clone Pointcloud_MaxX_Interface as MaxX0 with function Model0.model = Model2.model
  clone Pointcloud_Average_Interface as Average0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Type.pointcloud_point, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.pointcloud_point, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = Type.pointcloud_point,
  function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve0 with type t = Type.pointcloud_point,
  function Model0.model = Model0.model, predicate Resolve0.resolve = Resolve4.resolve
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = Type.pointcloud_point, function Model0.model = Model0.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.pointcloud_point, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  let rec cfg downsample [@cfg:stackify] [#"../pointcloud.rs" 228 0 59] (p : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)) (voxel_size : uint64) : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global)
    requires {[#"../pointcloud.rs" 227 0 51] UInt64.to_int voxel_size > 0 && UInt64.to_int voxel_size <= 1000}
    requires {[#"../pointcloud.rs" 224 0 2] forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Int64.to_int (Type.pointcloud_point_Point_z (Seq.get (Model0.model p) i)) < 1000 && Int64.to_int (Type.pointcloud_point_Point_z (Seq.get (Model0.model p) i)) >= - 1000}
    requires {[#"../pointcloud.rs" 221 0 2] forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Int64.to_int (Type.pointcloud_point_Point_y (Seq.get (Model0.model p) i)) < 1000 && Int64.to_int (Type.pointcloud_point_Point_y (Seq.get (Model0.model p) i)) >= - 1000}
    requires {[#"../pointcloud.rs" 218 0 2] forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Int64.to_int (Type.pointcloud_point_Point_x (Seq.get (Model0.model p) i)) < 1000 && Int64.to_int (Type.pointcloud_point_Point_x (Seq.get (Model0.model p) i)) >= - 1000}
    
   =
  var _0 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var p_1 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var voxel_size_2 : uint64;
  var _3 : ();
  var _4 : ();
  var _5 : bool;
  var _6 : usize;
  var _7 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _8 : ();
  var x_max_9 : int64;
  var _10 : Type.core_option_option int64;
  var _11 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _12 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var x_min_13 : int64;
  var _14 : Type.core_option_option int64;
  var _15 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _16 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _17 : ();
  var num_vox_x_18 : uint64;
  var _19 : uint64;
  var _20 : uint64;
  var _21 : int64;
  var _22 : int64;
  var _23 : int64;
  var _24 : int64;
  var _25 : uint64;
  var _26 : bool;
  var y_max_27 : int64;
  var _28 : Type.core_option_option int64;
  var _29 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _30 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var y_min_31 : int64;
  var _32 : Type.core_option_option int64;
  var _33 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _34 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _35 : ();
  var num_vox_y_36 : uint64;
  var _37 : uint64;
  var _38 : uint64;
  var _39 : int64;
  var _40 : int64;
  var _41 : int64;
  var _42 : int64;
  var _43 : uint64;
  var _44 : bool;
  var z_max_45 : int64;
  var _46 : Type.core_option_option int64;
  var _47 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _48 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var z_min_49 : int64;
  var _50 : Type.core_option_option int64;
  var _51 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _52 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _53 : ();
  var num_vox_z_54 : uint64;
  var _55 : uint64;
  var _56 : uint64;
  var _57 : int64;
  var _58 : int64;
  var _59 : int64;
  var _60 : int64;
  var _61 : uint64;
  var _62 : bool;
  var _63 : ();
  var _64 : ();
  var _65 : ();
  var _66 : ();
  var voxel_array_67 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _68 : Type.pointcloud_point;
  var _69 : usize;
  var _70 : uint64;
  var _71 : uint64;
  var _72 : uint64;
  var _73 : uint64;
  var _74 : uint64;
  var count_array_75 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _76 : usize;
  var _77 : uint64;
  var _78 : uint64;
  var _79 : uint64;
  var _80 : uint64;
  var _81 : uint64;
  var i_82 : usize;
  var _83 : ();
  var _84 : ();
  var _85 : bool;
  var _86 : usize;
  var _87 : usize;
  var _88 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var pt_89 : Type.pointcloud_point;
  var _90 : Type.pointcloud_point;
  var _91 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _92 : usize;
  var x_floored_93 : int64;
  var _94 : int64;
  var _95 : int64;
  var _96 : int64;
  var _97 : int64;
  var _98 : uint64;
  var _99 : bool;
  var _100 : bool;
  var _101 : bool;
  var _102 : bool;
  var y_floored_103 : int64;
  var _104 : int64;
  var _105 : int64;
  var _106 : int64;
  var _107 : int64;
  var _108 : uint64;
  var _109 : bool;
  var _110 : bool;
  var _111 : bool;
  var _112 : bool;
  var z_floored_113 : int64;
  var _114 : int64;
  var _115 : int64;
  var _116 : int64;
  var _117 : int64;
  var _118 : uint64;
  var _119 : bool;
  var _120 : bool;
  var _121 : bool;
  var _122 : bool;
  var _123 : ();
  var _124 : ();
  var _125 : ();
  var _126 : ();
  var ix_127 : usize;
  var _128 : int64;
  var _129 : int64;
  var _130 : int64;
  var _131 : int64;
  var _132 : int64;
  var _133 : ();
  var _134 : ();
  var _135 : ();
  var _136 : ();
  var _137 : Type.pointcloud_point;
  var _138 : Type.pointcloud_point;
  var _139 : Type.pointcloud_point;
  var _140 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _141 : usize;
  var _142 : Type.pointcloud_point;
  var _143 : borrowed (Type.pointcloud_point);
  var _144 : borrowed (Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global));
  var _145 : usize;
  var _146 : usize;
  var _147 : usize;
  var _148 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _149 : usize;
  var _150 : borrowed usize;
  var _151 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _152 : usize;
  var _153 : ();
  var _154 : ();
  var _155 : ();
  var _156 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _157 : Type.alloc_vec_vec (Type.pointcloud_point) (Type.alloc_alloc_global);
  var _158 : usize;
  var _159 : uint64;
  var _160 : usize;
  var _161 : uint64;
  var _162 : usize;
  var _163 : uint64;
  {
    p_1 <- p;
    voxel_size_2 <- voxel_size;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _7 <- p_1;
    _6 <- ([#"../pointcloud.rs" 229 7 14] Len0.len _7);
    goto BB4
  }
  BB4 {
    _5 <- ([#"../pointcloud.rs" 229 7 19] _6 = (0 : usize));
    switch (_5)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    _0 <- ([#"../pointcloud.rs" 230 15 25] New0.new ());
    goto BB49
  }
  BB6 {
    _4 <- ();
    _12 <- p_1;
    _11 <- _12;
    _10 <- ([#"../pointcloud.rs" 233 28 37] MaxX0.max_x _11);
    goto BB7
  }
  BB7 {
    x_max_9 <- ([#"../pointcloud.rs" 233 21 38] Unwrap0.unwrap _10);
    goto BB8
  }
  BB8 {
    _16 <- p_1;
    _15 <- _16;
    _14 <- ([#"../pointcloud.rs" 234 28 37] MinX0.min_x _15);
    goto BB9
  }
  BB9 {
    x_min_13 <- ([#"../pointcloud.rs" 234 21 38] Unwrap0.unwrap _14);
    goto BB10
  }
  BB10 {
    assert { [#"../pointcloud.rs" 236 4 74] - 1000 <= Int64.to_int x_min_13 && Int64.to_int x_min_13 <= Int64.to_int x_max_9 && Int64.to_int x_max_9 < 1000 };
    _17 <- ();
    _23 <- x_max_9;
    _24 <- x_min_13;
    _22 <- ([#"../pointcloud.rs" 237 30 43] _23 - _24);
    _21 <- ([#"../pointcloud.rs" 237 26 44] Abs0.abs _22);
    goto BB11
  }
  BB11 {
    _20 <- UInt64.of_int (Int64.to_int _21);
    _25 <- voxel_size_2;
    _26 <- ([#"../pointcloud.rs" 237 25 65] _25 = (0 : uint64));
    assert { not _26 };
    goto BB12
  }
  BB12 {
    _19 <- ([#"../pointcloud.rs" 237 25 65] _20 / _25);
    num_vox_x_18 <- ([#"../pointcloud.rs" 237 25 69] _19 + (1 : uint64));
    _30 <- p_1;
    _29 <- _30;
    _28 <- ([#"../pointcloud.rs" 239 28 37] MaxY0.max_y _29);
    goto BB13
  }
  BB13 {
    y_max_27 <- ([#"../pointcloud.rs" 239 21 38] Unwrap0.unwrap _28);
    goto BB14
  }
  BB14 {
    _34 <- p_1;
    _33 <- _34;
    _32 <- ([#"../pointcloud.rs" 240 28 37] MinY0.min_y _33);
    goto BB15
  }
  BB15 {
    y_min_31 <- ([#"../pointcloud.rs" 240 21 38] Unwrap0.unwrap _32);
    goto BB16
  }
  BB16 {
    assert { [#"../pointcloud.rs" 241 4 74] - 1000 <= Int64.to_int x_min_13 && Int64.to_int x_min_13 <= Int64.to_int x_max_9 && Int64.to_int x_max_9 < 1000 };
    _35 <- ();
    _41 <- y_max_27;
    _42 <- y_min_31;
    _40 <- ([#"../pointcloud.rs" 242 30 43] _41 - _42);
    _39 <- ([#"../pointcloud.rs" 242 26 44] Abs0.abs _40);
    goto BB17
  }
  BB17 {
    _38 <- UInt64.of_int (Int64.to_int _39);
    _43 <- voxel_size_2;
    _44 <- ([#"../pointcloud.rs" 242 25 65] _43 = (0 : uint64));
    assert { not _44 };
    goto BB18
  }
  BB18 {
    _37 <- ([#"../pointcloud.rs" 242 25 65] _38 / _43);
    num_vox_y_36 <- ([#"../pointcloud.rs" 242 25 69] _37 + (1 : uint64));
    _48 <- p_1;
    _47 <- _48;
    _46 <- ([#"../pointcloud.rs" 244 28 37] MaxZ0.max_z _47);
    goto BB19
  }
  BB19 {
    z_max_45 <- ([#"../pointcloud.rs" 244 21 38] Unwrap0.unwrap _46);
    goto BB20
  }
  BB20 {
    _52 <- p_1;
    _51 <- _52;
    _50 <- ([#"../pointcloud.rs" 245 28 37] MinZ0.min_z _51);
    goto BB21
  }
  BB21 {
    z_min_49 <- ([#"../pointcloud.rs" 245 21 38] Unwrap0.unwrap _50);
    goto BB22
  }
  BB22 {
    assert { [#"../pointcloud.rs" 246 4 74] - 1000 <= Int64.to_int x_min_13 && Int64.to_int x_min_13 <= Int64.to_int x_max_9 && Int64.to_int x_max_9 < 1000 };
    _53 <- ();
    _59 <- z_max_45;
    _60 <- z_min_49;
    _58 <- ([#"../pointcloud.rs" 247 30 43] _59 - _60);
    _57 <- ([#"../pointcloud.rs" 247 26 44] Abs0.abs _58);
    goto BB23
  }
  BB23 {
    _56 <- UInt64.of_int (Int64.to_int _57);
    _61 <- voxel_size_2;
    _62 <- ([#"../pointcloud.rs" 247 25 65] _61 = (0 : uint64));
    assert { not _62 };
    goto BB24
  }
  BB24 {
    _55 <- ([#"../pointcloud.rs" 247 25 65] _56 / _61);
    num_vox_z_54 <- ([#"../pointcloud.rs" 247 25 69] _55 + (1 : uint64));
    assert { [#"../pointcloud.rs" 249 4 59] 0 < UInt64.to_int num_vox_x_18 && UInt64.to_int num_vox_x_18 <= 2000 };
    _63 <- ();
    assert { [#"../pointcloud.rs" 250 4 59] 0 < UInt64.to_int num_vox_y_36 && UInt64.to_int num_vox_y_36 <= 2000 };
    _64 <- ();
    assert { [#"../pointcloud.rs" 251 4 59] 0 < UInt64.to_int num_vox_z_54 && UInt64.to_int num_vox_z_54 <= 2000 };
    _65 <- ();
    assert { [#"../pointcloud.rs" 253 4 55] UInt64.to_int num_vox_x_18 * UInt64.to_int num_vox_y_36 <= 4000000 };
    _66 <- ();
    _68 <- Type.Pointcloud_Point (0 : int64) (0 : int64) (0 : int64);
    _72 <- num_vox_x_18;
    _73 <- num_vox_y_36;
    _71 <- ([#"../pointcloud.rs" 255 52 73] _72 * _73);
    _74 <- num_vox_z_54;
    _70 <- ([#"../pointcloud.rs" 255 51 86] _71 * _74);
    _69 <- UInt64.of_int (UInt64.to_int _70);
    voxel_array_67 <- ([#"../pointcloud.rs" 255 8 96] FromElem0.from_elem _68 _69);
    goto BB25
  }
  BB25 {
    _79 <- num_vox_x_18;
    _80 <- num_vox_y_36;
    _78 <- ([#"../pointcloud.rs" 258 27 48] _79 * _80);
    _81 <- num_vox_z_54;
    _77 <- ([#"../pointcloud.rs" 258 26 61] _78 * _81);
    _76 <- UInt64.of_int (UInt64.to_int _77);
    count_array_75 <- ([#"../pointcloud.rs" 258 8 71] FromElem1.from_elem (0 : usize) _76);
    goto BB26
  }
  BB26 {
    i_82 <- (0 : usize);
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    invariant count_contents { [#"../pointcloud.rs" 262 4 109] forall j : (int) . 0 <= j && j < Seq.length (Model1.model count_array_75) -> Seq.get (Model1.model count_array_75) j <= i_82 };
    invariant voxel_len { [#"../pointcloud.rs" 263 4 89] Seq.length (Model0.model voxel_array_67) = UInt64.to_int num_vox_x_18 * UInt64.to_int num_vox_y_36 * UInt64.to_int num_vox_z_54 };
    invariant count_len { [#"../pointcloud.rs" 264 4 89] Seq.length (Model1.model count_array_75) = UInt64.to_int num_vox_x_18 * UInt64.to_int num_vox_y_36 * UInt64.to_int num_vox_z_54 };
    _86 <- i_82;
    _88 <- p_1;
    _87 <- ([#"../pointcloud.rs" 265 14 21] Len0.len _88);
    goto BB31
  }
  BB31 {
    _85 <- ([#"../pointcloud.rs" 265 10 21] _86 < _87);
    switch (_85)
      | False -> goto BB45
      | _ -> goto BB32
      end
  }
  BB32 {
    _91 <- p_1;
    _92 <- i_82;
    _90 <- ([#"../pointcloud.rs" 266 18 22] Index0.index _91 _92);
    goto BB33
  }
  BB33 {
    pt_89 <- _90;
    _95 <- Type.pointcloud_point_Point_x pt_89;
    _96 <- x_min_13;
    _94 <- ([#"../pointcloud.rs" 267 24 38] _95 - _96);
    _98 <- voxel_size_2;
    _97 <- Int64.of_int (UInt64.to_int _98);
    _99 <- ([#"../pointcloud.rs" 267 24 58] _97 = (0 : int64));
    assert { not _99 };
    goto BB34
  }
  BB34 {
    _100 <- ([#"../pointcloud.rs" 267 24 58] _97 = (-1 : int64));
    _101 <- ([#"../pointcloud.rs" 267 24 58] _94 = (-9223372036854775808 : int64));
    _102 <- _100 && _101;
    assert { not _102 };
    goto BB35
  }
  BB35 {
    x_floored_93 <- ([#"../pointcloud.rs" 267 24 58] _94 / _97);
    _105 <- Type.pointcloud_point_Point_y pt_89;
    _106 <- y_min_31;
    _104 <- ([#"../pointcloud.rs" 268 24 38] _105 - _106);
    _108 <- voxel_size_2;
    _107 <- Int64.of_int (UInt64.to_int _108);
    _109 <- ([#"../pointcloud.rs" 268 24 58] _107 = (0 : int64));
    assert { not _109 };
    goto BB36
  }
  BB36 {
    _110 <- ([#"../pointcloud.rs" 268 24 58] _107 = (-1 : int64));
    _111 <- ([#"../pointcloud.rs" 268 24 58] _104 = (-9223372036854775808 : int64));
    _112 <- _110 && _111;
    assert { not _112 };
    goto BB37
  }
  BB37 {
    y_floored_103 <- ([#"../pointcloud.rs" 268 24 58] _104 / _107);
    _115 <- Type.pointcloud_point_Point_z pt_89;
    _116 <- z_min_49;
    _114 <- ([#"../pointcloud.rs" 269 24 38] _115 - _116);
    _118 <- voxel_size_2;
    _117 <- Int64.of_int (UInt64.to_int _118);
    _119 <- ([#"../pointcloud.rs" 269 24 58] _117 = (0 : int64));
    assert { not _119 };
    goto BB38
  }
  BB38 {
    _120 <- ([#"../pointcloud.rs" 269 24 58] _117 = (-1 : int64));
    _121 <- ([#"../pointcloud.rs" 269 24 58] _114 = (-9223372036854775808 : int64));
    _122 <- _120 && _121;
    assert { not _122 };
    goto BB39
  }
  BB39 {
    z_floored_113 <- ([#"../pointcloud.rs" 269 24 58] _114 / _117);
    assert { [#"../pointcloud.rs" 271 8 48] let _ = DivMono0.div_mono 0 0 0 in true };
    _123 <- ();
    assert { [#"../pointcloud.rs" 274 8 68] 0 <= Int64.to_int x_floored_93 && Int64.to_int x_floored_93 < UInt64.to_int num_vox_x_18 };
    _124 <- ();
    assert { [#"../pointcloud.rs" 275 8 68] 0 <= Int64.to_int y_floored_103 && Int64.to_int y_floored_103 < UInt64.to_int num_vox_y_36 };
    _125 <- ();
    assert { [#"../pointcloud.rs" 276 8 68] 0 <= Int64.to_int z_floored_113 && Int64.to_int z_floored_113 < UInt64.to_int num_vox_z_54 };
    _126 <- ();
    _130 <- x_floored_93;
    _131 <- y_floored_103;
    _129 <- ([#"../pointcloud.rs" 278 18 39] _130 * _131);
    _132 <- z_floored_113;
    _128 <- ([#"../pointcloud.rs" 278 17 52] _129 * _132);
    ix_127 <- UInt64.of_int (Int64.to_int _128);
    assert { [#"../pointcloud.rs" 280 8 52] let _ = MultMono0.mult_mono 0 0 0 0 in true };
    _133 <- ();
    assert { [#"../pointcloud.rs" 281 8 75] Int64.to_int x_floored_93 * Int64.to_int y_floored_103 < UInt64.to_int num_vox_x_18 * UInt64.to_int num_vox_y_36 };
    _134 <- ();
    assert { [#"../pointcloud.rs" 282 8 101] Int64.to_int x_floored_93 * Int64.to_int y_floored_103 * Int64.to_int z_floored_113 < UInt64.to_int num_vox_x_18 * UInt64.to_int num_vox_y_36 * UInt64.to_int num_vox_z_54 };
    _135 <- ();
    assert { [#"../pointcloud.rs" 283 8 69] UInt64.to_int ix_127 < UInt64.to_int num_vox_x_18 * UInt64.to_int num_vox_y_36 * UInt64.to_int num_vox_z_54 };
    _136 <- ();
    _140 <- voxel_array_67;
    _141 <- ix_127;
    _139 <- ([#"../pointcloud.rs" 285 26 41] Index0.index _140 _141);
    goto BB40
  }
  BB40 {
    _138 <- _139;
    _142 <- pt_89;
    _137 <- ([#"../pointcloud.rs" 285 26 46] Add0.add _138 _142);
    goto BB41
  }
  BB41 {
    _144 <- borrow_mut voxel_array_67;
    voxel_array_67 <-  ^ _144;
    _145 <- ix_127;
    _143 <- ([#"../pointcloud.rs" 285 8 23] IndexMut0.index_mut _144 _145);
    goto BB42
  }
  BB42 {
    _143 <- { _143 with current = _137 };
    assume { Resolve1.resolve _143 };
    _148 <- count_array_75;
    _149 <- ix_127;
    _147 <- ([#"../pointcloud.rs" 286 26 41] Index1.index _148 _149);
    goto BB43
  }
  BB43 {
    _146 <- _147;
    _151 <- borrow_mut count_array_75;
    count_array_75 <-  ^ _151;
    _152 <- ix_127;
    _150 <- ([#"../pointcloud.rs" 286 8 23] IndexMut1.index_mut _151 _152);
    goto BB44
  }
  BB44 {
    _150 <- { _150 with current = ([#"../pointcloud.rs" 286 8 45] _146 + (1 : usize)) };
    assume { Resolve2.resolve _150 };
    i_82 <- ([#"../pointcloud.rs" 287 8 14] i_82 + (1 : usize));
    _84 <- ();
    goto BB30
  }
  BB45 {
    _83 <- ();
    assume { Resolve3.resolve _156 };
    _156 <- count_array_75;
    assume { Resolve0.resolve _157 };
    _157 <- voxel_array_67;
    _159 <- num_vox_x_18;
    _158 <- UInt64.of_int (UInt64.to_int _159);
    _161 <- num_vox_y_36;
    _160 <- UInt64.of_int (UInt64.to_int _161);
    _163 <- num_vox_z_54;
    _162 <- UInt64.of_int (UInt64.to_int _163);
    _0 <- ([#"../pointcloud.rs" 290 11 5] Average0.average _156 _157 _158 _160 _162);
    goto BB46
  }
  BB46 {
    goto BB47
  }
  BB47 {
    goto BB48
  }
  BB48 {
    goto BB50
  }
  BB49 {
    goto BB50
  }
  BB50 {
    goto BB51
  }
  BB51 {
    assume { Resolve0.resolve p_1 };
    return _0
  }
  
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Pointcloud_Impl1
  use Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Type.pointcloud_point
  clone Pointcloud_Impl1_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.pointcloud_point, val clone' = Clone0.clone'
end
module Pointcloud_Impl2
  
end
